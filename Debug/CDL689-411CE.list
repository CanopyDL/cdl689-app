
CDL689-411CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000019c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e8  080081a0  080081a0  000081a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08011388  08011388  00011388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011544  08011544  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08011544  08011544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801154c  0801154c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801154c  0801154c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011550  08011550  00011550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08011554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c84  20000010  08011564  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c94  08011564  00024c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c92c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003690  00000000  00000000  0003c96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001698  00000000  00000000  00040000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  00041698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ed3  00000000  00000000  00042ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001220d  00000000  00000000  00046a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000984d4  00000000  00000000  00058c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f115c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ee0  00000000  00000000  000f11d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	; (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	20000010 	.word	0x20000010
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08011370 	.word	0x08011370

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000014 	.word	0x20000014
 80081dc:	08011370 	.word	0x08011370

080081e0 <__aeabi_uldivmod>:
 80081e0:	b953      	cbnz	r3, 80081f8 <__aeabi_uldivmod+0x18>
 80081e2:	b94a      	cbnz	r2, 80081f8 <__aeabi_uldivmod+0x18>
 80081e4:	2900      	cmp	r1, #0
 80081e6:	bf08      	it	eq
 80081e8:	2800      	cmpeq	r0, #0
 80081ea:	bf1c      	itt	ne
 80081ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80081f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80081f4:	f000 b972 	b.w	80084dc <__aeabi_idiv0>
 80081f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80081fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008200:	f000 f806 	bl	8008210 <__udivmoddi4>
 8008204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800820c:	b004      	add	sp, #16
 800820e:	4770      	bx	lr

08008210 <__udivmoddi4>:
 8008210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008214:	9e08      	ldr	r6, [sp, #32]
 8008216:	4604      	mov	r4, r0
 8008218:	4688      	mov	r8, r1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d14b      	bne.n	80082b6 <__udivmoddi4+0xa6>
 800821e:	428a      	cmp	r2, r1
 8008220:	4615      	mov	r5, r2
 8008222:	d967      	bls.n	80082f4 <__udivmoddi4+0xe4>
 8008224:	fab2 f282 	clz	r2, r2
 8008228:	b14a      	cbz	r2, 800823e <__udivmoddi4+0x2e>
 800822a:	f1c2 0720 	rsb	r7, r2, #32
 800822e:	fa01 f302 	lsl.w	r3, r1, r2
 8008232:	fa20 f707 	lsr.w	r7, r0, r7
 8008236:	4095      	lsls	r5, r2
 8008238:	ea47 0803 	orr.w	r8, r7, r3
 800823c:	4094      	lsls	r4, r2
 800823e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008242:	0c23      	lsrs	r3, r4, #16
 8008244:	fbb8 f7fe 	udiv	r7, r8, lr
 8008248:	fa1f fc85 	uxth.w	ip, r5
 800824c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008254:	fb07 f10c 	mul.w	r1, r7, ip
 8008258:	4299      	cmp	r1, r3
 800825a:	d909      	bls.n	8008270 <__udivmoddi4+0x60>
 800825c:	18eb      	adds	r3, r5, r3
 800825e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008262:	f080 811b 	bcs.w	800849c <__udivmoddi4+0x28c>
 8008266:	4299      	cmp	r1, r3
 8008268:	f240 8118 	bls.w	800849c <__udivmoddi4+0x28c>
 800826c:	3f02      	subs	r7, #2
 800826e:	442b      	add	r3, r5
 8008270:	1a5b      	subs	r3, r3, r1
 8008272:	b2a4      	uxth	r4, r4
 8008274:	fbb3 f0fe 	udiv	r0, r3, lr
 8008278:	fb0e 3310 	mls	r3, lr, r0, r3
 800827c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008280:	fb00 fc0c 	mul.w	ip, r0, ip
 8008284:	45a4      	cmp	ip, r4
 8008286:	d909      	bls.n	800829c <__udivmoddi4+0x8c>
 8008288:	192c      	adds	r4, r5, r4
 800828a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800828e:	f080 8107 	bcs.w	80084a0 <__udivmoddi4+0x290>
 8008292:	45a4      	cmp	ip, r4
 8008294:	f240 8104 	bls.w	80084a0 <__udivmoddi4+0x290>
 8008298:	3802      	subs	r0, #2
 800829a:	442c      	add	r4, r5
 800829c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80082a0:	eba4 040c 	sub.w	r4, r4, ip
 80082a4:	2700      	movs	r7, #0
 80082a6:	b11e      	cbz	r6, 80082b0 <__udivmoddi4+0xa0>
 80082a8:	40d4      	lsrs	r4, r2
 80082aa:	2300      	movs	r3, #0
 80082ac:	e9c6 4300 	strd	r4, r3, [r6]
 80082b0:	4639      	mov	r1, r7
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	428b      	cmp	r3, r1
 80082b8:	d909      	bls.n	80082ce <__udivmoddi4+0xbe>
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	f000 80eb 	beq.w	8008496 <__udivmoddi4+0x286>
 80082c0:	2700      	movs	r7, #0
 80082c2:	e9c6 0100 	strd	r0, r1, [r6]
 80082c6:	4638      	mov	r0, r7
 80082c8:	4639      	mov	r1, r7
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	fab3 f783 	clz	r7, r3
 80082d2:	2f00      	cmp	r7, #0
 80082d4:	d147      	bne.n	8008366 <__udivmoddi4+0x156>
 80082d6:	428b      	cmp	r3, r1
 80082d8:	d302      	bcc.n	80082e0 <__udivmoddi4+0xd0>
 80082da:	4282      	cmp	r2, r0
 80082dc:	f200 80fa 	bhi.w	80084d4 <__udivmoddi4+0x2c4>
 80082e0:	1a84      	subs	r4, r0, r2
 80082e2:	eb61 0303 	sbc.w	r3, r1, r3
 80082e6:	2001      	movs	r0, #1
 80082e8:	4698      	mov	r8, r3
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	d0e0      	beq.n	80082b0 <__udivmoddi4+0xa0>
 80082ee:	e9c6 4800 	strd	r4, r8, [r6]
 80082f2:	e7dd      	b.n	80082b0 <__udivmoddi4+0xa0>
 80082f4:	b902      	cbnz	r2, 80082f8 <__udivmoddi4+0xe8>
 80082f6:	deff      	udf	#255	; 0xff
 80082f8:	fab2 f282 	clz	r2, r2
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	f040 808f 	bne.w	8008420 <__udivmoddi4+0x210>
 8008302:	1b49      	subs	r1, r1, r5
 8008304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008308:	fa1f f885 	uxth.w	r8, r5
 800830c:	2701      	movs	r7, #1
 800830e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008312:	0c23      	lsrs	r3, r4, #16
 8008314:	fb0e 111c 	mls	r1, lr, ip, r1
 8008318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800831c:	fb08 f10c 	mul.w	r1, r8, ip
 8008320:	4299      	cmp	r1, r3
 8008322:	d907      	bls.n	8008334 <__udivmoddi4+0x124>
 8008324:	18eb      	adds	r3, r5, r3
 8008326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800832a:	d202      	bcs.n	8008332 <__udivmoddi4+0x122>
 800832c:	4299      	cmp	r1, r3
 800832e:	f200 80cd 	bhi.w	80084cc <__udivmoddi4+0x2bc>
 8008332:	4684      	mov	ip, r0
 8008334:	1a59      	subs	r1, r3, r1
 8008336:	b2a3      	uxth	r3, r4
 8008338:	fbb1 f0fe 	udiv	r0, r1, lr
 800833c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008344:	fb08 f800 	mul.w	r8, r8, r0
 8008348:	45a0      	cmp	r8, r4
 800834a:	d907      	bls.n	800835c <__udivmoddi4+0x14c>
 800834c:	192c      	adds	r4, r5, r4
 800834e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008352:	d202      	bcs.n	800835a <__udivmoddi4+0x14a>
 8008354:	45a0      	cmp	r8, r4
 8008356:	f200 80b6 	bhi.w	80084c6 <__udivmoddi4+0x2b6>
 800835a:	4618      	mov	r0, r3
 800835c:	eba4 0408 	sub.w	r4, r4, r8
 8008360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008364:	e79f      	b.n	80082a6 <__udivmoddi4+0x96>
 8008366:	f1c7 0c20 	rsb	ip, r7, #32
 800836a:	40bb      	lsls	r3, r7
 800836c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008370:	ea4e 0e03 	orr.w	lr, lr, r3
 8008374:	fa01 f407 	lsl.w	r4, r1, r7
 8008378:	fa20 f50c 	lsr.w	r5, r0, ip
 800837c:	fa21 f30c 	lsr.w	r3, r1, ip
 8008380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008384:	4325      	orrs	r5, r4
 8008386:	fbb3 f9f8 	udiv	r9, r3, r8
 800838a:	0c2c      	lsrs	r4, r5, #16
 800838c:	fb08 3319 	mls	r3, r8, r9, r3
 8008390:	fa1f fa8e 	uxth.w	sl, lr
 8008394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008398:	fb09 f40a 	mul.w	r4, r9, sl
 800839c:	429c      	cmp	r4, r3
 800839e:	fa02 f207 	lsl.w	r2, r2, r7
 80083a2:	fa00 f107 	lsl.w	r1, r0, r7
 80083a6:	d90b      	bls.n	80083c0 <__udivmoddi4+0x1b0>
 80083a8:	eb1e 0303 	adds.w	r3, lr, r3
 80083ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80083b0:	f080 8087 	bcs.w	80084c2 <__udivmoddi4+0x2b2>
 80083b4:	429c      	cmp	r4, r3
 80083b6:	f240 8084 	bls.w	80084c2 <__udivmoddi4+0x2b2>
 80083ba:	f1a9 0902 	sub.w	r9, r9, #2
 80083be:	4473      	add	r3, lr
 80083c0:	1b1b      	subs	r3, r3, r4
 80083c2:	b2ad      	uxth	r5, r5
 80083c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80083c8:	fb08 3310 	mls	r3, r8, r0, r3
 80083cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80083d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80083d4:	45a2      	cmp	sl, r4
 80083d6:	d908      	bls.n	80083ea <__udivmoddi4+0x1da>
 80083d8:	eb1e 0404 	adds.w	r4, lr, r4
 80083dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083e0:	d26b      	bcs.n	80084ba <__udivmoddi4+0x2aa>
 80083e2:	45a2      	cmp	sl, r4
 80083e4:	d969      	bls.n	80084ba <__udivmoddi4+0x2aa>
 80083e6:	3802      	subs	r0, #2
 80083e8:	4474      	add	r4, lr
 80083ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80083ee:	fba0 8902 	umull	r8, r9, r0, r2
 80083f2:	eba4 040a 	sub.w	r4, r4, sl
 80083f6:	454c      	cmp	r4, r9
 80083f8:	46c2      	mov	sl, r8
 80083fa:	464b      	mov	r3, r9
 80083fc:	d354      	bcc.n	80084a8 <__udivmoddi4+0x298>
 80083fe:	d051      	beq.n	80084a4 <__udivmoddi4+0x294>
 8008400:	2e00      	cmp	r6, #0
 8008402:	d069      	beq.n	80084d8 <__udivmoddi4+0x2c8>
 8008404:	ebb1 050a 	subs.w	r5, r1, sl
 8008408:	eb64 0403 	sbc.w	r4, r4, r3
 800840c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008410:	40fd      	lsrs	r5, r7
 8008412:	40fc      	lsrs	r4, r7
 8008414:	ea4c 0505 	orr.w	r5, ip, r5
 8008418:	e9c6 5400 	strd	r5, r4, [r6]
 800841c:	2700      	movs	r7, #0
 800841e:	e747      	b.n	80082b0 <__udivmoddi4+0xa0>
 8008420:	f1c2 0320 	rsb	r3, r2, #32
 8008424:	fa20 f703 	lsr.w	r7, r0, r3
 8008428:	4095      	lsls	r5, r2
 800842a:	fa01 f002 	lsl.w	r0, r1, r2
 800842e:	fa21 f303 	lsr.w	r3, r1, r3
 8008432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008436:	4338      	orrs	r0, r7
 8008438:	0c01      	lsrs	r1, r0, #16
 800843a:	fbb3 f7fe 	udiv	r7, r3, lr
 800843e:	fa1f f885 	uxth.w	r8, r5
 8008442:	fb0e 3317 	mls	r3, lr, r7, r3
 8008446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800844a:	fb07 f308 	mul.w	r3, r7, r8
 800844e:	428b      	cmp	r3, r1
 8008450:	fa04 f402 	lsl.w	r4, r4, r2
 8008454:	d907      	bls.n	8008466 <__udivmoddi4+0x256>
 8008456:	1869      	adds	r1, r5, r1
 8008458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800845c:	d22f      	bcs.n	80084be <__udivmoddi4+0x2ae>
 800845e:	428b      	cmp	r3, r1
 8008460:	d92d      	bls.n	80084be <__udivmoddi4+0x2ae>
 8008462:	3f02      	subs	r7, #2
 8008464:	4429      	add	r1, r5
 8008466:	1acb      	subs	r3, r1, r3
 8008468:	b281      	uxth	r1, r0
 800846a:	fbb3 f0fe 	udiv	r0, r3, lr
 800846e:	fb0e 3310 	mls	r3, lr, r0, r3
 8008472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008476:	fb00 f308 	mul.w	r3, r0, r8
 800847a:	428b      	cmp	r3, r1
 800847c:	d907      	bls.n	800848e <__udivmoddi4+0x27e>
 800847e:	1869      	adds	r1, r5, r1
 8008480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008484:	d217      	bcs.n	80084b6 <__udivmoddi4+0x2a6>
 8008486:	428b      	cmp	r3, r1
 8008488:	d915      	bls.n	80084b6 <__udivmoddi4+0x2a6>
 800848a:	3802      	subs	r0, #2
 800848c:	4429      	add	r1, r5
 800848e:	1ac9      	subs	r1, r1, r3
 8008490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008494:	e73b      	b.n	800830e <__udivmoddi4+0xfe>
 8008496:	4637      	mov	r7, r6
 8008498:	4630      	mov	r0, r6
 800849a:	e709      	b.n	80082b0 <__udivmoddi4+0xa0>
 800849c:	4607      	mov	r7, r0
 800849e:	e6e7      	b.n	8008270 <__udivmoddi4+0x60>
 80084a0:	4618      	mov	r0, r3
 80084a2:	e6fb      	b.n	800829c <__udivmoddi4+0x8c>
 80084a4:	4541      	cmp	r1, r8
 80084a6:	d2ab      	bcs.n	8008400 <__udivmoddi4+0x1f0>
 80084a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80084ac:	eb69 020e 	sbc.w	r2, r9, lr
 80084b0:	3801      	subs	r0, #1
 80084b2:	4613      	mov	r3, r2
 80084b4:	e7a4      	b.n	8008400 <__udivmoddi4+0x1f0>
 80084b6:	4660      	mov	r0, ip
 80084b8:	e7e9      	b.n	800848e <__udivmoddi4+0x27e>
 80084ba:	4618      	mov	r0, r3
 80084bc:	e795      	b.n	80083ea <__udivmoddi4+0x1da>
 80084be:	4667      	mov	r7, ip
 80084c0:	e7d1      	b.n	8008466 <__udivmoddi4+0x256>
 80084c2:	4681      	mov	r9, r0
 80084c4:	e77c      	b.n	80083c0 <__udivmoddi4+0x1b0>
 80084c6:	3802      	subs	r0, #2
 80084c8:	442c      	add	r4, r5
 80084ca:	e747      	b.n	800835c <__udivmoddi4+0x14c>
 80084cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80084d0:	442b      	add	r3, r5
 80084d2:	e72f      	b.n	8008334 <__udivmoddi4+0x124>
 80084d4:	4638      	mov	r0, r7
 80084d6:	e708      	b.n	80082ea <__udivmoddi4+0xda>
 80084d8:	4637      	mov	r7, r6
 80084da:	e6e9      	b.n	80082b0 <__udivmoddi4+0xa0>

080084dc <__aeabi_idiv0>:
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop

080084e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80084e4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <__NVIC_SystemReset+0x20>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80084f0:	4903      	ldr	r1, [pc, #12]	; (8008500 <__NVIC_SystemReset+0x20>)
 80084f2:	4b04      	ldr	r3, [pc, #16]	; (8008504 <__NVIC_SystemReset+0x24>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60cb      	str	r3, [r1, #12]
 80084f8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80084fc:	bf00      	nop
 80084fe:	e7fd      	b.n	80084fc <__NVIC_SystemReset+0x1c>
 8008500:	e000ed00 	.word	0xe000ed00
 8008504:	05fa0004 	.word	0x05fa0004

08008508 <JumpToBootloader>:
/**
 * Function to perform jump to system memory boot from user application
 *
 * Call function when you want to jump to system memory
 */
void JumpToBootloader(void) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	 * Step: Set system memory address.
	 *
	 *       For STM32F401C, system memory is on 0x1FFF 0000
	 *       For other families, check AN2606 document
	 */
	volatile uint32_t addr = 0x1FFF0000;
 800850e:	4b08      	ldr	r3, [pc, #32]	; (8008530 <JumpToBootloader+0x28>)
 8008510:	607b      	str	r3, [r7, #4]
	/**
	 * Step: Disable RCC, set it to default (after reset) settings
	 *       Internal clock, no PLL, etc.
	 */
#if defined(USE_HAL_DRIVER)
	HAL_RCC_DeInit();
 8008512:	f001 fe1d 	bl	800a150 <HAL_RCC_DeInit>
#endif /* defined(USE_STDPERIPH_DRIVER) */

	/**
	 * Step: Disable systick timer and reset it to default values
	 */
	SysTick->CTRL = 0;
 8008516:	4b07      	ldr	r3, [pc, #28]	; (8008534 <JumpToBootloader+0x2c>)
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800851c:	4b05      	ldr	r3, [pc, #20]	; (8008534 <JumpToBootloader+0x2c>)
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8008522:	4b04      	ldr	r3, [pc, #16]	; (8008534 <JumpToBootloader+0x2c>)
 8008524:	2200      	movs	r2, #0
 8008526:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8008528:	b672      	cpsid	i
	 *       For STM32F4xx, MEMRMP register in SYSCFG is used (bits[1:0])
	 *       For STM32F0xx, CFGR1 register in SYSCFG is used (bits[1:0])
	 *       For others, check family reference manual
	 */
	//Remap by hand... {
	  NVIC_SystemReset();
 800852a:	f7ff ffd9 	bl	80084e0 <__NVIC_SystemReset>
 800852e:	bf00      	nop
 8008530:	1fff0000 	.word	0x1fff0000
 8008534:	e000e010 	.word	0xe000e010

08008538 <VectorBase_Config>:

#define TRIGGER_PIN (10)


static void VectorBase_Config(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 800853c:	4b03      	ldr	r3, [pc, #12]	; (800854c <VectorBase_Config+0x14>)
 800853e:	4a04      	ldr	r2, [pc, #16]	; (8008550 <VectorBase_Config+0x18>)
 8008540:	609a      	str	r2, [r3, #8]
}
 8008542:	bf00      	nop
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	e000ed00 	.word	0xe000ed00
 8008550:	08008000 	.word	0x08008000

08008554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
	VectorBase_Config();
 800855a:	f7ff ffed 	bl	8008538 <VectorBase_Config>

  /* USER CODE BEGIN 1 */
	//look at the AUX pin.  If low for a certain number of samples, then enter boot loader mode.
	// Enable the GPIOA peripheral in 'RCC_AHBENR'.
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800855e:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <main+0xc4>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	4a2d      	ldr	r2, [pc, #180]	; (8008618 <main+0xc4>)
 8008564:	f043 0301 	orr.w	r3, r3, #1
 8008568:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->PUPDR  |=  (0x1 << (TRIGGER_PIN*2));
 800856a:	4b2c      	ldr	r3, [pc, #176]	; (800861c <main+0xc8>)
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	4a2b      	ldr	r2, [pc, #172]	; (800861c <main+0xc8>)
 8008570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008574:	60d3      	str	r3, [r2, #12]
	  long int bootCount = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
	  unsigned char bootTrigger = true;
 800857a:	2301      	movs	r3, #1
 800857c:	72fb      	strb	r3, [r7, #11]
	  for(bootCount = 0; bootCount < 100000; bootCount++){
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e00c      	b.n	800859e <main+0x4a>
		  uint32_t idr_val = GPIOA->IDR;
 8008584:	4b25      	ldr	r3, [pc, #148]	; (800861c <main+0xc8>)
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	607b      	str	r3, [r7, #4]
		  if (idr_val & (1 << TRIGGER_PIN)) {
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <main+0x44>
			  bootTrigger = false;
 8008594:	2300      	movs	r3, #0
 8008596:	72fb      	strb	r3, [r7, #11]
	  for(bootCount = 0; bootCount < 100000; bootCount++){
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4a1f      	ldr	r2, [pc, #124]	; (8008620 <main+0xcc>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	ddee      	ble.n	8008584 <main+0x30>
		  }
	  }
	  if(bootTrigger){
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <main+0x5c>
		  JumpToBootloader();
 80085ac:	f7ff ffac 	bl	8008508 <JumpToBootloader>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085b0:	f000 fe40 	bl	8009234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085b4:	f000 f84e 	bl	8008654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085b8:	f000 f960 	bl	800887c <MX_GPIO_Init>
  MX_SPI2_Init();
 80085bc:	f000 f8b2 	bl	8008724 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80085c0:	f000 f932 	bl	8008828 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80085c4:	f000 f8e4 	bl	8008790 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80085c8:	f003 fd46 	bl	800c058 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of streamTimer */
  streamTimerHandle = osTimerNew(streamTimerCallback, osTimerPeriodic, NULL, &streamTimer_attributes);
 80085cc:	4b15      	ldr	r3, [pc, #84]	; (8008624 <main+0xd0>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	2101      	movs	r1, #1
 80085d2:	4815      	ldr	r0, [pc, #84]	; (8008628 <main+0xd4>)
 80085d4:	f003 fe94 	bl	800c300 <osTimerNew>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b14      	ldr	r3, [pc, #80]	; (800862c <main+0xd8>)
 80085dc:	601a      	str	r2, [r3, #0]

  /* creation of utilTimer */
  utilTimerHandle = osTimerNew(utilTimerCallback, osTimerPeriodic, NULL, &utilTimer_attributes);
 80085de:	4b14      	ldr	r3, [pc, #80]	; (8008630 <main+0xdc>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	2101      	movs	r1, #1
 80085e4:	4813      	ldr	r0, [pc, #76]	; (8008634 <main+0xe0>)
 80085e6:	f003 fe8b 	bl	800c300 <osTimerNew>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b12      	ldr	r3, [pc, #72]	; (8008638 <main+0xe4>)
 80085ee:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80085f0:	4a12      	ldr	r2, [pc, #72]	; (800863c <main+0xe8>)
 80085f2:	2100      	movs	r1, #0
 80085f4:	4812      	ldr	r0, [pc, #72]	; (8008640 <main+0xec>)
 80085f6:	f003 fd99 	bl	800c12c <osThreadNew>
 80085fa:	4602      	mov	r2, r0
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <main+0xf0>)
 80085fe:	601a      	str	r2, [r3, #0]

  /* creation of imuDataTask */
  imuDataTaskHandle = osThreadNew(startImuDataTask, NULL, &imuDataTask_attributes);
 8008600:	4a11      	ldr	r2, [pc, #68]	; (8008648 <main+0xf4>)
 8008602:	2100      	movs	r1, #0
 8008604:	4811      	ldr	r0, [pc, #68]	; (800864c <main+0xf8>)
 8008606:	f003 fd91 	bl	800c12c <osThreadNew>
 800860a:	4602      	mov	r2, r0
 800860c:	4b10      	ldr	r3, [pc, #64]	; (8008650 <main+0xfc>)
 800860e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008610:	f003 fd56 	bl	800c0c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008614:	e7fe      	b.n	8008614 <main+0xc0>
 8008616:	bf00      	nop
 8008618:	40023800 	.word	0x40023800
 800861c:	40020000 	.word	0x40020000
 8008620:	0001869f 	.word	0x0001869f
 8008624:	0801147c 	.word	0x0801147c
 8008628:	08008de1 	.word	0x08008de1
 800862c:	20004b4c 	.word	0x20004b4c
 8008630:	0801148c 	.word	0x0801148c
 8008634:	08008df5 	.word	0x08008df5
 8008638:	20004a44 	.word	0x20004a44
 800863c:	08011434 	.word	0x08011434
 8008640:	08008ac9 	.word	0x08008ac9
 8008644:	20004940 	.word	0x20004940
 8008648:	08011458 	.word	0x08011458
 800864c:	08008afd 	.word	0x08008afd
 8008650:	20004a38 	.word	0x20004a38

08008654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b094      	sub	sp, #80	; 0x50
 8008658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800865a:	f107 0320 	add.w	r3, r7, #32
 800865e:	2230      	movs	r2, #48	; 0x30
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f008 fe7b 	bl	801135e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	609a      	str	r2, [r3, #8]
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008678:	2300      	movs	r3, #0
 800867a:	60bb      	str	r3, [r7, #8]
 800867c:	4b27      	ldr	r3, [pc, #156]	; (800871c <SystemClock_Config+0xc8>)
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	4a26      	ldr	r2, [pc, #152]	; (800871c <SystemClock_Config+0xc8>)
 8008682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008686:	6413      	str	r3, [r2, #64]	; 0x40
 8008688:	4b24      	ldr	r3, [pc, #144]	; (800871c <SystemClock_Config+0xc8>)
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008690:	60bb      	str	r3, [r7, #8]
 8008692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008694:	2300      	movs	r3, #0
 8008696:	607b      	str	r3, [r7, #4]
 8008698:	4b21      	ldr	r3, [pc, #132]	; (8008720 <SystemClock_Config+0xcc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a20      	ldr	r2, [pc, #128]	; (8008720 <SystemClock_Config+0xcc>)
 800869e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	4b1e      	ldr	r3, [pc, #120]	; (8008720 <SystemClock_Config+0xcc>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086ac:	607b      	str	r3, [r7, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80086b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086ba:	2302      	movs	r3, #2
 80086bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80086be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80086c4:	2308      	movs	r3, #8
 80086c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80086c8:	2354      	movs	r3, #84	; 0x54
 80086ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80086cc:	2302      	movs	r3, #2
 80086ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80086d0:	2304      	movs	r3, #4
 80086d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086d4:	f107 0320 	add.w	r3, r7, #32
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 f8a7 	bl	800982c <HAL_RCC_OscConfig>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80086e4:	f000 fbd6 	bl	8008e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086e8:	230f      	movs	r3, #15
 80086ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80086ec:	2302      	movs	r3, #2
 80086ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80086f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80086fe:	f107 030c 	add.w	r3, r7, #12
 8008702:	2102      	movs	r1, #2
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fb01 	bl	8009d0c <HAL_RCC_ClockConfig>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8008710:	f000 fbc0 	bl	8008e94 <Error_Handler>
  }
}
 8008714:	bf00      	nop
 8008716:	3750      	adds	r7, #80	; 0x50
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	40023800 	.word	0x40023800
 8008720:	40007000 	.word	0x40007000

08008724 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008728:	4b17      	ldr	r3, [pc, #92]	; (8008788 <MX_SPI2_Init+0x64>)
 800872a:	4a18      	ldr	r2, [pc, #96]	; (800878c <MX_SPI2_Init+0x68>)
 800872c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800872e:	4b16      	ldr	r3, [pc, #88]	; (8008788 <MX_SPI2_Init+0x64>)
 8008730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008734:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <MX_SPI2_Init+0x64>)
 8008738:	2200      	movs	r2, #0
 800873a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800873c:	4b12      	ldr	r3, [pc, #72]	; (8008788 <MX_SPI2_Init+0x64>)
 800873e:	2200      	movs	r2, #0
 8008740:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008742:	4b11      	ldr	r3, [pc, #68]	; (8008788 <MX_SPI2_Init+0x64>)
 8008744:	2202      	movs	r2, #2
 8008746:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008748:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <MX_SPI2_Init+0x64>)
 800874a:	2201      	movs	r2, #1
 800874c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800874e:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <MX_SPI2_Init+0x64>)
 8008750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008754:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <MX_SPI2_Init+0x64>)
 8008758:	2220      	movs	r2, #32
 800875a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800875c:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <MX_SPI2_Init+0x64>)
 800875e:	2200      	movs	r2, #0
 8008760:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008762:	4b09      	ldr	r3, [pc, #36]	; (8008788 <MX_SPI2_Init+0x64>)
 8008764:	2200      	movs	r2, #0
 8008766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008768:	4b07      	ldr	r3, [pc, #28]	; (8008788 <MX_SPI2_Init+0x64>)
 800876a:	2200      	movs	r2, #0
 800876c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <MX_SPI2_Init+0x64>)
 8008770:	220a      	movs	r2, #10
 8008772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008774:	4804      	ldr	r0, [pc, #16]	; (8008788 <MX_SPI2_Init+0x64>)
 8008776:	f001 fdb9 	bl	800a2ec <HAL_SPI_Init>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008780:	f000 fb88 	bl	8008e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008784:	bf00      	nop
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20004944 	.word	0x20004944
 800878c:	40003800 	.word	0x40003800

08008790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	605a      	str	r2, [r3, #4]
 80087a0:	609a      	str	r2, [r3, #8]
 80087a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087a4:	463b      	mov	r3, r7
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80087ac:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <MX_TIM2_Init+0x94>)
 80087ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80087b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 80087b4:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <MX_TIM2_Init+0x94>)
 80087b6:	2254      	movs	r2, #84	; 0x54
 80087b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087ba:	4b1a      	ldr	r3, [pc, #104]	; (8008824 <MX_TIM2_Init+0x94>)
 80087bc:	2200      	movs	r2, #0
 80087be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <MX_TIM2_Init+0x94>)
 80087c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80087c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087c8:	4b16      	ldr	r3, [pc, #88]	; (8008824 <MX_TIM2_Init+0x94>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80087ce:	4b15      	ldr	r3, [pc, #84]	; (8008824 <MX_TIM2_Init+0x94>)
 80087d0:	2280      	movs	r2, #128	; 0x80
 80087d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80087d4:	4813      	ldr	r0, [pc, #76]	; (8008824 <MX_TIM2_Init+0x94>)
 80087d6:	f002 f98b 	bl	800aaf0 <HAL_TIM_Base_Init>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80087e0:	f000 fb58 	bl	8008e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80087ea:	f107 0308 	add.w	r3, r7, #8
 80087ee:	4619      	mov	r1, r3
 80087f0:	480c      	ldr	r0, [pc, #48]	; (8008824 <MX_TIM2_Init+0x94>)
 80087f2:	f002 faff 	bl	800adf4 <HAL_TIM_ConfigClockSource>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80087fc:	f000 fb4a 	bl	8008e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008800:	2300      	movs	r3, #0
 8008802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008804:	2300      	movs	r3, #0
 8008806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008808:	463b      	mov	r3, r7
 800880a:	4619      	mov	r1, r3
 800880c:	4805      	ldr	r0, [pc, #20]	; (8008824 <MX_TIM2_Init+0x94>)
 800880e:	f002 fceb 	bl	800b1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008818:	f000 fb3c 	bl	8008e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800881c:	bf00      	nop
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20004b50 	.word	0x20004b50

08008828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800882c:	4b11      	ldr	r3, [pc, #68]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 800882e:	4a12      	ldr	r2, [pc, #72]	; (8008878 <MX_USART2_UART_Init+0x50>)
 8008830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8008832:	4b10      	ldr	r3, [pc, #64]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 8008834:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8008838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800883a:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 800883c:	2200      	movs	r2, #0
 800883e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008840:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 8008842:	2200      	movs	r2, #0
 8008844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 8008848:	2200      	movs	r2, #0
 800884a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 800884e:	220c      	movs	r2, #12
 8008850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 8008854:	2200      	movs	r2, #0
 8008856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8008858:	4b06      	ldr	r3, [pc, #24]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 800885a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800885e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008860:	4804      	ldr	r0, [pc, #16]	; (8008874 <MX_USART2_UART_Init+0x4c>)
 8008862:	f002 fd43 	bl	800b2ec <HAL_UART_Init>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800886c:	f000 fb12 	bl	8008e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20004bb0 	.word	0x20004bb0
 8008878:	40004400 	.word	0x40004400

0800887c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008882:	f107 030c 	add.w	r3, r7, #12
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	605a      	str	r2, [r3, #4]
 800888c:	609a      	str	r2, [r3, #8]
 800888e:	60da      	str	r2, [r3, #12]
 8008890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	4b33      	ldr	r3, [pc, #204]	; (8008964 <MX_GPIO_Init+0xe8>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	4a32      	ldr	r2, [pc, #200]	; (8008964 <MX_GPIO_Init+0xe8>)
 800889c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a0:	6313      	str	r3, [r2, #48]	; 0x30
 80088a2:	4b30      	ldr	r3, [pc, #192]	; (8008964 <MX_GPIO_Init+0xe8>)
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088aa:	60bb      	str	r3, [r7, #8]
 80088ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ae:	2300      	movs	r3, #0
 80088b0:	607b      	str	r3, [r7, #4]
 80088b2:	4b2c      	ldr	r3, [pc, #176]	; (8008964 <MX_GPIO_Init+0xe8>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	4a2b      	ldr	r2, [pc, #172]	; (8008964 <MX_GPIO_Init+0xe8>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6313      	str	r3, [r2, #48]	; 0x30
 80088be:	4b29      	ldr	r3, [pc, #164]	; (8008964 <MX_GPIO_Init+0xe8>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	4b25      	ldr	r3, [pc, #148]	; (8008964 <MX_GPIO_Init+0xe8>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	4a24      	ldr	r2, [pc, #144]	; (8008964 <MX_GPIO_Init+0xe8>)
 80088d4:	f043 0302 	orr.w	r3, r3, #2
 80088d8:	6313      	str	r3, [r2, #48]	; 0x30
 80088da:	4b22      	ldr	r3, [pc, #136]	; (8008964 <MX_GPIO_Init+0xe8>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80088e6:	2200      	movs	r2, #0
 80088e8:	2142      	movs	r1, #66	; 0x42
 80088ea:	481f      	ldr	r0, [pc, #124]	; (8008968 <MX_GPIO_Init+0xec>)
 80088ec:	f000 ff6a 	bl	80097c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80088f0:	2201      	movs	r2, #1
 80088f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088f6:	481d      	ldr	r0, [pc, #116]	; (800896c <MX_GPIO_Init+0xf0>)
 80088f8:	f000 ff64 	bl	80097c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80088fc:	2200      	movs	r2, #0
 80088fe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8008902:	481a      	ldr	r0, [pc, #104]	; (800896c <MX_GPIO_Init+0xf0>)
 8008904:	f000 ff5e 	bl	80097c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8008908:	2342      	movs	r3, #66	; 0x42
 800890a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800890c:	2301      	movs	r3, #1
 800890e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008914:	2300      	movs	r3, #0
 8008916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008918:	f107 030c 	add.w	r3, r7, #12
 800891c:	4619      	mov	r1, r3
 800891e:	4812      	ldr	r0, [pc, #72]	; (8008968 <MX_GPIO_Init+0xec>)
 8008920:	f000 fdce 	bl	80094c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8008924:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8008928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800892a:	2301      	movs	r3, #1
 800892c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892e:	2300      	movs	r3, #0
 8008930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	4619      	mov	r1, r3
 800893c:	480b      	ldr	r0, [pc, #44]	; (800896c <MX_GPIO_Init+0xf0>)
 800893e:	f000 fdbf 	bl	80094c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_TRIG_Pin */
  GPIO_InitStruct.Pin = BOOT_TRIG_Pin;
 8008942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008948:	2300      	movs	r3, #0
 800894a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8008950:	f107 030c 	add.w	r3, r7, #12
 8008954:	4619      	mov	r1, r3
 8008956:	4804      	ldr	r0, [pc, #16]	; (8008968 <MX_GPIO_Init+0xec>)
 8008958:	f000 fdb2 	bl	80094c0 <HAL_GPIO_Init>

}
 800895c:	bf00      	nop
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40023800 	.word	0x40023800
 8008968:	40020000 	.word	0x40020000
 800896c:	40020400 	.word	0x40020400

08008970 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	//Reset CS
	spiBusy = false;
 8008978:	4b48      	ldr	r3, [pc, #288]	; (8008a9c <HAL_SPI_TxRxCpltCallback+0x12c>)
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//CS back high
 800897e:	2201      	movs	r2, #1
 8008980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008984:	4846      	ldr	r0, [pc, #280]	; (8008aa0 <HAL_SPI_TxRxCpltCallback+0x130>)
 8008986:	f000 ff1d 	bl	80097c4 <HAL_GPIO_WritePin>
	if(bytesToRead > 0){
 800898a:	4b46      	ldr	r3, [pc, #280]	; (8008aa4 <HAL_SPI_TxRxCpltCallback+0x134>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd37      	ble.n	8008a02 <HAL_SPI_TxRxCpltCallback+0x92>
		bytesToRead -= 2;
 8008992:	4b44      	ldr	r3, [pc, #272]	; (8008aa4 <HAL_SPI_TxRxCpltCallback+0x134>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3b02      	subs	r3, #2
 8008998:	4a42      	ldr	r2, [pc, #264]	; (8008aa4 <HAL_SPI_TxRxCpltCallback+0x134>)
 800899a:	6013      	str	r3, [r2, #0]
		if(bytesToRead == 0){
 800899c:	4b41      	ldr	r3, [pc, #260]	; (8008aa4 <HAL_SPI_TxRxCpltCallback+0x134>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d114      	bne.n	80089ce <HAL_SPI_TxRxCpltCallback+0x5e>
			sixPacketReady = true;	//this is the last pair of bytes to read.  Time to send it out from uart.
 80089a4:	4b40      	ldr	r3, [pc, #256]	; (8008aa8 <HAL_SPI_TxRxCpltCallback+0x138>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	701a      	strb	r2, [r3, #0]
			if(packetsStreamed < 256){
 80089aa:	4b40      	ldr	r3, [pc, #256]	; (8008aac <HAL_SPI_TxRxCpltCallback+0x13c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2bff      	cmp	r3, #255	; 0xff
 80089b0:	dc05      	bgt.n	80089be <HAL_SPI_TxRxCpltCallback+0x4e>
				packetsStreamed++;
 80089b2:	4b3e      	ldr	r3, [pc, #248]	; (8008aac <HAL_SPI_TxRxCpltCallback+0x13c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3301      	adds	r3, #1
 80089b8:	4a3c      	ldr	r2, [pc, #240]	; (8008aac <HAL_SPI_TxRxCpltCallback+0x13c>)
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	e007      	b.n	80089ce <HAL_SPI_TxRxCpltCallback+0x5e>
			}
			else{
				packetsStreamed = 0;
 80089be:	4b3b      	ldr	r3, [pc, #236]	; (8008aac <HAL_SPI_TxRxCpltCallback+0x13c>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);	//every 256 packets we toggle the LED
 80089c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089c8:	4835      	ldr	r0, [pc, #212]	; (8008aa0 <HAL_SPI_TxRxCpltCallback+0x130>)
 80089ca:	f000 ff14 	bl	80097f6 <HAL_GPIO_TogglePin>
			}
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);	//set CS low.  It will be reset in the callback for TX complete.
 80089ce:	2200      	movs	r2, #0
 80089d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089d4:	4832      	ldr	r0, [pc, #200]	; (8008aa0 <HAL_SPI_TxRxCpltCallback+0x130>)
 80089d6:	f000 fef5 	bl	80097c4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_IT(&hspi2, spiTxBuffer + 24 - bytesToRead, spiRxBuffer + 24 - bytesToRead, 2);
 80089da:	4b32      	ldr	r3, [pc, #200]	; (8008aa4 <HAL_SPI_TxRxCpltCallback+0x134>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f1c3 0318 	rsb	r3, r3, #24
 80089e2:	4a33      	ldr	r2, [pc, #204]	; (8008ab0 <HAL_SPI_TxRxCpltCallback+0x140>)
 80089e4:	1899      	adds	r1, r3, r2
 80089e6:	4b2f      	ldr	r3, [pc, #188]	; (8008aa4 <HAL_SPI_TxRxCpltCallback+0x134>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1c3 0318 	rsb	r3, r3, #24
 80089ee:	4a31      	ldr	r2, [pc, #196]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 80089f0:	441a      	add	r2, r3
 80089f2:	2302      	movs	r3, #2
 80089f4:	4830      	ldr	r0, [pc, #192]	; (8008ab8 <HAL_SPI_TxRxCpltCallback+0x148>)
 80089f6:	f001 fcdd 	bl	800a3b4 <HAL_SPI_TransmitReceive_IT>
		spiBusy = true;
 80089fa:	4b28      	ldr	r3, [pc, #160]	; (8008a9c <HAL_SPI_TxRxCpltCallback+0x12c>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, uartData,  14);
			sixPacketReady = false;
		}

	}
}
 8008a00:	e047      	b.n	8008a92 <HAL_SPI_TxRxCpltCallback+0x122>
		if(sixPacketReady){
 8008a02:	4b29      	ldr	r3, [pc, #164]	; (8008aa8 <HAL_SPI_TxRxCpltCallback+0x138>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d042      	beq.n	8008a92 <HAL_SPI_TxRxCpltCallback+0x122>
			uartData[0] = spiRxBuffer[1];
 8008a0c:	4b29      	ldr	r3, [pc, #164]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a0e:	785a      	ldrb	r2, [r3, #1]
 8008a10:	4b2a      	ldr	r3, [pc, #168]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a12:	701a      	strb	r2, [r3, #0]
			uartData[1] = spiRxBuffer[3];
 8008a14:	4b27      	ldr	r3, [pc, #156]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a16:	78da      	ldrb	r2, [r3, #3]
 8008a18:	4b28      	ldr	r3, [pc, #160]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a1a:	705a      	strb	r2, [r3, #1]
			uartData[2] = spiRxBuffer[5];
 8008a1c:	4b25      	ldr	r3, [pc, #148]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a1e:	795a      	ldrb	r2, [r3, #5]
 8008a20:	4b26      	ldr	r3, [pc, #152]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a22:	709a      	strb	r2, [r3, #2]
			uartData[3] = spiRxBuffer[7];
 8008a24:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a26:	79da      	ldrb	r2, [r3, #7]
 8008a28:	4b24      	ldr	r3, [pc, #144]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a2a:	70da      	strb	r2, [r3, #3]
			uartData[4] = spiRxBuffer[9];
 8008a2c:	4b21      	ldr	r3, [pc, #132]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a2e:	7a5a      	ldrb	r2, [r3, #9]
 8008a30:	4b22      	ldr	r3, [pc, #136]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a32:	711a      	strb	r2, [r3, #4]
			uartData[5] = spiRxBuffer[11];
 8008a34:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a36:	7ada      	ldrb	r2, [r3, #11]
 8008a38:	4b20      	ldr	r3, [pc, #128]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a3a:	715a      	strb	r2, [r3, #5]
			uartData[6] = spiRxBuffer[13];
 8008a3c:	4b1d      	ldr	r3, [pc, #116]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a3e:	7b5a      	ldrb	r2, [r3, #13]
 8008a40:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a42:	719a      	strb	r2, [r3, #6]
			uartData[7] = spiRxBuffer[15];
 8008a44:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a46:	7bda      	ldrb	r2, [r3, #15]
 8008a48:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a4a:	71da      	strb	r2, [r3, #7]
			uartData[8] = spiRxBuffer[17];
 8008a4c:	4b19      	ldr	r3, [pc, #100]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a4e:	7c5a      	ldrb	r2, [r3, #17]
 8008a50:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a52:	721a      	strb	r2, [r3, #8]
			uartData[9] = spiRxBuffer[19];
 8008a54:	4b17      	ldr	r3, [pc, #92]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a56:	7cda      	ldrb	r2, [r3, #19]
 8008a58:	4b18      	ldr	r3, [pc, #96]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a5a:	725a      	strb	r2, [r3, #9]
			uartData[10] = spiRxBuffer[21];
 8008a5c:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a5e:	7d5a      	ldrb	r2, [r3, #21]
 8008a60:	4b16      	ldr	r3, [pc, #88]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a62:	729a      	strb	r2, [r3, #10]
			uartData[11] = spiRxBuffer[23];
 8008a64:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <HAL_SPI_TxRxCpltCallback+0x144>)
 8008a66:	7dda      	ldrb	r2, [r3, #23]
 8008a68:	4b14      	ldr	r3, [pc, #80]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a6a:	72da      	strb	r2, [r3, #11]
			uartData[12] = 0x55;
 8008a6c:	4b13      	ldr	r3, [pc, #76]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a6e:	2255      	movs	r2, #85	; 0x55
 8008a70:	731a      	strb	r2, [r3, #12]
			uartData[13] = 0xAA;
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a74:	22aa      	movs	r2, #170	; 0xaa
 8008a76:	735a      	strb	r2, [r3, #13]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8008a78:	2201      	movs	r2, #1
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	4810      	ldr	r0, [pc, #64]	; (8008ac0 <HAL_SPI_TxRxCpltCallback+0x150>)
 8008a7e:	f000 fea1 	bl	80097c4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart2, uartData,  14);
 8008a82:	220e      	movs	r2, #14
 8008a84:	490d      	ldr	r1, [pc, #52]	; (8008abc <HAL_SPI_TxRxCpltCallback+0x14c>)
 8008a86:	480f      	ldr	r0, [pc, #60]	; (8008ac4 <HAL_SPI_TxRxCpltCallback+0x154>)
 8008a88:	f002 fc7d 	bl	800b386 <HAL_UART_Transmit_IT>
			sixPacketReady = false;
 8008a8c:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <HAL_SPI_TxRxCpltCallback+0x138>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
}
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	2000002c 	.word	0x2000002c
 8008aa0:	40020400 	.word	0x40020400
 8008aa4:	20004a48 	.word	0x20004a48
 8008aa8:	2000002d 	.word	0x2000002d
 8008aac:	20000030 	.word	0x20000030
 8008ab0:	20004b90 	.word	0x20004b90
 8008ab4:	20004bf0 	.word	0x20004bf0
 8008ab8:	20004944 	.word	0x20004944
 8008abc:	2000499c 	.word	0x2000499c
 8008ac0:	40020000 	.word	0x40020000
 8008ac4:	20004bb0 	.word	0x20004bb0

08008ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10	, GPIO_PIN_SET);	//CS back high
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ad6:	4807      	ldr	r0, [pc, #28]	; (8008af4 <StartDefaultTask+0x2c>)
 8008ad8:	f000 fe74 	bl	80097c4 <HAL_GPIO_WritePin>
	osTimerStart(utilTimerHandle, pdMS_TO_TICKS(1000));
 8008adc:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <StartDefaultTask+0x30>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f003 fc8f 	bl	800c408 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008aea:	2001      	movs	r0, #1
 8008aec:	f003 fbc4 	bl	800c278 <osDelay>
 8008af0:	e7fb      	b.n	8008aea <StartDefaultTask+0x22>
 8008af2:	bf00      	nop
 8008af4:	40020000 	.word	0x40020000
 8008af8:	20004a44 	.word	0x20004a44

08008afc <startImuDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startImuDataTask */
void startImuDataTask(void *argument)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startImuDataTask */
	HAL_StatusTypeDef halStatus;
	IMU_STATES state = IMU_STATE_INIT;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
	IMU_STATES nextState = IMU_STATE_IDLE;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73bb      	strb	r3, [r7, #14]

  /* Infinite loop */
	for(;;){
		switch(state){
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2b06      	cmp	r3, #6
 8008b10:	f200 814b 	bhi.w	8008daa <startImuDataTask+0x2ae>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <startImuDataTask+0x20>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	08008b93 	.word	0x08008b93
 8008b24:	08008ca9 	.word	0x08008ca9
 8008b28:	08008cbd 	.word	0x08008cbd
 8008b2c:	08008cff 	.word	0x08008cff
 8008b30:	08008d35 	.word	0x08008d35
 8008b34:	08008d75 	.word	0x08008d75
		case IMU_STATE_INIT:
			memset(ModbusData,0,sizeof(ModbusData));
 8008b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	489e      	ldr	r0, [pc, #632]	; (8008db8 <startImuDataTask+0x2bc>)
 8008b40:	f008 fc0d 	bl	801135e <memset>
			ModbusH.uiModbusType = SLAVE_RTU;
 8008b44:	4b9d      	ldr	r3, [pc, #628]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b46:	2203      	movs	r2, #3
 8008b48:	701a      	strb	r2, [r3, #0]
			ModbusH.port =  &huart2;
 8008b4a:	4b9c      	ldr	r3, [pc, #624]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b4c:	4a9c      	ldr	r2, [pc, #624]	; (8008dc0 <startImuDataTask+0x2c4>)
 8008b4e:	605a      	str	r2, [r3, #4]
			ModbusH.u8id = 1; //slave ID
 8008b50:	4b9a      	ldr	r3, [pc, #616]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	721a      	strb	r2, [r3, #8]
			ModbusH.u16timeOut = 1000;
 8008b56:	4b99      	ldr	r3, [pc, #612]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
			//ModbusH.EN_Port = NULL; // No RS485
			ModbusH.EN_Port = GPIOA; // RS485 Enable
 8008b60:	4b96      	ldr	r3, [pc, #600]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b62:	4a98      	ldr	r2, [pc, #608]	; (8008dc4 <startImuDataTask+0x2c8>)
 8008b64:	60da      	str	r2, [r3, #12]
			ModbusH.EN_Pin = GPIO_PIN_1; // RS485 Enable
 8008b66:	4b95      	ldr	r3, [pc, #596]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b68:	2202      	movs	r2, #2
 8008b6a:	821a      	strh	r2, [r3, #16]
			ModbusH.u32overTime = 0;
 8008b6c:	4b93      	ldr	r3, [pc, #588]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	66da      	str	r2, [r3, #108]	; 0x6c
			ModbusH.au16regs = ModbusData;
 8008b72:	4b92      	ldr	r3, [pc, #584]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b74:	4a90      	ldr	r2, [pc, #576]	; (8008db8 <startImuDataTask+0x2bc>)
 8008b76:	659a      	str	r2, [r3, #88]	; 0x58
			ModbusH.u8regsize= sizeof(ModbusData)/sizeof(ModbusData[0]);
 8008b78:	4b90      	ldr	r3, [pc, #576]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b7a:	2280      	movs	r2, #128	; 0x80
 8008b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
			 //Initialize Modbus library
			ModbusInit(&ModbusH);
 8008b80:	488e      	ldr	r0, [pc, #568]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b82:	f007 f933 	bl	800fdec <ModbusInit>
			//Start capturing traffic on serial Port
			ModbusStart(&ModbusH);
 8008b86:	488d      	ldr	r0, [pc, #564]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b88:	f007 f9ba 	bl	800ff00 <ModbusStart>
			state = IMU_STATE_IDLE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
			break;
 8008b90:	e10e      	b.n	8008db0 <startImuDataTask+0x2b4>

		case IMU_STATE_IDLE:
			osSemaphoreAcquire(ModbusH.ModBusSphrHandle , portMAX_DELAY);
 8008b92:	4b8a      	ldr	r3, [pc, #552]	; (8008dbc <startImuDataTask+0x2c0>)
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f003 fd11 	bl	800c5c4 <osSemaphoreAcquire>
			if (ModbusData[1] != 0){
 8008ba2:	4b85      	ldr	r3, [pc, #532]	; (8008db8 <startImuDataTask+0x2bc>)
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <startImuDataTask+0xb4>
				//this is a request to read a register
				state = IMU_STATE_READ_REG;
 8008baa:	2303      	movs	r3, #3
 8008bac:	73fb      	strb	r3, [r7, #15]
 8008bae:	e074      	b.n	8008c9a <startImuDataTask+0x19e>
			}
			else if(ModbusData[2] > 0){
 8008bb0:	4b81      	ldr	r3, [pc, #516]	; (8008db8 <startImuDataTask+0x2bc>)
 8008bb2:	889b      	ldrh	r3, [r3, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <startImuDataTask+0xc2>
				//this is a request to write a register
				state = IMU_STATE_WRITE_REG;
 8008bb8:	2305      	movs	r3, #5
 8008bba:	73fb      	strb	r3, [r7, #15]
 8008bbc:	e06d      	b.n	8008c9a <startImuDataTask+0x19e>

			}
			else if(ModbusData[10] == 0x69){
 8008bbe:	4b7e      	ldr	r3, [pc, #504]	; (8008db8 <startImuDataTask+0x2bc>)
 8008bc0:	8a9b      	ldrh	r3, [r3, #20]
 8008bc2:	2b69      	cmp	r3, #105	; 0x69
 8008bc4:	d14e      	bne.n	8008c64 <startImuDataTask+0x168>
				ModbusData[10] = 0;
 8008bc6:	4b7c      	ldr	r3, [pc, #496]	; (8008db8 <startImuDataTask+0x2bc>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	829a      	strh	r2, [r3, #20]
				spiTxBuffer[0] = 0x80 | 0x22;	//OUTX_L_G
 8008bcc:	4b7e      	ldr	r3, [pc, #504]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008bce:	22a2      	movs	r2, #162	; 0xa2
 8008bd0:	701a      	strb	r2, [r3, #0]
				spiTxBuffer[1] = 0x0;
 8008bd2:	4b7d      	ldr	r3, [pc, #500]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	705a      	strb	r2, [r3, #1]
				spiTxBuffer[2] = 0x80 | 0x23;	//OUTX_H_G
 8008bd8:	4b7b      	ldr	r3, [pc, #492]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008bda:	22a3      	movs	r2, #163	; 0xa3
 8008bdc:	709a      	strb	r2, [r3, #2]
				spiTxBuffer[3] = 0x0;
 8008bde:	4b7a      	ldr	r3, [pc, #488]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	70da      	strb	r2, [r3, #3]
				spiTxBuffer[4] = 0x80 | 0x24;	//OUTY_L_G
 8008be4:	4b78      	ldr	r3, [pc, #480]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008be6:	22a4      	movs	r2, #164	; 0xa4
 8008be8:	711a      	strb	r2, [r3, #4]
				spiTxBuffer[5] = 0x0;
 8008bea:	4b77      	ldr	r3, [pc, #476]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	715a      	strb	r2, [r3, #5]
				spiTxBuffer[6] = 0x80 | 0x25;	//OUTY_H_G
 8008bf0:	4b75      	ldr	r3, [pc, #468]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008bf2:	22a5      	movs	r2, #165	; 0xa5
 8008bf4:	719a      	strb	r2, [r3, #6]
				spiTxBuffer[7] = 0x0;
 8008bf6:	4b74      	ldr	r3, [pc, #464]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	71da      	strb	r2, [r3, #7]
				spiTxBuffer[8] = 0x80 | 0x26;	//OUTZ_L_G
 8008bfc:	4b72      	ldr	r3, [pc, #456]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008bfe:	22a6      	movs	r2, #166	; 0xa6
 8008c00:	721a      	strb	r2, [r3, #8]
				spiTxBuffer[9] = 0x0;
 8008c02:	4b71      	ldr	r3, [pc, #452]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	725a      	strb	r2, [r3, #9]
				spiTxBuffer[10] = 0x80 | 0x27;	//OUTZ_H_G
 8008c08:	4b6f      	ldr	r3, [pc, #444]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c0a:	22a7      	movs	r2, #167	; 0xa7
 8008c0c:	729a      	strb	r2, [r3, #10]
				spiTxBuffer[11] = 0x0;
 8008c0e:	4b6e      	ldr	r3, [pc, #440]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	72da      	strb	r2, [r3, #11]

				spiTxBuffer[12] = 0x80 | 0x28;	//OUTX_L_A
 8008c14:	4b6c      	ldr	r3, [pc, #432]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c16:	22a8      	movs	r2, #168	; 0xa8
 8008c18:	731a      	strb	r2, [r3, #12]
				spiTxBuffer[13] = 0x0;
 8008c1a:	4b6b      	ldr	r3, [pc, #428]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	735a      	strb	r2, [r3, #13]
				spiTxBuffer[14] = 0x80 | 0x29;	//OUTX_H_A
 8008c20:	4b69      	ldr	r3, [pc, #420]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c22:	22a9      	movs	r2, #169	; 0xa9
 8008c24:	739a      	strb	r2, [r3, #14]
				spiTxBuffer[15] = 0x0;
 8008c26:	4b68      	ldr	r3, [pc, #416]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	73da      	strb	r2, [r3, #15]
				spiTxBuffer[16] = 0x80 | 0x2A;	//OUTY_L_A
 8008c2c:	4b66      	ldr	r3, [pc, #408]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c2e:	22aa      	movs	r2, #170	; 0xaa
 8008c30:	741a      	strb	r2, [r3, #16]
				spiTxBuffer[17] = 0x0;
 8008c32:	4b65      	ldr	r3, [pc, #404]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	745a      	strb	r2, [r3, #17]
				spiTxBuffer[18] = 0x80 | 0x2B;	//OUTY_H_A
 8008c38:	4b63      	ldr	r3, [pc, #396]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c3a:	22ab      	movs	r2, #171	; 0xab
 8008c3c:	749a      	strb	r2, [r3, #18]
				spiTxBuffer[19] = 0x0;
 8008c3e:	4b62      	ldr	r3, [pc, #392]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	74da      	strb	r2, [r3, #19]
				spiTxBuffer[20] = 0x80 | 0x2C;	//OUTZ_L_A
 8008c44:	4b60      	ldr	r3, [pc, #384]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c46:	22ac      	movs	r2, #172	; 0xac
 8008c48:	751a      	strb	r2, [r3, #20]
				spiTxBuffer[21] = 0x0;
 8008c4a:	4b5f      	ldr	r3, [pc, #380]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	755a      	strb	r2, [r3, #21]
				spiTxBuffer[22] = 0x80 | 0x2D;	//OUTZ_H_A
 8008c50:	4b5d      	ldr	r3, [pc, #372]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c52:	22ad      	movs	r2, #173	; 0xad
 8008c54:	759a      	strb	r2, [r3, #22]
				spiTxBuffer[23] = 0x0;
 8008c56:	4b5c      	ldr	r3, [pc, #368]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	75da      	strb	r2, [r3, #23]

				//start streaming
				//ModbusEnd(&ModbusH);
				HAL_TIM_Base_Start_IT(&htim2);
 8008c5c:	485b      	ldr	r0, [pc, #364]	; (8008dcc <startImuDataTask+0x2d0>)
 8008c5e:	f001 ff72 	bl	800ab46 <HAL_TIM_Base_Start_IT>
 8008c62:	e01a      	b.n	8008c9a <startImuDataTask+0x19e>
			}
			else if(ModbusData[10] == 0x96){
 8008c64:	4b54      	ldr	r3, [pc, #336]	; (8008db8 <startImuDataTask+0x2bc>)
 8008c66:	8a9b      	ldrh	r3, [r3, #20]
 8008c68:	2b96      	cmp	r3, #150	; 0x96
 8008c6a:	d106      	bne.n	8008c7a <startImuDataTask+0x17e>
				ModbusData[10] = 0;
 8008c6c:	4b52      	ldr	r3, [pc, #328]	; (8008db8 <startImuDataTask+0x2bc>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	829a      	strh	r2, [r3, #20]
				//stop streaming
				//HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
				HAL_TIM_Base_Stop_IT(&htim2);
 8008c72:	4856      	ldr	r0, [pc, #344]	; (8008dcc <startImuDataTask+0x2d0>)
 8008c74:	f001 ff8b 	bl	800ab8e <HAL_TIM_Base_Stop_IT>
 8008c78:	e00f      	b.n	8008c9a <startImuDataTask+0x19e>
				//osTimerStop(streamTimerHandle);
			}
			else if(ModbusData[11] > 0){	//set the timer update rate
 8008c7a:	4b4f      	ldr	r3, [pc, #316]	; (8008db8 <startImuDataTask+0x2bc>)
 8008c7c:	8adb      	ldrh	r3, [r3, #22]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <startImuDataTask+0x19e>
				htim2.Instance->ARR = ModbusData[11];
 8008c82:	4b4d      	ldr	r3, [pc, #308]	; (8008db8 <startImuDataTask+0x2bc>)
 8008c84:	8ada      	ldrh	r2, [r3, #22]
 8008c86:	4b51      	ldr	r3, [pc, #324]	; (8008dcc <startImuDataTask+0x2d0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	62da      	str	r2, [r3, #44]	; 0x2c
				//htim2.Instance->ARR = 400;
				htim2.Instance->CNT = 0;
 8008c8c:	4b4f      	ldr	r3, [pc, #316]	; (8008dcc <startImuDataTask+0x2d0>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2200      	movs	r2, #0
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24
				//htim2.Instance->CCR2 = ModbusData[11];
				ModbusData[11] = 0;
 8008c94:	4b48      	ldr	r3, [pc, #288]	; (8008db8 <startImuDataTask+0x2bc>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	82da      	strh	r2, [r3, #22]
			}
			osSemaphoreRelease(ModbusH.ModBusSphrHandle);
 8008c9a:	4b48      	ldr	r3, [pc, #288]	; (8008dbc <startImuDataTask+0x2c0>)
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f003 fcf5 	bl	800c690 <osSemaphoreRelease>

			break;
 8008ca6:	e083      	b.n	8008db0 <startImuDataTask+0x2b4>

		case IMU_STATE_WAITING:
			if(!spiBusy){
 8008ca8:	4b49      	ldr	r3, [pc, #292]	; (8008dd0 <startImuDataTask+0x2d4>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f083 0301 	eor.w	r3, r3, #1
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d07b      	beq.n	8008dae <startImuDataTask+0x2b2>
				state = nextState;
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8008cba:	e078      	b.n	8008dae <startImuDataTask+0x2b2>

		case IMU_STATE_READ_REG:
			spiTxBuffer[0] = 0x80 | ModbusData[1];	//read register
 8008cbc:	4b3e      	ldr	r3, [pc, #248]	; (8008db8 <startImuDataTask+0x2bc>)
 8008cbe:	885b      	ldrh	r3, [r3, #2]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	4b3f      	ldr	r3, [pc, #252]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008cca:	701a      	strb	r2, [r3, #0]
			spiTxBuffer[1] = 00;
 8008ccc:	4b3e      	ldr	r3, [pc, #248]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);	//set CS low.  It will be reset in the callback for TX complete.
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cd8:	483e      	ldr	r0, [pc, #248]	; (8008dd4 <startImuDataTask+0x2d8>)
 8008cda:	f000 fd73 	bl	80097c4 <HAL_GPIO_WritePin>
			halStatus = HAL_SPI_TransmitReceive_IT(&hspi2, spiTxBuffer, spiRxBuffer, 2);
 8008cde:	2302      	movs	r3, #2
 8008ce0:	4a3d      	ldr	r2, [pc, #244]	; (8008dd8 <startImuDataTask+0x2dc>)
 8008ce2:	4939      	ldr	r1, [pc, #228]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008ce4:	483d      	ldr	r0, [pc, #244]	; (8008ddc <startImuDataTask+0x2e0>)
 8008ce6:	f001 fb65 	bl	800a3b4 <HAL_SPI_TransmitReceive_IT>
 8008cea:	4603      	mov	r3, r0
 8008cec:	737b      	strb	r3, [r7, #13]
			spiBusy = true;
 8008cee:	4b38      	ldr	r3, [pc, #224]	; (8008dd0 <startImuDataTask+0x2d4>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	701a      	strb	r2, [r3, #0]
			state = IMU_STATE_WAITING;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	73fb      	strb	r3, [r7, #15]
			nextState = IMU_STATE_READ_REG_COMPLETE;
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	73bb      	strb	r3, [r7, #14]
			break;
 8008cfc:	e058      	b.n	8008db0 <startImuDataTask+0x2b4>

		case IMU_STATE_READ_REG_COMPLETE:
			osSemaphoreAcquire(ModbusH.ModBusSphrHandle , portMAX_DELAY);
 8008cfe:	4b2f      	ldr	r3, [pc, #188]	; (8008dbc <startImuDataTask+0x2c0>)
 8008d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f003 fc5b 	bl	800c5c4 <osSemaphoreAcquire>
			ModbusData[1] = 0;	//clear out the request
 8008d0e:	4b2a      	ldr	r3, [pc, #168]	; (8008db8 <startImuDataTask+0x2bc>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	805a      	strh	r2, [r3, #2]
			ModbusData[3] = spiRxBuffer[1];
 8008d14:	4b30      	ldr	r3, [pc, #192]	; (8008dd8 <startImuDataTask+0x2dc>)
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	4b27      	ldr	r3, [pc, #156]	; (8008db8 <startImuDataTask+0x2bc>)
 8008d1c:	80da      	strh	r2, [r3, #6]
			state = nextState = IMU_STATE_IDLE;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73bb      	strb	r3, [r7, #14]
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	73fb      	strb	r3, [r7, #15]
			osSemaphoreRelease(ModbusH.ModBusSphrHandle);
 8008d26:	4b25      	ldr	r3, [pc, #148]	; (8008dbc <startImuDataTask+0x2c0>)
 8008d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f003 fcaf 	bl	800c690 <osSemaphoreRelease>
			break;
 8008d32:	e03d      	b.n	8008db0 <startImuDataTask+0x2b4>

		case IMU_STATE_WRITE_REG:
			spiTxBuffer[0] = ModbusData[2];	//write register
 8008d34:	4b20      	ldr	r3, [pc, #128]	; (8008db8 <startImuDataTask+0x2bc>)
 8008d36:	889b      	ldrh	r3, [r3, #4]
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	4b23      	ldr	r3, [pc, #140]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008d3c:	701a      	strb	r2, [r3, #0]
			spiTxBuffer[1] = ModbusData[3];
 8008d3e:	4b1e      	ldr	r3, [pc, #120]	; (8008db8 <startImuDataTask+0x2bc>)
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	4b20      	ldr	r3, [pc, #128]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008d46:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);	//set CS low.  It will be reset in the callback for TX complete.
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d4e:	4821      	ldr	r0, [pc, #132]	; (8008dd4 <startImuDataTask+0x2d8>)
 8008d50:	f000 fd38 	bl	80097c4 <HAL_GPIO_WritePin>
			halStatus = HAL_SPI_TransmitReceive_IT(&hspi2, spiTxBuffer, spiRxBuffer, 2);
 8008d54:	2302      	movs	r3, #2
 8008d56:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <startImuDataTask+0x2dc>)
 8008d58:	491b      	ldr	r1, [pc, #108]	; (8008dc8 <startImuDataTask+0x2cc>)
 8008d5a:	4820      	ldr	r0, [pc, #128]	; (8008ddc <startImuDataTask+0x2e0>)
 8008d5c:	f001 fb2a 	bl	800a3b4 <HAL_SPI_TransmitReceive_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	737b      	strb	r3, [r7, #13]
			spiBusy = true;
 8008d64:	4b1a      	ldr	r3, [pc, #104]	; (8008dd0 <startImuDataTask+0x2d4>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	701a      	strb	r2, [r3, #0]
			state = IMU_STATE_WAITING;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	73fb      	strb	r3, [r7, #15]
			nextState = IMU_STATE_WRITE_REG_COMPLETE;
 8008d6e:	2306      	movs	r3, #6
 8008d70:	73bb      	strb	r3, [r7, #14]
			break;
 8008d72:	e01d      	b.n	8008db0 <startImuDataTask+0x2b4>

		case IMU_STATE_WRITE_REG_COMPLETE:
			osSemaphoreAcquire(ModbusH.ModBusSphrHandle , portMAX_DELAY);
 8008d74:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <startImuDataTask+0x2c0>)
 8008d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f003 fc20 	bl	800c5c4 <osSemaphoreAcquire>
			ModbusData[2] = 0;	//clear out the request
 8008d84:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <startImuDataTask+0x2bc>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	809a      	strh	r2, [r3, #4]
			ModbusData[3] = spiRxBuffer[1];
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <startImuDataTask+0x2dc>)
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <startImuDataTask+0x2bc>)
 8008d92:	80da      	strh	r2, [r3, #6]
			state = nextState = IMU_STATE_IDLE;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73bb      	strb	r3, [r7, #14]
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	73fb      	strb	r3, [r7, #15]
			osSemaphoreRelease(ModbusH.ModBusSphrHandle);
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <startImuDataTask+0x2c0>)
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da2:	4618      	mov	r0, r3
 8008da4:	f003 fc74 	bl	800c690 <osSemaphoreRelease>
			break;
 8008da8:	e002      	b.n	8008db0 <startImuDataTask+0x2b4>

		default:
			break;
 8008daa:	bf00      	nop
 8008dac:	e000      	b.n	8008db0 <startImuDataTask+0x2b4>
			break;
 8008dae:	bf00      	nop
		}

		osDelay(1);
 8008db0:	2001      	movs	r0, #1
 8008db2:	f003 fa61 	bl	800c278 <osDelay>
		switch(state){
 8008db6:	e6a9      	b.n	8008b0c <startImuDataTask+0x10>
 8008db8:	20004a4c 	.word	0x20004a4c
 8008dbc:	200049ac 	.word	0x200049ac
 8008dc0:	20004bb0 	.word	0x20004bb0
 8008dc4:	40020000 	.word	0x40020000
 8008dc8:	20004b90 	.word	0x20004b90
 8008dcc:	20004b50 	.word	0x20004b50
 8008dd0:	2000002c 	.word	0x2000002c
 8008dd4:	40020400 	.word	0x40020400
 8008dd8:	20004bf0 	.word	0x20004bf0
 8008ddc:	20004944 	.word	0x20004944

08008de0 <streamTimerCallback>:
  /* USER CODE END startImuDataTask */
}

/* streamTimerCallback function */
void streamTimerCallback(void *argument)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN streamTimerCallback */

  /* USER CODE END streamTimerCallback */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <utilTimerCallback>:

/* utilTimerCallback function */
void utilTimerCallback(void *argument)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN utilTimerCallback */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8008dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e00:	4803      	ldr	r0, [pc, #12]	; (8008e10 <utilTimerCallback+0x1c>)
 8008e02:	f000 fcf8 	bl	80097f6 <HAL_GPIO_TogglePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
//	uint8_t tb[8] = "test\r\n";
//	HAL_UART_Transmit_IT(&huart2, tb, 6);
  /* USER CODE END utilTimerCallback */
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	40020400 	.word	0x40020400

08008e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a15      	ldr	r2, [pc, #84]	; (8008e78 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d102      	bne.n	8008e2c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8008e26:	f000 fa27 	bl	8009278 <HAL_IncTick>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //set CS low.  It will be reset in the callback for TX complete.
	HAL_SPI_TransmitReceive_IT(&hspi2, spiTxBuffer + 24 - bytesToRead, spiRxBuffer + 24 - bytesToRead, 2);	//kick off two bytes of SPI RX/TX.
	spiBusy = true;
  }
  /* USER CODE END Callback 1 */
}
 8008e2a:	e020      	b.n	8008e6e <HAL_TIM_PeriodElapsedCallback+0x5a>
  else if(htim->Instance == TIM2){	//streaming timer
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e34:	d11b      	bne.n	8008e6e <HAL_TIM_PeriodElapsedCallback+0x5a>
	bytesToRead = 24;
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8008e38:	2218      	movs	r2, #24
 8008e3a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //set CS low.  It will be reset in the callback for TX complete.
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e42:	480f      	ldr	r0, [pc, #60]	; (8008e80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8008e44:	f000 fcbe 	bl	80097c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spiTxBuffer + 24 - bytesToRead, spiRxBuffer + 24 - bytesToRead, 2);	//kick off two bytes of SPI RX/TX.
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f1c3 0318 	rsb	r3, r3, #24
 8008e50:	4a0c      	ldr	r2, [pc, #48]	; (8008e84 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8008e52:	1899      	adds	r1, r3, r2
 8008e54:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f1c3 0318 	rsb	r3, r3, #24
 8008e5c:	4a0a      	ldr	r2, [pc, #40]	; (8008e88 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8008e5e:	441a      	add	r2, r3
 8008e60:	2302      	movs	r3, #2
 8008e62:	480a      	ldr	r0, [pc, #40]	; (8008e8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8008e64:	f001 faa6 	bl	800a3b4 <HAL_SPI_TransmitReceive_IT>
	spiBusy = true;
 8008e68:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	701a      	strb	r2, [r3, #0]
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	40010000 	.word	0x40010000
 8008e7c:	20004a48 	.word	0x20004a48
 8008e80:	40020400 	.word	0x40020400
 8008e84:	20004b90 	.word	0x20004b90
 8008e88:	20004bf0 	.word	0x20004bf0
 8008e8c:	20004944 	.word	0x20004944
 8008e90:	2000002c 	.word	0x2000002c

08008e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008e98:	bf00      	nop
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
	...

08008ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008eaa:	2300      	movs	r3, #0
 8008eac:	607b      	str	r3, [r7, #4]
 8008eae:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <HAL_MspInit+0x4c>)
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb2:	4a0f      	ldr	r2, [pc, #60]	; (8008ef0 <HAL_MspInit+0x4c>)
 8008eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008eba:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <HAL_MspInit+0x4c>)
 8008ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec2:	607b      	str	r3, [r7, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <HAL_MspInit+0x4c>)
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <HAL_MspInit+0x4c>)
 8008ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <HAL_MspInit+0x4c>)
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	40023800 	.word	0x40023800

08008ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	605a      	str	r2, [r3, #4]
 8008f06:	609a      	str	r2, [r3, #8]
 8008f08:	60da      	str	r2, [r3, #12]
 8008f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1d      	ldr	r2, [pc, #116]	; (8008f88 <HAL_SPI_MspInit+0x94>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d134      	bne.n	8008f80 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008f16:	2300      	movs	r3, #0
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	4b1c      	ldr	r3, [pc, #112]	; (8008f8c <HAL_SPI_MspInit+0x98>)
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	4a1b      	ldr	r2, [pc, #108]	; (8008f8c <HAL_SPI_MspInit+0x98>)
 8008f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f24:	6413      	str	r3, [r2, #64]	; 0x40
 8008f26:	4b19      	ldr	r3, [pc, #100]	; (8008f8c <HAL_SPI_MspInit+0x98>)
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	4b15      	ldr	r3, [pc, #84]	; (8008f8c <HAL_SPI_MspInit+0x98>)
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	4a14      	ldr	r2, [pc, #80]	; (8008f8c <HAL_SPI_MspInit+0x98>)
 8008f3c:	f043 0302 	orr.w	r3, r3, #2
 8008f40:	6313      	str	r3, [r2, #48]	; 0x30
 8008f42:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <HAL_SPI_MspInit+0x98>)
 8008f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8008f4e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8008f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f54:	2302      	movs	r3, #2
 8008f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008f60:	2305      	movs	r3, #5
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f64:	f107 0314 	add.w	r3, r7, #20
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4809      	ldr	r0, [pc, #36]	; (8008f90 <HAL_SPI_MspInit+0x9c>)
 8008f6c:	f000 faa8 	bl	80094c0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008f70:	2200      	movs	r2, #0
 8008f72:	2100      	movs	r1, #0
 8008f74:	2024      	movs	r0, #36	; 0x24
 8008f76:	f000 fa57 	bl	8009428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008f7a:	2024      	movs	r0, #36	; 0x24
 8008f7c:	f000 fa70 	bl	8009460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008f80:	bf00      	nop
 8008f82:	3728      	adds	r7, #40	; 0x28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	40003800 	.word	0x40003800
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	40020400 	.word	0x40020400

08008f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa4:	d115      	bne.n	8008fd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <HAL_TIM_Base_MspInit+0x48>)
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	4a0b      	ldr	r2, [pc, #44]	; (8008fdc <HAL_TIM_Base_MspInit+0x48>)
 8008fb0:	f043 0301 	orr.w	r3, r3, #1
 8008fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <HAL_TIM_Base_MspInit+0x48>)
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	201c      	movs	r0, #28
 8008fc8:	f000 fa2e 	bl	8009428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008fcc:	201c      	movs	r0, #28
 8008fce:	f000 fa47 	bl	8009460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40023800 	.word	0x40023800

08008fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	; 0x28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fe8:	f107 0314 	add.w	r3, r7, #20
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	605a      	str	r2, [r3, #4]
 8008ff2:	609a      	str	r2, [r3, #8]
 8008ff4:	60da      	str	r2, [r3, #12]
 8008ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <HAL_UART_MspInit+0x94>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d133      	bne.n	800906a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009002:	2300      	movs	r3, #0
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	4b1c      	ldr	r3, [pc, #112]	; (8009078 <HAL_UART_MspInit+0x98>)
 8009008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900a:	4a1b      	ldr	r2, [pc, #108]	; (8009078 <HAL_UART_MspInit+0x98>)
 800900c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009010:	6413      	str	r3, [r2, #64]	; 0x40
 8009012:	4b19      	ldr	r3, [pc, #100]	; (8009078 <HAL_UART_MspInit+0x98>)
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <HAL_UART_MspInit+0x98>)
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	4a14      	ldr	r2, [pc, #80]	; (8009078 <HAL_UART_MspInit+0x98>)
 8009028:	f043 0301 	orr.w	r3, r3, #1
 800902c:	6313      	str	r3, [r2, #48]	; 0x30
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <HAL_UART_MspInit+0x98>)
 8009030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800903a:	230c      	movs	r3, #12
 800903c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800903e:	2302      	movs	r3, #2
 8009040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009046:	2303      	movs	r3, #3
 8009048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800904a:	2307      	movs	r3, #7
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800904e:	f107 0314 	add.w	r3, r7, #20
 8009052:	4619      	mov	r1, r3
 8009054:	4809      	ldr	r0, [pc, #36]	; (800907c <HAL_UART_MspInit+0x9c>)
 8009056:	f000 fa33 	bl	80094c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800905a:	2200      	movs	r2, #0
 800905c:	2105      	movs	r1, #5
 800905e:	2026      	movs	r0, #38	; 0x26
 8009060:	f000 f9e2 	bl	8009428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009064:	2026      	movs	r0, #38	; 0x26
 8009066:	f000 f9fb 	bl	8009460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800906a:	bf00      	nop
 800906c:	3728      	adds	r7, #40	; 0x28
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40004400 	.word	0x40004400
 8009078:	40023800 	.word	0x40023800
 800907c:	40020000 	.word	0x40020000

08009080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08c      	sub	sp, #48	; 0x30
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8009090:	2200      	movs	r2, #0
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	2019      	movs	r0, #25
 8009096:	f000 f9c7 	bl	8009428 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800909a:	2019      	movs	r0, #25
 800909c:	f000 f9e0 	bl	8009460 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80090a0:	2300      	movs	r3, #0
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <HAL_InitTick+0xa0>)
 80090a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a8:	4a1d      	ldr	r2, [pc, #116]	; (8009120 <HAL_InitTick+0xa0>)
 80090aa:	f043 0301 	orr.w	r3, r3, #1
 80090ae:	6453      	str	r3, [r2, #68]	; 0x44
 80090b0:	4b1b      	ldr	r3, [pc, #108]	; (8009120 <HAL_InitTick+0xa0>)
 80090b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80090bc:	f107 0210 	add.w	r2, r7, #16
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 f810 	bl	800a0ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80090cc:	f000 fffa 	bl	800a0c4 <HAL_RCC_GetPCLK2Freq>
 80090d0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <HAL_InitTick+0xa4>)
 80090d6:	fba2 2303 	umull	r2, r3, r2, r3
 80090da:	0c9b      	lsrs	r3, r3, #18
 80090dc:	3b01      	subs	r3, #1
 80090de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <HAL_InitTick+0xa8>)
 80090e2:	4a12      	ldr	r2, [pc, #72]	; (800912c <HAL_InitTick+0xac>)
 80090e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80090e6:	4b10      	ldr	r3, [pc, #64]	; (8009128 <HAL_InitTick+0xa8>)
 80090e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80090ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80090ee:	4a0e      	ldr	r2, [pc, #56]	; (8009128 <HAL_InitTick+0xa8>)
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80090f4:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <HAL_InitTick+0xa8>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090fa:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <HAL_InitTick+0xa8>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009100:	4809      	ldr	r0, [pc, #36]	; (8009128 <HAL_InitTick+0xa8>)
 8009102:	f001 fcf5 	bl	800aaf0 <HAL_TIM_Base_Init>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800910c:	4806      	ldr	r0, [pc, #24]	; (8009128 <HAL_InitTick+0xa8>)
 800910e:	f001 fd1a 	bl	800ab46 <HAL_TIM_Base_Start_IT>
 8009112:	4603      	mov	r3, r0
 8009114:	e000      	b.n	8009118 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
}
 8009118:	4618      	mov	r0, r3
 800911a:	3730      	adds	r7, #48	; 0x30
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40023800 	.word	0x40023800
 8009124:	431bde83 	.word	0x431bde83
 8009128:	20004c10 	.word	0x20004c10
 800912c:	40010000 	.word	0x40010000

08009130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009134:	bf00      	nop
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800913e:	b480      	push	{r7}
 8009140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009142:	e7fe      	b.n	8009142 <HardFault_Handler+0x4>

08009144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009148:	e7fe      	b.n	8009148 <MemManage_Handler+0x4>

0800914a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800914a:	b480      	push	{r7}
 800914c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800914e:	e7fe      	b.n	800914e <BusFault_Handler+0x4>

08009150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009154:	e7fe      	b.n	8009154 <UsageFault_Handler+0x4>

08009156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009156:	b480      	push	{r7}
 8009158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800915a:	bf00      	nop
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009168:	4802      	ldr	r0, [pc, #8]	; (8009174 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800916a:	f001 fd3b 	bl	800abe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800916e:	bf00      	nop
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20004c10 	.word	0x20004c10

08009178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800917c:	4802      	ldr	r0, [pc, #8]	; (8009188 <TIM2_IRQHandler+0x10>)
 800917e:	f001 fd31 	bl	800abe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009182:	bf00      	nop
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20004b50 	.word	0x20004b50

0800918c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8009190:	4802      	ldr	r0, [pc, #8]	; (800919c <SPI2_IRQHandler+0x10>)
 8009192:	f001 f9a3 	bl	800a4dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8009196:	bf00      	nop
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20004944 	.word	0x20004944

080091a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80091a4:	4802      	ldr	r0, [pc, #8]	; (80091b0 <USART2_IRQHandler+0x10>)
 80091a6:	f002 f989 	bl	800b4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80091aa:	bf00      	nop
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20004bb0 	.word	0x20004bb0

080091b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80091b8:	4b08      	ldr	r3, [pc, #32]	; (80091dc <SystemInit+0x28>)
 80091ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091be:	4a07      	ldr	r2, [pc, #28]	; (80091dc <SystemInit+0x28>)
 80091c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80091c8:	4b04      	ldr	r3, [pc, #16]	; (80091dc <SystemInit+0x28>)
 80091ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80091ce:	609a      	str	r2, [r3, #8]
#endif
}
 80091d0:	bf00      	nop
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	e000ed00 	.word	0xe000ed00

080091e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80091e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009218 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80091e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80091e6:	e003      	b.n	80091f0 <LoopCopyDataInit>

080091e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80091e8:	4b0c      	ldr	r3, [pc, #48]	; (800921c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80091ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80091ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80091ee:	3104      	adds	r1, #4

080091f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80091f0:	480b      	ldr	r0, [pc, #44]	; (8009220 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80091f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80091f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80091f8:	d3f6      	bcc.n	80091e8 <CopyDataInit>
  ldr  r2, =_sbss
 80091fa:	4a0b      	ldr	r2, [pc, #44]	; (8009228 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80091fc:	e002      	b.n	8009204 <LoopFillZerobss>

080091fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80091fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009200:	f842 3b04 	str.w	r3, [r2], #4

08009204 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009204:	4b09      	ldr	r3, [pc, #36]	; (800922c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009206:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009208:	d3f9      	bcc.n	80091fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800920a:	f7ff ffd3 	bl	80091b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800920e:	f008 f877 	bl	8011300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009212:	f7ff f99f 	bl	8008554 <main>
  bx  lr    
 8009216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009218:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800921c:	08011554 	.word	0x08011554
  ldr  r0, =_sdata
 8009220:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009224:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8009228:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800922c:	20004c94 	.word	0x20004c94

08009230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009230:	e7fe      	b.n	8009230 <ADC_IRQHandler>
	...

08009234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009238:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <HAL_Init+0x40>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a0d      	ldr	r2, [pc, #52]	; (8009274 <HAL_Init+0x40>)
 800923e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009244:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <HAL_Init+0x40>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <HAL_Init+0x40>)
 800924a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800924e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <HAL_Init+0x40>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a07      	ldr	r2, [pc, #28]	; (8009274 <HAL_Init+0x40>)
 8009256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800925a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800925c:	2003      	movs	r0, #3
 800925e:	f000 f8d8 	bl	8009412 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009262:	2000      	movs	r0, #0
 8009264:	f7ff ff0c 	bl	8009080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009268:	f7ff fe1c 	bl	8008ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40023c00 	.word	0x40023c00

08009278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <HAL_IncTick+0x20>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	4b06      	ldr	r3, [pc, #24]	; (800929c <HAL_IncTick+0x24>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4413      	add	r3, r2
 8009288:	4a04      	ldr	r2, [pc, #16]	; (800929c <HAL_IncTick+0x24>)
 800928a:	6013      	str	r3, [r2, #0]
}
 800928c:	bf00      	nop
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20000008 	.word	0x20000008
 800929c:	20004c50 	.word	0x20004c50

080092a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092a0:	b480      	push	{r7}
 80092a2:	af00      	add	r7, sp, #0
  return uwTick;
 80092a4:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <HAL_GetTick+0x14>)
 80092a6:	681b      	ldr	r3, [r3, #0]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	20004c50 	.word	0x20004c50

080092b8 <__NVIC_SetPriorityGrouping>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <__NVIC_SetPriorityGrouping+0x44>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80092d4:	4013      	ands	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80092e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80092ea:	4a04      	ldr	r2, [pc, #16]	; (80092fc <__NVIC_SetPriorityGrouping+0x44>)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	60d3      	str	r3, [r2, #12]
}
 80092f0:	bf00      	nop
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	e000ed00 	.word	0xe000ed00

08009300 <__NVIC_GetPriorityGrouping>:
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <__NVIC_GetPriorityGrouping+0x18>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	f003 0307 	and.w	r3, r3, #7
}
 800930e:	4618      	mov	r0, r3
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	e000ed00 	.word	0xe000ed00

0800931c <__NVIC_EnableIRQ>:
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932a:	2b00      	cmp	r3, #0
 800932c:	db0b      	blt.n	8009346 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	f003 021f 	and.w	r2, r3, #31
 8009334:	4907      	ldr	r1, [pc, #28]	; (8009354 <__NVIC_EnableIRQ+0x38>)
 8009336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2001      	movs	r0, #1
 800933e:	fa00 f202 	lsl.w	r2, r0, r2
 8009342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	e000e100 	.word	0xe000e100

08009358 <__NVIC_SetPriority>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	6039      	str	r1, [r7, #0]
 8009362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009368:	2b00      	cmp	r3, #0
 800936a:	db0a      	blt.n	8009382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	b2da      	uxtb	r2, r3
 8009370:	490c      	ldr	r1, [pc, #48]	; (80093a4 <__NVIC_SetPriority+0x4c>)
 8009372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009376:	0112      	lsls	r2, r2, #4
 8009378:	b2d2      	uxtb	r2, r2
 800937a:	440b      	add	r3, r1
 800937c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009380:	e00a      	b.n	8009398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	b2da      	uxtb	r2, r3
 8009386:	4908      	ldr	r1, [pc, #32]	; (80093a8 <__NVIC_SetPriority+0x50>)
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	f003 030f 	and.w	r3, r3, #15
 800938e:	3b04      	subs	r3, #4
 8009390:	0112      	lsls	r2, r2, #4
 8009392:	b2d2      	uxtb	r2, r2
 8009394:	440b      	add	r3, r1
 8009396:	761a      	strb	r2, [r3, #24]
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	e000e100 	.word	0xe000e100
 80093a8:	e000ed00 	.word	0xe000ed00

080093ac <NVIC_EncodePriority>:
{
 80093ac:	b480      	push	{r7}
 80093ae:	b089      	sub	sp, #36	; 0x24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	f1c3 0307 	rsb	r3, r3, #7
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	bf28      	it	cs
 80093ca:	2304      	movcs	r3, #4
 80093cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	3304      	adds	r3, #4
 80093d2:	2b06      	cmp	r3, #6
 80093d4:	d902      	bls.n	80093dc <NVIC_EncodePriority+0x30>
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3b03      	subs	r3, #3
 80093da:	e000      	b.n	80093de <NVIC_EncodePriority+0x32>
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	43da      	mvns	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	401a      	ands	r2, r3
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	fa01 f303 	lsl.w	r3, r1, r3
 80093fe:	43d9      	mvns	r1, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009404:	4313      	orrs	r3, r2
}
 8009406:	4618      	mov	r0, r3
 8009408:	3724      	adds	r7, #36	; 0x24
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff ff4c 	bl	80092b8 <__NVIC_SetPriorityGrouping>
}
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800943a:	f7ff ff61 	bl	8009300 <__NVIC_GetPriorityGrouping>
 800943e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	6978      	ldr	r0, [r7, #20]
 8009446:	f7ff ffb1 	bl	80093ac <NVIC_EncodePriority>
 800944a:	4602      	mov	r2, r0
 800944c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff ff80 	bl	8009358 <__NVIC_SetPriority>
}
 8009458:	bf00      	nop
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800946a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff ff54 	bl	800931c <__NVIC_EnableIRQ>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b02      	cmp	r3, #2
 800948e:	d004      	beq.n	800949a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2280      	movs	r2, #128	; 0x80
 8009494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e00c      	b.n	80094b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2205      	movs	r2, #5
 800949e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f022 0201 	bic.w	r2, r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b089      	sub	sp, #36	; 0x24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094d6:	2300      	movs	r3, #0
 80094d8:	61fb      	str	r3, [r7, #28]
 80094da:	e159      	b.n	8009790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80094dc:	2201      	movs	r2, #1
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	fa02 f303 	lsl.w	r3, r2, r3
 80094e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4013      	ands	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	f040 8148 	bne.w	800978a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d00b      	beq.n	800951a <HAL_GPIO_Init+0x5a>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d007      	beq.n	800951a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800950e:	2b11      	cmp	r3, #17
 8009510:	d003      	beq.n	800951a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	2b12      	cmp	r3, #18
 8009518:	d130      	bne.n	800957c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	2203      	movs	r2, #3
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	43db      	mvns	r3, r3
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	4013      	ands	r3, r2
 8009530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	4313      	orrs	r3, r2
 8009542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009550:	2201      	movs	r2, #1
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	fa02 f303 	lsl.w	r3, r2, r3
 8009558:	43db      	mvns	r3, r3
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	4013      	ands	r3, r2
 800955e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	091b      	lsrs	r3, r3, #4
 8009566:	f003 0201 	and.w	r2, r3, #1
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	fa02 f303 	lsl.w	r3, r2, r3
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	4313      	orrs	r3, r2
 8009574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	005b      	lsls	r3, r3, #1
 8009586:	2203      	movs	r2, #3
 8009588:	fa02 f303 	lsl.w	r3, r2, r3
 800958c:	43db      	mvns	r3, r3
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	4013      	ands	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	fa02 f303 	lsl.w	r3, r2, r3
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d003      	beq.n	80095bc <HAL_GPIO_Init+0xfc>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	2b12      	cmp	r3, #18
 80095ba:	d123      	bne.n	8009604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	08da      	lsrs	r2, r3, #3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3208      	adds	r2, #8
 80095c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	220f      	movs	r2, #15
 80095d4:	fa02 f303 	lsl.w	r3, r2, r3
 80095d8:	43db      	mvns	r3, r3
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	4013      	ands	r3, r2
 80095de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	08da      	lsrs	r2, r3, #3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3208      	adds	r2, #8
 80095fe:	69b9      	ldr	r1, [r7, #24]
 8009600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	005b      	lsls	r3, r3, #1
 800960e:	2203      	movs	r2, #3
 8009610:	fa02 f303 	lsl.w	r3, r2, r3
 8009614:	43db      	mvns	r3, r3
 8009616:	69ba      	ldr	r2, [r7, #24]
 8009618:	4013      	ands	r3, r2
 800961a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f003 0203 	and.w	r2, r3, #3
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	fa02 f303 	lsl.w	r3, r2, r3
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	4313      	orrs	r3, r2
 8009630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80a2 	beq.w	800978a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009646:	2300      	movs	r3, #0
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	4b56      	ldr	r3, [pc, #344]	; (80097a4 <HAL_GPIO_Init+0x2e4>)
 800964c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964e:	4a55      	ldr	r2, [pc, #340]	; (80097a4 <HAL_GPIO_Init+0x2e4>)
 8009650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009654:	6453      	str	r3, [r2, #68]	; 0x44
 8009656:	4b53      	ldr	r3, [pc, #332]	; (80097a4 <HAL_GPIO_Init+0x2e4>)
 8009658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009662:	4a51      	ldr	r2, [pc, #324]	; (80097a8 <HAL_GPIO_Init+0x2e8>)
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	089b      	lsrs	r3, r3, #2
 8009668:	3302      	adds	r3, #2
 800966a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	220f      	movs	r2, #15
 800967a:	fa02 f303 	lsl.w	r3, r2, r3
 800967e:	43db      	mvns	r3, r3
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	4013      	ands	r3, r2
 8009684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a48      	ldr	r2, [pc, #288]	; (80097ac <HAL_GPIO_Init+0x2ec>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d019      	beq.n	80096c2 <HAL_GPIO_Init+0x202>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a47      	ldr	r2, [pc, #284]	; (80097b0 <HAL_GPIO_Init+0x2f0>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d013      	beq.n	80096be <HAL_GPIO_Init+0x1fe>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a46      	ldr	r2, [pc, #280]	; (80097b4 <HAL_GPIO_Init+0x2f4>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d00d      	beq.n	80096ba <HAL_GPIO_Init+0x1fa>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a45      	ldr	r2, [pc, #276]	; (80097b8 <HAL_GPIO_Init+0x2f8>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d007      	beq.n	80096b6 <HAL_GPIO_Init+0x1f6>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a44      	ldr	r2, [pc, #272]	; (80097bc <HAL_GPIO_Init+0x2fc>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d101      	bne.n	80096b2 <HAL_GPIO_Init+0x1f2>
 80096ae:	2304      	movs	r3, #4
 80096b0:	e008      	b.n	80096c4 <HAL_GPIO_Init+0x204>
 80096b2:	2307      	movs	r3, #7
 80096b4:	e006      	b.n	80096c4 <HAL_GPIO_Init+0x204>
 80096b6:	2303      	movs	r3, #3
 80096b8:	e004      	b.n	80096c4 <HAL_GPIO_Init+0x204>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e002      	b.n	80096c4 <HAL_GPIO_Init+0x204>
 80096be:	2301      	movs	r3, #1
 80096c0:	e000      	b.n	80096c4 <HAL_GPIO_Init+0x204>
 80096c2:	2300      	movs	r3, #0
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	f002 0203 	and.w	r2, r2, #3
 80096ca:	0092      	lsls	r2, r2, #2
 80096cc:	4093      	lsls	r3, r2
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096d4:	4934      	ldr	r1, [pc, #208]	; (80097a8 <HAL_GPIO_Init+0x2e8>)
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	089b      	lsrs	r3, r3, #2
 80096da:	3302      	adds	r3, #2
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80096e2:	4b37      	ldr	r3, [pc, #220]	; (80097c0 <HAL_GPIO_Init+0x300>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	43db      	mvns	r3, r3
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	4013      	ands	r3, r2
 80096f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009706:	4a2e      	ldr	r2, [pc, #184]	; (80097c0 <HAL_GPIO_Init+0x300>)
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800970c:	4b2c      	ldr	r3, [pc, #176]	; (80097c0 <HAL_GPIO_Init+0x300>)
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	43db      	mvns	r3, r3
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	4013      	ands	r3, r2
 800971a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	4313      	orrs	r3, r2
 800972e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009730:	4a23      	ldr	r2, [pc, #140]	; (80097c0 <HAL_GPIO_Init+0x300>)
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009736:	4b22      	ldr	r3, [pc, #136]	; (80097c0 <HAL_GPIO_Init+0x300>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	43db      	mvns	r3, r3
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	4013      	ands	r3, r2
 8009744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800975a:	4a19      	ldr	r2, [pc, #100]	; (80097c0 <HAL_GPIO_Init+0x300>)
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009760:	4b17      	ldr	r3, [pc, #92]	; (80097c0 <HAL_GPIO_Init+0x300>)
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	43db      	mvns	r3, r3
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	4013      	ands	r3, r2
 800976e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009784:	4a0e      	ldr	r2, [pc, #56]	; (80097c0 <HAL_GPIO_Init+0x300>)
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	3301      	adds	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	2b0f      	cmp	r3, #15
 8009794:	f67f aea2 	bls.w	80094dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009798:	bf00      	nop
 800979a:	3724      	adds	r7, #36	; 0x24
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40023800 	.word	0x40023800
 80097a8:	40013800 	.word	0x40013800
 80097ac:	40020000 	.word	0x40020000
 80097b0:	40020400 	.word	0x40020400
 80097b4:	40020800 	.word	0x40020800
 80097b8:	40020c00 	.word	0x40020c00
 80097bc:	40021000 	.word	0x40021000
 80097c0:	40013c00 	.word	0x40013c00

080097c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	807b      	strh	r3, [r7, #2]
 80097d0:	4613      	mov	r3, r2
 80097d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80097d4:	787b      	ldrb	r3, [r7, #1]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80097da:	887a      	ldrh	r2, [r7, #2]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80097e0:	e003      	b.n	80097ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80097e2:	887b      	ldrh	r3, [r7, #2]
 80097e4:	041a      	lsls	r2, r3, #16
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	619a      	str	r2, [r3, #24]
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	887b      	ldrh	r3, [r7, #2]
 8009808:	401a      	ands	r2, r3
 800980a:	887b      	ldrh	r3, [r7, #2]
 800980c:	429a      	cmp	r2, r3
 800980e:	d104      	bne.n	800981a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009810:	887b      	ldrh	r3, [r7, #2]
 8009812:	041a      	lsls	r2, r3, #16
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009818:	e002      	b.n	8009820 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800981a:	887a      	ldrh	r2, [r7, #2]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	619a      	str	r2, [r3, #24]
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e25b      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d075      	beq.n	8009936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800984a:	4ba3      	ldr	r3, [pc, #652]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f003 030c 	and.w	r3, r3, #12
 8009852:	2b04      	cmp	r3, #4
 8009854:	d00c      	beq.n	8009870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009856:	4ba0      	ldr	r3, [pc, #640]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800985e:	2b08      	cmp	r3, #8
 8009860:	d112      	bne.n	8009888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009862:	4b9d      	ldr	r3, [pc, #628]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800986a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800986e:	d10b      	bne.n	8009888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009870:	4b99      	ldr	r3, [pc, #612]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d05b      	beq.n	8009934 <HAL_RCC_OscConfig+0x108>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d157      	bne.n	8009934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e236      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009890:	d106      	bne.n	80098a0 <HAL_RCC_OscConfig+0x74>
 8009892:	4b91      	ldr	r3, [pc, #580]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a90      	ldr	r2, [pc, #576]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	e01d      	b.n	80098dc <HAL_RCC_OscConfig+0xb0>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098a8:	d10c      	bne.n	80098c4 <HAL_RCC_OscConfig+0x98>
 80098aa:	4b8b      	ldr	r3, [pc, #556]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a8a      	ldr	r2, [pc, #552]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4b88      	ldr	r3, [pc, #544]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a87      	ldr	r2, [pc, #540]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e00b      	b.n	80098dc <HAL_RCC_OscConfig+0xb0>
 80098c4:	4b84      	ldr	r3, [pc, #528]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a83      	ldr	r2, [pc, #524]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	4b81      	ldr	r3, [pc, #516]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a80      	ldr	r2, [pc, #512]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80098d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d013      	beq.n	800990c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e4:	f7ff fcdc 	bl	80092a0 <HAL_GetTick>
 80098e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ea:	e008      	b.n	80098fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098ec:	f7ff fcd8 	bl	80092a0 <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b64      	cmp	r3, #100	; 0x64
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e1fb      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098fe:	4b76      	ldr	r3, [pc, #472]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0f0      	beq.n	80098ec <HAL_RCC_OscConfig+0xc0>
 800990a:	e014      	b.n	8009936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800990c:	f7ff fcc8 	bl	80092a0 <HAL_GetTick>
 8009910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009914:	f7ff fcc4 	bl	80092a0 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b64      	cmp	r3, #100	; 0x64
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e1e7      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009926:	4b6c      	ldr	r3, [pc, #432]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f0      	bne.n	8009914 <HAL_RCC_OscConfig+0xe8>
 8009932:	e000      	b.n	8009936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0302 	and.w	r3, r3, #2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d063      	beq.n	8009a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009942:	4b65      	ldr	r3, [pc, #404]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f003 030c 	and.w	r3, r3, #12
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800994e:	4b62      	ldr	r3, [pc, #392]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009956:	2b08      	cmp	r3, #8
 8009958:	d11c      	bne.n	8009994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800995a:	4b5f      	ldr	r3, [pc, #380]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d116      	bne.n	8009994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009966:	4b5c      	ldr	r3, [pc, #368]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <HAL_RCC_OscConfig+0x152>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d001      	beq.n	800997e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e1bb      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997e:	4b56      	ldr	r3, [pc, #344]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	4952      	ldr	r1, [pc, #328]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 800998e:	4313      	orrs	r3, r2
 8009990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009992:	e03a      	b.n	8009a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d020      	beq.n	80099de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800999c:	4b4f      	ldr	r3, [pc, #316]	; (8009adc <HAL_RCC_OscConfig+0x2b0>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a2:	f7ff fc7d 	bl	80092a0 <HAL_GetTick>
 80099a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099a8:	e008      	b.n	80099bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099aa:	f7ff fc79 	bl	80092a0 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e19c      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099bc:	4b46      	ldr	r3, [pc, #280]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0f0      	beq.n	80099aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c8:	4b43      	ldr	r3, [pc, #268]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	4940      	ldr	r1, [pc, #256]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	600b      	str	r3, [r1, #0]
 80099dc:	e015      	b.n	8009a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099de:	4b3f      	ldr	r3, [pc, #252]	; (8009adc <HAL_RCC_OscConfig+0x2b0>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e4:	f7ff fc5c 	bl	80092a0 <HAL_GetTick>
 80099e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099ea:	e008      	b.n	80099fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099ec:	f7ff fc58 	bl	80092a0 <HAL_GetTick>
 80099f0:	4602      	mov	r2, r0
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d901      	bls.n	80099fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e17b      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099fe:	4b36      	ldr	r3, [pc, #216]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f0      	bne.n	80099ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0308 	and.w	r3, r3, #8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d030      	beq.n	8009a78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d016      	beq.n	8009a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a1e:	4b30      	ldr	r3, [pc, #192]	; (8009ae0 <HAL_RCC_OscConfig+0x2b4>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a24:	f7ff fc3c 	bl	80092a0 <HAL_GetTick>
 8009a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a2a:	e008      	b.n	8009a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a2c:	f7ff fc38 	bl	80092a0 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e15b      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a3e:	4b26      	ldr	r3, [pc, #152]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0f0      	beq.n	8009a2c <HAL_RCC_OscConfig+0x200>
 8009a4a:	e015      	b.n	8009a78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a4c:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <HAL_RCC_OscConfig+0x2b4>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a52:	f7ff fc25 	bl	80092a0 <HAL_GetTick>
 8009a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a58:	e008      	b.n	8009a6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a5a:	f7ff fc21 	bl	80092a0 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d901      	bls.n	8009a6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e144      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a6c:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f0      	bne.n	8009a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80a0 	beq.w	8009bc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a86:	2300      	movs	r3, #0
 8009a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a8a:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10f      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a96:	2300      	movs	r3, #0
 8009a98:	60bb      	str	r3, [r7, #8]
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	4a0e      	ldr	r2, [pc, #56]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <HAL_RCC_OscConfig+0x2ac>)
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aae:	60bb      	str	r3, [r7, #8]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <HAL_RCC_OscConfig+0x2b8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d121      	bne.n	8009b06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <HAL_RCC_OscConfig+0x2b8>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a07      	ldr	r2, [pc, #28]	; (8009ae4 <HAL_RCC_OscConfig+0x2b8>)
 8009ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ace:	f7ff fbe7 	bl	80092a0 <HAL_GetTick>
 8009ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ad4:	e011      	b.n	8009afa <HAL_RCC_OscConfig+0x2ce>
 8009ad6:	bf00      	nop
 8009ad8:	40023800 	.word	0x40023800
 8009adc:	42470000 	.word	0x42470000
 8009ae0:	42470e80 	.word	0x42470e80
 8009ae4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae8:	f7ff fbda 	bl	80092a0 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e0fd      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009afa:	4b81      	ldr	r3, [pc, #516]	; (8009d00 <HAL_RCC_OscConfig+0x4d4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0f0      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d106      	bne.n	8009b1c <HAL_RCC_OscConfig+0x2f0>
 8009b0e:	4b7d      	ldr	r3, [pc, #500]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b12:	4a7c      	ldr	r2, [pc, #496]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b14:	f043 0301 	orr.w	r3, r3, #1
 8009b18:	6713      	str	r3, [r2, #112]	; 0x70
 8009b1a:	e01c      	b.n	8009b56 <HAL_RCC_OscConfig+0x32a>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	2b05      	cmp	r3, #5
 8009b22:	d10c      	bne.n	8009b3e <HAL_RCC_OscConfig+0x312>
 8009b24:	4b77      	ldr	r3, [pc, #476]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b28:	4a76      	ldr	r2, [pc, #472]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b2a:	f043 0304 	orr.w	r3, r3, #4
 8009b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b30:	4b74      	ldr	r3, [pc, #464]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b34:	4a73      	ldr	r2, [pc, #460]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b36:	f043 0301 	orr.w	r3, r3, #1
 8009b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b3c:	e00b      	b.n	8009b56 <HAL_RCC_OscConfig+0x32a>
 8009b3e:	4b71      	ldr	r3, [pc, #452]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b42:	4a70      	ldr	r2, [pc, #448]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	6713      	str	r3, [r2, #112]	; 0x70
 8009b4a:	4b6e      	ldr	r3, [pc, #440]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a6d      	ldr	r2, [pc, #436]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b50:	f023 0304 	bic.w	r3, r3, #4
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d015      	beq.n	8009b8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b5e:	f7ff fb9f 	bl	80092a0 <HAL_GetTick>
 8009b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b64:	e00a      	b.n	8009b7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b66:	f7ff fb9b 	bl	80092a0 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d901      	bls.n	8009b7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e0bc      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b7c:	4b61      	ldr	r3, [pc, #388]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0ee      	beq.n	8009b66 <HAL_RCC_OscConfig+0x33a>
 8009b88:	e014      	b.n	8009bb4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b8a:	f7ff fb89 	bl	80092a0 <HAL_GetTick>
 8009b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b90:	e00a      	b.n	8009ba8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b92:	f7ff fb85 	bl	80092a0 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d901      	bls.n	8009ba8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e0a6      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ba8:	4b56      	ldr	r3, [pc, #344]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1ee      	bne.n	8009b92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d105      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bba:	4b52      	ldr	r3, [pc, #328]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	4a51      	ldr	r2, [pc, #324]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 8092 	beq.w	8009cf4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bd0:	4b4c      	ldr	r3, [pc, #304]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f003 030c 	and.w	r3, r3, #12
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d05c      	beq.n	8009c96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d141      	bne.n	8009c68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009be4:	4b48      	ldr	r3, [pc, #288]	; (8009d08 <HAL_RCC_OscConfig+0x4dc>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bea:	f7ff fb59 	bl	80092a0 <HAL_GetTick>
 8009bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bf0:	e008      	b.n	8009c04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bf2:	f7ff fb55 	bl	80092a0 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e078      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c04:	4b3f      	ldr	r3, [pc, #252]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1f0      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1e:	019b      	lsls	r3, r3, #6
 8009c20:	431a      	orrs	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c26:	085b      	lsrs	r3, r3, #1
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	061b      	lsls	r3, r3, #24
 8009c34:	4933      	ldr	r1, [pc, #204]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c3a:	4b33      	ldr	r3, [pc, #204]	; (8009d08 <HAL_RCC_OscConfig+0x4dc>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c40:	f7ff fb2e 	bl	80092a0 <HAL_GetTick>
 8009c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c46:	e008      	b.n	8009c5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c48:	f7ff fb2a 	bl	80092a0 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d901      	bls.n	8009c5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e04d      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c5a:	4b2a      	ldr	r3, [pc, #168]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0f0      	beq.n	8009c48 <HAL_RCC_OscConfig+0x41c>
 8009c66:	e045      	b.n	8009cf4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c68:	4b27      	ldr	r3, [pc, #156]	; (8009d08 <HAL_RCC_OscConfig+0x4dc>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c6e:	f7ff fb17 	bl	80092a0 <HAL_GetTick>
 8009c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c74:	e008      	b.n	8009c88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c76:	f7ff fb13 	bl	80092a0 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d901      	bls.n	8009c88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e036      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c88:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1f0      	bne.n	8009c76 <HAL_RCC_OscConfig+0x44a>
 8009c94:	e02e      	b.n	8009cf4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e029      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ca2:	4b18      	ldr	r3, [pc, #96]	; (8009d04 <HAL_RCC_OscConfig+0x4d8>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d11c      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d115      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cca:	4013      	ands	r3, r2
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d10d      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d106      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d001      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	40007000 	.word	0x40007000
 8009d04:	40023800 	.word	0x40023800
 8009d08:	42470060 	.word	0x42470060

08009d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e0cc      	b.n	8009eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d20:	4b68      	ldr	r3, [pc, #416]	; (8009ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 030f 	and.w	r3, r3, #15
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d90c      	bls.n	8009d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d2e:	4b65      	ldr	r3, [pc, #404]	; (8009ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d36:	4b63      	ldr	r3, [pc, #396]	; (8009ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d001      	beq.n	8009d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e0b8      	b.n	8009eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0302 	and.w	r3, r3, #2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d020      	beq.n	8009d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d005      	beq.n	8009d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d60:	4b59      	ldr	r3, [pc, #356]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	4a58      	ldr	r2, [pc, #352]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0308 	and.w	r3, r3, #8
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d78:	4b53      	ldr	r3, [pc, #332]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	4a52      	ldr	r2, [pc, #328]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d84:	4b50      	ldr	r3, [pc, #320]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	494d      	ldr	r1, [pc, #308]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d044      	beq.n	8009e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d107      	bne.n	8009dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009daa:	4b47      	ldr	r3, [pc, #284]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d119      	bne.n	8009dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e07f      	b.n	8009eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d003      	beq.n	8009dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d107      	bne.n	8009dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dca:	4b3f      	ldr	r3, [pc, #252]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e06f      	b.n	8009eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dda:	4b3b      	ldr	r3, [pc, #236]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e067      	b.n	8009eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009dea:	4b37      	ldr	r3, [pc, #220]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f023 0203 	bic.w	r2, r3, #3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	4934      	ldr	r1, [pc, #208]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009dfc:	f7ff fa50 	bl	80092a0 <HAL_GetTick>
 8009e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e02:	e00a      	b.n	8009e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e04:	f7ff fa4c 	bl	80092a0 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d901      	bls.n	8009e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e04f      	b.n	8009eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e1a:	4b2b      	ldr	r3, [pc, #172]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f003 020c 	and.w	r2, r3, #12
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d1eb      	bne.n	8009e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e2c:	4b25      	ldr	r3, [pc, #148]	; (8009ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 030f 	and.w	r3, r3, #15
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d20c      	bcs.n	8009e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e3a:	4b22      	ldr	r3, [pc, #136]	; (8009ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e42:	4b20      	ldr	r3, [pc, #128]	; (8009ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 030f 	and.w	r3, r3, #15
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d001      	beq.n	8009e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e032      	b.n	8009eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d008      	beq.n	8009e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e60:	4b19      	ldr	r3, [pc, #100]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	4916      	ldr	r1, [pc, #88]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0308 	and.w	r3, r3, #8
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e7e:	4b12      	ldr	r3, [pc, #72]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	490e      	ldr	r1, [pc, #56]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e92:	f000 f821 	bl	8009ed8 <HAL_RCC_GetSysClockFreq>
 8009e96:	4601      	mov	r1, r0
 8009e98:	4b0b      	ldr	r3, [pc, #44]	; (8009ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	091b      	lsrs	r3, r3, #4
 8009e9e:	f003 030f 	and.w	r3, r3, #15
 8009ea2:	4a0a      	ldr	r2, [pc, #40]	; (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009ea4:	5cd3      	ldrb	r3, [r2, r3]
 8009ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8009eaa:	4a09      	ldr	r2, [pc, #36]	; (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff f8e4 	bl	8009080 <HAL_InitTick>

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	40023c00 	.word	0x40023c00
 8009ec8:	40023800 	.word	0x40023800
 8009ecc:	0801149c 	.word	0x0801149c
 8009ed0:	20000000 	.word	0x20000000
 8009ed4:	20000004 	.word	0x20000004

08009ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	607b      	str	r3, [r7, #4]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009eee:	4b63      	ldr	r3, [pc, #396]	; (800a07c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 030c 	and.w	r3, r3, #12
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d007      	beq.n	8009f0a <HAL_RCC_GetSysClockFreq+0x32>
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	d008      	beq.n	8009f10 <HAL_RCC_GetSysClockFreq+0x38>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f040 80b4 	bne.w	800a06c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f04:	4b5e      	ldr	r3, [pc, #376]	; (800a080 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009f06:	60bb      	str	r3, [r7, #8]
       break;
 8009f08:	e0b3      	b.n	800a072 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f0a:	4b5d      	ldr	r3, [pc, #372]	; (800a080 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009f0c:	60bb      	str	r3, [r7, #8]
      break;
 8009f0e:	e0b0      	b.n	800a072 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f10:	4b5a      	ldr	r3, [pc, #360]	; (800a07c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f1a:	4b58      	ldr	r3, [pc, #352]	; (800a07c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d04a      	beq.n	8009fbc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f26:	4b55      	ldr	r3, [pc, #340]	; (800a07c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	099b      	lsrs	r3, r3, #6
 8009f2c:	f04f 0400 	mov.w	r4, #0
 8009f30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009f34:	f04f 0200 	mov.w	r2, #0
 8009f38:	ea03 0501 	and.w	r5, r3, r1
 8009f3c:	ea04 0602 	and.w	r6, r4, r2
 8009f40:	4629      	mov	r1, r5
 8009f42:	4632      	mov	r2, r6
 8009f44:	f04f 0300 	mov.w	r3, #0
 8009f48:	f04f 0400 	mov.w	r4, #0
 8009f4c:	0154      	lsls	r4, r2, #5
 8009f4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009f52:	014b      	lsls	r3, r1, #5
 8009f54:	4619      	mov	r1, r3
 8009f56:	4622      	mov	r2, r4
 8009f58:	1b49      	subs	r1, r1, r5
 8009f5a:	eb62 0206 	sbc.w	r2, r2, r6
 8009f5e:	f04f 0300 	mov.w	r3, #0
 8009f62:	f04f 0400 	mov.w	r4, #0
 8009f66:	0194      	lsls	r4, r2, #6
 8009f68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009f6c:	018b      	lsls	r3, r1, #6
 8009f6e:	1a5b      	subs	r3, r3, r1
 8009f70:	eb64 0402 	sbc.w	r4, r4, r2
 8009f74:	f04f 0100 	mov.w	r1, #0
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	00e2      	lsls	r2, r4, #3
 8009f7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f82:	00d9      	lsls	r1, r3, #3
 8009f84:	460b      	mov	r3, r1
 8009f86:	4614      	mov	r4, r2
 8009f88:	195b      	adds	r3, r3, r5
 8009f8a:	eb44 0406 	adc.w	r4, r4, r6
 8009f8e:	f04f 0100 	mov.w	r1, #0
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	02a2      	lsls	r2, r4, #10
 8009f98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f9c:	0299      	lsls	r1, r3, #10
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4614      	mov	r4, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f04f 0400 	mov.w	r4, #0
 8009fac:	461a      	mov	r2, r3
 8009fae:	4623      	mov	r3, r4
 8009fb0:	f7fe f916 	bl	80081e0 <__aeabi_uldivmod>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	e049      	b.n	800a050 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fbc:	4b2f      	ldr	r3, [pc, #188]	; (800a07c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	099b      	lsrs	r3, r3, #6
 8009fc2:	f04f 0400 	mov.w	r4, #0
 8009fc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009fca:	f04f 0200 	mov.w	r2, #0
 8009fce:	ea03 0501 	and.w	r5, r3, r1
 8009fd2:	ea04 0602 	and.w	r6, r4, r2
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4632      	mov	r2, r6
 8009fda:	f04f 0300 	mov.w	r3, #0
 8009fde:	f04f 0400 	mov.w	r4, #0
 8009fe2:	0154      	lsls	r4, r2, #5
 8009fe4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009fe8:	014b      	lsls	r3, r1, #5
 8009fea:	4619      	mov	r1, r3
 8009fec:	4622      	mov	r2, r4
 8009fee:	1b49      	subs	r1, r1, r5
 8009ff0:	eb62 0206 	sbc.w	r2, r2, r6
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	f04f 0400 	mov.w	r4, #0
 8009ffc:	0194      	lsls	r4, r2, #6
 8009ffe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a002:	018b      	lsls	r3, r1, #6
 800a004:	1a5b      	subs	r3, r3, r1
 800a006:	eb64 0402 	sbc.w	r4, r4, r2
 800a00a:	f04f 0100 	mov.w	r1, #0
 800a00e:	f04f 0200 	mov.w	r2, #0
 800a012:	00e2      	lsls	r2, r4, #3
 800a014:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a018:	00d9      	lsls	r1, r3, #3
 800a01a:	460b      	mov	r3, r1
 800a01c:	4614      	mov	r4, r2
 800a01e:	195b      	adds	r3, r3, r5
 800a020:	eb44 0406 	adc.w	r4, r4, r6
 800a024:	f04f 0100 	mov.w	r1, #0
 800a028:	f04f 0200 	mov.w	r2, #0
 800a02c:	02a2      	lsls	r2, r4, #10
 800a02e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a032:	0299      	lsls	r1, r3, #10
 800a034:	460b      	mov	r3, r1
 800a036:	4614      	mov	r4, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	4621      	mov	r1, r4
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f04f 0400 	mov.w	r4, #0
 800a042:	461a      	mov	r2, r3
 800a044:	4623      	mov	r3, r4
 800a046:	f7fe f8cb 	bl	80081e0 <__aeabi_uldivmod>
 800a04a:	4603      	mov	r3, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a050:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	0c1b      	lsrs	r3, r3, #16
 800a056:	f003 0303 	and.w	r3, r3, #3
 800a05a:	3301      	adds	r3, #1
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	fbb2 f3f3 	udiv	r3, r2, r3
 800a068:	60bb      	str	r3, [r7, #8]
      break;
 800a06a:	e002      	b.n	800a072 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a06e:	60bb      	str	r3, [r7, #8]
      break;
 800a070:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a072:	68bb      	ldr	r3, [r7, #8]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a07c:	40023800 	.word	0x40023800
 800a080:	00f42400 	.word	0x00f42400

0800a084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a088:	4b03      	ldr	r3, [pc, #12]	; (800a098 <HAL_RCC_GetHCLKFreq+0x14>)
 800a08a:	681b      	ldr	r3, [r3, #0]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	20000000 	.word	0x20000000

0800a09c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0a0:	f7ff fff0 	bl	800a084 <HAL_RCC_GetHCLKFreq>
 800a0a4:	4601      	mov	r1, r0
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	0a9b      	lsrs	r3, r3, #10
 800a0ac:	f003 0307 	and.w	r3, r3, #7
 800a0b0:	4a03      	ldr	r2, [pc, #12]	; (800a0c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0b2:	5cd3      	ldrb	r3, [r2, r3]
 800a0b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40023800 	.word	0x40023800
 800a0c0:	080114ac 	.word	0x080114ac

0800a0c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0c8:	f7ff ffdc 	bl	800a084 <HAL_RCC_GetHCLKFreq>
 800a0cc:	4601      	mov	r1, r0
 800a0ce:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	0b5b      	lsrs	r3, r3, #13
 800a0d4:	f003 0307 	and.w	r3, r3, #7
 800a0d8:	4a03      	ldr	r2, [pc, #12]	; (800a0e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0da:	5cd3      	ldrb	r3, [r2, r3]
 800a0dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	080114ac 	.word	0x080114ac

0800a0ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	220f      	movs	r2, #15
 800a0fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a0fc:	4b12      	ldr	r3, [pc, #72]	; (800a148 <HAL_RCC_GetClockConfig+0x5c>)
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f003 0203 	and.w	r2, r3, #3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a108:	4b0f      	ldr	r3, [pc, #60]	; (800a148 <HAL_RCC_GetClockConfig+0x5c>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a114:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <HAL_RCC_GetClockConfig+0x5c>)
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a120:	4b09      	ldr	r3, [pc, #36]	; (800a148 <HAL_RCC_GetClockConfig+0x5c>)
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	08db      	lsrs	r3, r3, #3
 800a126:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a12e:	4b07      	ldr	r3, [pc, #28]	; (800a14c <HAL_RCC_GetClockConfig+0x60>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 020f 	and.w	r2, r3, #15
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	601a      	str	r2, [r3, #0]
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	40023800 	.word	0x40023800
 800a14c:	40023c00 	.word	0x40023c00

0800a150 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a156:	f7ff f8a3 	bl	80092a0 <HAL_GetTick>
 800a15a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a15c:	4b5d      	ldr	r3, [pc, #372]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a5c      	ldr	r2, [pc, #368]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a162:	f043 0301 	orr.w	r3, r3, #1
 800a166:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a168:	e008      	b.n	800a17c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a16a:	f7ff f899 	bl	80092a0 <HAL_GetTick>
 800a16e:	4602      	mov	r2, r0
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	2b02      	cmp	r3, #2
 800a176:	d901      	bls.n	800a17c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e0a7      	b.n	800a2cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a17c:	4b55      	ldr	r3, [pc, #340]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0302 	and.w	r3, r3, #2
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0f0      	beq.n	800a16a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800a188:	4b52      	ldr	r3, [pc, #328]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a51      	ldr	r2, [pc, #324]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a192:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a194:	f7ff f884 	bl	80092a0 <HAL_GetTick>
 800a198:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800a19a:	4b4e      	ldr	r3, [pc, #312]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800a1a0:	e00a      	b.n	800a1b8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1a2:	f7ff f87d 	bl	80092a0 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e089      	b.n	800a2cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800a1b8:	4b46      	ldr	r3, [pc, #280]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f003 030c 	and.w	r3, r3, #12
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ee      	bne.n	800a1a2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a1c4:	f7ff f86c 	bl	80092a0 <HAL_GetTick>
 800a1c8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800a1ca:	4b42      	ldr	r3, [pc, #264]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a41      	ldr	r2, [pc, #260]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a1d0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800a1d4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a1d6:	e008      	b.n	800a1ea <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1d8:	f7ff f862 	bl	80092a0 <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	2b64      	cmp	r3, #100	; 0x64
 800a1e4:	d901      	bls.n	800a1ea <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e070      	b.n	800a2cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a1ea:	4b3a      	ldr	r3, [pc, #232]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1f0      	bne.n	800a1d8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a1f6:	f7ff f853 	bl	80092a0 <HAL_GetTick>
 800a1fa:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a1fc:	4b35      	ldr	r3, [pc, #212]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a34      	ldr	r2, [pc, #208]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a206:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a208:	e008      	b.n	800a21c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a20a:	f7ff f849 	bl	80092a0 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e057      	b.n	800a2cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a21c:	4b2d      	ldr	r3, [pc, #180]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1f0      	bne.n	800a20a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a228:	f7ff f83a 	bl	80092a0 <HAL_GetTick>
 800a22c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800a22e:	4b29      	ldr	r3, [pc, #164]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a28      	ldr	r2, [pc, #160]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a238:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800a23a:	e008      	b.n	800a24e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a23c:	f7ff f830 	bl	80092a0 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d901      	bls.n	800a24e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e03e      	b.n	800a2cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800a24e:	4b21      	ldr	r3, [pc, #132]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1f0      	bne.n	800a23c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800a25a:	4b1e      	ldr	r3, [pc, #120]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a25c:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <HAL_RCC_DeInit+0x188>)
 800a25e:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800a260:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a262:	4a1e      	ldr	r2, [pc, #120]	; (800a2dc <HAL_RCC_DeInit+0x18c>)
 800a264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800a268:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	4a19      	ldr	r2, [pc, #100]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a26e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a272:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800a274:	4b17      	ldr	r3, [pc, #92]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	4a16      	ldr	r2, [pc, #88]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a27a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a27e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800a280:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	4a13      	ldr	r2, [pc, #76]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a286:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800a28a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800a28c:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	4a10      	ldr	r2, [pc, #64]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a296:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800a298:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a29c:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a29e:	f023 0301 	bic.w	r3, r3, #1
 800a2a2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800a2a4:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2a8:	4a0a      	ldr	r2, [pc, #40]	; (800a2d4 <HAL_RCC_DeInit+0x184>)
 800a2aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2ae:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <HAL_RCC_DeInit+0x190>)
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <HAL_RCC_DeInit+0x194>)
 800a2b4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <HAL_RCC_DeInit+0x198>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe fee0 	bl	8009080 <HAL_InitTick>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
  }
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	40023800 	.word	0x40023800
 800a2d8:	04003010 	.word	0x04003010
 800a2dc:	20003010 	.word	0x20003010
 800a2e0:	20000000 	.word	0x20000000
 800a2e4:	00f42400 	.word	0x00f42400
 800a2e8:	20000004 	.word	0x20000004

0800a2ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e056      	b.n	800a3ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7fe fdeb 	bl	8008ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2202      	movs	r2, #2
 800a322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a334:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	ea42 0103 	orr.w	r1, r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	0c1b      	lsrs	r3, r3, #16
 800a37c:	f003 0104 	and.w	r1, r3, #4
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69da      	ldr	r2, [r3, #28]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a39a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_SPI_TransmitReceive_IT+0x20>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e075      	b.n	800a4c0 <HAL_SPI_TransmitReceive_IT+0x10c>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3ea:	7dbb      	ldrb	r3, [r7, #22]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d00d      	beq.n	800a40c <HAL_SPI_TransmitReceive_IT+0x58>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3f6:	d106      	bne.n	800a406 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <HAL_SPI_TransmitReceive_IT+0x52>
 800a400:	7dbb      	ldrb	r3, [r7, #22]
 800a402:	2b04      	cmp	r3, #4
 800a404:	d002      	beq.n	800a40c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800a406:	2302      	movs	r3, #2
 800a408:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a40a:	e054      	b.n	800a4b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d005      	beq.n	800a41e <HAL_SPI_TransmitReceive_IT+0x6a>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <HAL_SPI_TransmitReceive_IT+0x6a>
 800a418:	887b      	ldrh	r3, [r7, #2]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d102      	bne.n	800a424 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a422:	e048      	b.n	800a4b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d003      	beq.n	800a438 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2205      	movs	r2, #5
 800a434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	887a      	ldrh	r2, [r7, #2]
 800a448:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	887a      	ldrh	r2, [r7, #2]
 800a44e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	887a      	ldrh	r2, [r7, #2]
 800a45a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	887a      	ldrh	r2, [r7, #2]
 800a460:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4a17      	ldr	r2, [pc, #92]	; (800a4cc <HAL_SPI_TransmitReceive_IT+0x118>)
 800a46e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4a17      	ldr	r2, [pc, #92]	; (800a4d0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800a474:	645a      	str	r2, [r3, #68]	; 0x44
 800a476:	e005      	b.n	800a484 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4a16      	ldr	r2, [pc, #88]	; (800a4d4 <HAL_SPI_TransmitReceive_IT+0x120>)
 800a47c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	4a15      	ldr	r2, [pc, #84]	; (800a4d8 <HAL_SPI_TransmitReceive_IT+0x124>)
 800a482:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800a492:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49e:	2b40      	cmp	r3, #64	; 0x40
 800a4a0:	d008      	beq.n	800a4b4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e000      	b.n	800a4b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800a4b4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	371c      	adds	r7, #28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	0800a7f1 	.word	0x0800a7f1
 800a4d0:	0800a851 	.word	0x0800a851
 800a4d4:	0800a72d 	.word	0x0800a72d
 800a4d8:	0800a791 	.word	0x0800a791

0800a4dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	099b      	lsrs	r3, r3, #6
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10f      	bne.n	800a520 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00a      	beq.n	800a520 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	099b      	lsrs	r3, r3, #6
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d004      	beq.n	800a520 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	4798      	blx	r3
    return;
 800a51e:	e0d8      	b.n	800a6d2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	085b      	lsrs	r3, r3, #1
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00a      	beq.n	800a542 <HAL_SPI_IRQHandler+0x66>
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	09db      	lsrs	r3, r3, #7
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
    return;
 800a540:	e0c7      	b.n	800a6d2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	095b      	lsrs	r3, r3, #5
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10c      	bne.n	800a568 <HAL_SPI_IRQHandler+0x8c>
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	099b      	lsrs	r3, r3, #6
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	0a1b      	lsrs	r3, r3, #8
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 80b5 	beq.w	800a6d2 <HAL_SPI_IRQHandler+0x1f6>
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	095b      	lsrs	r3, r3, #5
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 80ae 	beq.w	800a6d2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	099b      	lsrs	r3, r3, #6
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d023      	beq.n	800a5ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d011      	beq.n	800a5b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a592:	f043 0204 	orr.w	r2, r3, #4
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a59a:	2300      	movs	r3, #0
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	617b      	str	r3, [r7, #20]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	617b      	str	r3, [r7, #20]
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	e00b      	b.n	800a5ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	613b      	str	r3, [r7, #16]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	613b      	str	r3, [r7, #16]
 800a5c6:	693b      	ldr	r3, [r7, #16]
        return;
 800a5c8:	e083      	b.n	800a6d2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	095b      	lsrs	r3, r3, #5
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d014      	beq.n	800a600 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5da:	f043 0201 	orr.w	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00c      	beq.n	800a626 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a610:	f043 0208 	orr.w	r2, r3, #8
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a618:	2300      	movs	r3, #0
 800a61a:	60bb      	str	r3, [r7, #8]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	60bb      	str	r3, [r7, #8]
 800a624:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d050      	beq.n	800a6d0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a63c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	f003 0302 	and.w	r3, r3, #2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d104      	bne.n	800a65a <HAL_SPI_IRQHandler+0x17e>
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d034      	beq.n	800a6c4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 0203 	bic.w	r2, r2, #3
 800a668:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d011      	beq.n	800a696 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a676:	4a18      	ldr	r2, [pc, #96]	; (800a6d8 <HAL_SPI_IRQHandler+0x1fc>)
 800a678:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fefc 	bl	800947c <HAL_DMA_Abort_IT>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d005      	beq.n	800a696 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d016      	beq.n	800a6cc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6a2:	4a0d      	ldr	r2, [pc, #52]	; (800a6d8 <HAL_SPI_IRQHandler+0x1fc>)
 800a6a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe fee6 	bl	800947c <HAL_DMA_Abort_IT>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a6c2:	e003      	b.n	800a6cc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f813 	bl	800a6f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a6ca:	e000      	b.n	800a6ce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a6cc:	bf00      	nop
    return;
 800a6ce:	bf00      	nop
 800a6d0:	bf00      	nop
  }
}
 800a6d2:	3720      	adds	r7, #32
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	0800a705 	.word	0x0800a705

0800a6dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff ffe6 	bl	800a6f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a724:	bf00      	nop
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f103 020c 	add.w	r2, r3, #12
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	7812      	ldrb	r2, [r2, #0]
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a754:	b29b      	uxth	r3, r3
 800a756:	3b01      	subs	r3, #1
 800a758:	b29a      	uxth	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a762:	b29b      	uxth	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10f      	bne.n	800a788 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a776:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f940 	bl	800aa08 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a788:	bf00      	nop
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	330c      	adds	r3, #12
 800a7a2:	7812      	ldrb	r2, [r2, #0]
 800a7a4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10f      	bne.n	800a7e8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7d6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d102      	bne.n	800a7e8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f910 	bl	800aa08 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	b292      	uxth	r2, r2
 800a804:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	1c9a      	adds	r2, r3, #2
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a814:	b29b      	uxth	r3, r3
 800a816:	3b01      	subs	r3, #1
 800a818:	b29a      	uxth	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a822:	b29b      	uxth	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10f      	bne.n	800a848 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a836:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f8e0 	bl	800aa08 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	881a      	ldrh	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a868:	1c9a      	adds	r2, r3, #2
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a872:	b29b      	uxth	r3, r3
 800a874:	3b01      	subs	r3, #1
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a880:	b29b      	uxth	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10f      	bne.n	800a8a6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a894:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d102      	bne.n	800a8a6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f8b1 	bl	800aa08 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a8a6:	bf00      	nop
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	603b      	str	r3, [r7, #0]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8be:	e04c      	b.n	800a95a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8c6:	d048      	beq.n	800a95a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a8c8:	f7fe fcea 	bl	80092a0 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d902      	bls.n	800a8de <SPI_WaitFlagStateUntilTimeout+0x30>
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d13d      	bne.n	800a95a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8f6:	d111      	bne.n	800a91c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a900:	d004      	beq.n	800a90c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a90a:	d107      	bne.n	800a91c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a91a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a924:	d10f      	bne.n	800a946 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e00f      	b.n	800a97a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689a      	ldr	r2, [r3, #8]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	4013      	ands	r3, r2
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	429a      	cmp	r2, r3
 800a968:	bf0c      	ite	eq
 800a96a:	2301      	moveq	r3, #1
 800a96c:	2300      	movne	r3, #0
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	461a      	mov	r2, r3
 800a972:	79fb      	ldrb	r3, [r7, #7]
 800a974:	429a      	cmp	r2, r3
 800a976:	d1a3      	bne.n	800a8c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af02      	add	r7, sp, #8
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a990:	4b1b      	ldr	r3, [pc, #108]	; (800aa00 <SPI_EndRxTxTransaction+0x7c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a1b      	ldr	r2, [pc, #108]	; (800aa04 <SPI_EndRxTxTransaction+0x80>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	0d5b      	lsrs	r3, r3, #21
 800a99c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9a0:	fb02 f303 	mul.w	r3, r2, r3
 800a9a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9ae:	d112      	bne.n	800a9d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2180      	movs	r1, #128	; 0x80
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f7ff ff77 	bl	800a8ae <SPI_WaitFlagStateUntilTimeout>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d016      	beq.n	800a9f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ca:	f043 0220 	orr.w	r2, r3, #32
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e00f      	b.n	800a9f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ec:	2b80      	cmp	r3, #128	; 0x80
 800a9ee:	d0f2      	beq.n	800a9d6 <SPI_EndRxTxTransaction+0x52>
 800a9f0:	e000      	b.n	800a9f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800a9f2:	bf00      	nop
  }

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000000 	.word	0x20000000
 800aa04:	165e9f81 	.word	0x165e9f81

0800aa08 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800aa10:	4b35      	ldr	r3, [pc, #212]	; (800aae8 <SPI_CloseRxTx_ISR+0xe0>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a35      	ldr	r2, [pc, #212]	; (800aaec <SPI_CloseRxTx_ISR+0xe4>)
 800aa16:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1a:	0a5b      	lsrs	r3, r3, #9
 800aa1c:	2264      	movs	r2, #100	; 0x64
 800aa1e:	fb02 f303 	mul.w	r3, r2, r3
 800aa22:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aa24:	f7fe fc3c 	bl	80092a0 <HAL_GetTick>
 800aa28:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f022 0220 	bic.w	r2, r2, #32
 800aa38:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d106      	bne.n	800aa4e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa44:	f043 0220 	orr.w	r2, r3, #32
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa4c:	e009      	b.n	800aa62 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0eb      	beq.n	800aa3a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	2164      	movs	r1, #100	; 0x64
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7ff ff8c 	bl	800a984 <SPI_EndRxTxTransaction>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa76:	f043 0220 	orr.w	r2, r3, #32
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10a      	bne.n	800aa9c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d115      	bne.n	800aad0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d107      	bne.n	800aac0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff fe0f 	bl	800a6dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800aabe:	e00e      	b.n	800aade <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7fd ff51 	bl	8008970 <HAL_SPI_TxRxCpltCallback>
}
 800aace:	e006      	b.n	800aade <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fe09 	bl	800a6f0 <HAL_SPI_ErrorCallback>
}
 800aade:	bf00      	nop
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20000000 	.word	0x20000000
 800aaec:	057619f1 	.word	0x057619f1

0800aaf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e01d      	b.n	800ab3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7fe fa3c 	bl	8008f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f000 fa40 	bl	800afb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f042 0201 	orr.w	r2, r2, #1
 800ab5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f003 0307 	and.w	r3, r3, #7
 800ab68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b06      	cmp	r3, #6
 800ab6e:	d007      	beq.n	800ab80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0201 	orr.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f022 0201 	bic.w	r2, r2, #1
 800aba4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6a1a      	ldr	r2, [r3, #32]
 800abac:	f241 1311 	movw	r3, #4369	; 0x1111
 800abb0:	4013      	ands	r3, r2
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10f      	bne.n	800abd6 <HAL_TIM_Base_Stop_IT+0x48>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6a1a      	ldr	r2, [r3, #32]
 800abbc:	f240 4344 	movw	r3, #1092	; 0x444
 800abc0:	4013      	ands	r3, r2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d107      	bne.n	800abd6 <HAL_TIM_Base_Stop_IT+0x48>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 0201 	bic.w	r2, r2, #1
 800abd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d122      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	f003 0302 	and.w	r3, r3, #2
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d11b      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f06f 0202 	mvn.w	r2, #2
 800ac10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f9a5 	bl	800af76 <HAL_TIM_IC_CaptureCallback>
 800ac2c:	e005      	b.n	800ac3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f997 	bl	800af62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f9a8 	bl	800af8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f003 0304 	and.w	r3, r3, #4
 800ac4a:	2b04      	cmp	r3, #4
 800ac4c:	d122      	bne.n	800ac94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d11b      	bne.n	800ac94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f06f 0204 	mvn.w	r2, #4
 800ac64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f97b 	bl	800af76 <HAL_TIM_IC_CaptureCallback>
 800ac80:	e005      	b.n	800ac8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f96d 	bl	800af62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f97e 	bl	800af8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	f003 0308 	and.w	r3, r3, #8
 800ac9e:	2b08      	cmp	r3, #8
 800aca0:	d122      	bne.n	800ace8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f003 0308 	and.w	r3, r3, #8
 800acac:	2b08      	cmp	r3, #8
 800acae:	d11b      	bne.n	800ace8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f06f 0208 	mvn.w	r2, #8
 800acb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2204      	movs	r2, #4
 800acbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	f003 0303 	and.w	r3, r3, #3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f951 	bl	800af76 <HAL_TIM_IC_CaptureCallback>
 800acd4:	e005      	b.n	800ace2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f943 	bl	800af62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f954 	bl	800af8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	f003 0310 	and.w	r3, r3, #16
 800acf2:	2b10      	cmp	r3, #16
 800acf4:	d122      	bne.n	800ad3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	f003 0310 	and.w	r3, r3, #16
 800ad00:	2b10      	cmp	r3, #16
 800ad02:	d11b      	bne.n	800ad3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f06f 0210 	mvn.w	r2, #16
 800ad0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2208      	movs	r2, #8
 800ad12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f927 	bl	800af76 <HAL_TIM_IC_CaptureCallback>
 800ad28:	e005      	b.n	800ad36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f919 	bl	800af62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f92a 	bl	800af8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d10e      	bne.n	800ad68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d107      	bne.n	800ad68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f06f 0201 	mvn.w	r2, #1
 800ad60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7fe f856 	bl	8008e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad72:	2b80      	cmp	r3, #128	; 0x80
 800ad74:	d10e      	bne.n	800ad94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad80:	2b80      	cmp	r3, #128	; 0x80
 800ad82:	d107      	bne.n	800ad94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 faa2 	bl	800b2d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	d10e      	bne.n	800adc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adac:	2b40      	cmp	r3, #64	; 0x40
 800adae:	d107      	bne.n	800adc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f8ef 	bl	800af9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b20      	cmp	r3, #32
 800adcc:	d10e      	bne.n	800adec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	f003 0320 	and.w	r3, r3, #32
 800add8:	2b20      	cmp	r3, #32
 800adda:	d107      	bne.n	800adec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f06f 0220 	mvn.w	r2, #32
 800ade4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa6c 	bl	800b2c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d101      	bne.n	800ae0c <HAL_TIM_ConfigClockSource+0x18>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e0a6      	b.n	800af5a <HAL_TIM_ConfigClockSource+0x166>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b40      	cmp	r3, #64	; 0x40
 800ae42:	d067      	beq.n	800af14 <HAL_TIM_ConfigClockSource+0x120>
 800ae44:	2b40      	cmp	r3, #64	; 0x40
 800ae46:	d80b      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x6c>
 800ae48:	2b10      	cmp	r3, #16
 800ae4a:	d073      	beq.n	800af34 <HAL_TIM_ConfigClockSource+0x140>
 800ae4c:	2b10      	cmp	r3, #16
 800ae4e:	d802      	bhi.n	800ae56 <HAL_TIM_ConfigClockSource+0x62>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d06f      	beq.n	800af34 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ae54:	e078      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d06c      	beq.n	800af34 <HAL_TIM_ConfigClockSource+0x140>
 800ae5a:	2b30      	cmp	r3, #48	; 0x30
 800ae5c:	d06a      	beq.n	800af34 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ae5e:	e073      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ae60:	2b70      	cmp	r3, #112	; 0x70
 800ae62:	d00d      	beq.n	800ae80 <HAL_TIM_ConfigClockSource+0x8c>
 800ae64:	2b70      	cmp	r3, #112	; 0x70
 800ae66:	d804      	bhi.n	800ae72 <HAL_TIM_ConfigClockSource+0x7e>
 800ae68:	2b50      	cmp	r3, #80	; 0x50
 800ae6a:	d033      	beq.n	800aed4 <HAL_TIM_ConfigClockSource+0xe0>
 800ae6c:	2b60      	cmp	r3, #96	; 0x60
 800ae6e:	d041      	beq.n	800aef4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ae70:	e06a      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ae72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae76:	d066      	beq.n	800af46 <HAL_TIM_ConfigClockSource+0x152>
 800ae78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae7c:	d017      	beq.n	800aeae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ae7e:	e063      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	6899      	ldr	r1, [r3, #8]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	f000 f98a 	bl	800b1a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aea2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	609a      	str	r2, [r3, #8]
      break;
 800aeac:	e04c      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	6899      	ldr	r1, [r3, #8]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	f000 f973 	bl	800b1a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	689a      	ldr	r2, [r3, #8]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aed0:	609a      	str	r2, [r3, #8]
      break;
 800aed2:	e039      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	6859      	ldr	r1, [r3, #4]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	461a      	mov	r2, r3
 800aee2:	f000 f8e7 	bl	800b0b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2150      	movs	r1, #80	; 0x50
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 f940 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800aef2:	e029      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6818      	ldr	r0, [r3, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	6859      	ldr	r1, [r3, #4]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	461a      	mov	r2, r3
 800af02:	f000 f906 	bl	800b112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2160      	movs	r1, #96	; 0x60
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f930 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800af12:	e019      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6818      	ldr	r0, [r3, #0]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	6859      	ldr	r1, [r3, #4]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	461a      	mov	r2, r3
 800af22:	f000 f8c7 	bl	800b0b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2140      	movs	r1, #64	; 0x40
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 f920 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800af32:	e009      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f000 f917 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800af44:	e000      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800af46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af6a:	bf00      	nop
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800afa6:	bf00      	nop
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
	...

0800afb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a34      	ldr	r2, [pc, #208]	; (800b098 <TIM_Base_SetConfig+0xe4>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d00f      	beq.n	800afec <TIM_Base_SetConfig+0x38>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afd2:	d00b      	beq.n	800afec <TIM_Base_SetConfig+0x38>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a31      	ldr	r2, [pc, #196]	; (800b09c <TIM_Base_SetConfig+0xe8>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d007      	beq.n	800afec <TIM_Base_SetConfig+0x38>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a30      	ldr	r2, [pc, #192]	; (800b0a0 <TIM_Base_SetConfig+0xec>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d003      	beq.n	800afec <TIM_Base_SetConfig+0x38>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a2f      	ldr	r2, [pc, #188]	; (800b0a4 <TIM_Base_SetConfig+0xf0>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d108      	bne.n	800affe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	4313      	orrs	r3, r2
 800affc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a25      	ldr	r2, [pc, #148]	; (800b098 <TIM_Base_SetConfig+0xe4>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d01b      	beq.n	800b03e <TIM_Base_SetConfig+0x8a>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00c:	d017      	beq.n	800b03e <TIM_Base_SetConfig+0x8a>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a22      	ldr	r2, [pc, #136]	; (800b09c <TIM_Base_SetConfig+0xe8>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d013      	beq.n	800b03e <TIM_Base_SetConfig+0x8a>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a21      	ldr	r2, [pc, #132]	; (800b0a0 <TIM_Base_SetConfig+0xec>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d00f      	beq.n	800b03e <TIM_Base_SetConfig+0x8a>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a20      	ldr	r2, [pc, #128]	; (800b0a4 <TIM_Base_SetConfig+0xf0>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00b      	beq.n	800b03e <TIM_Base_SetConfig+0x8a>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <TIM_Base_SetConfig+0xf4>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d007      	beq.n	800b03e <TIM_Base_SetConfig+0x8a>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a1e      	ldr	r2, [pc, #120]	; (800b0ac <TIM_Base_SetConfig+0xf8>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d003      	beq.n	800b03e <TIM_Base_SetConfig+0x8a>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a1d      	ldr	r2, [pc, #116]	; (800b0b0 <TIM_Base_SetConfig+0xfc>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d108      	bne.n	800b050 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a08      	ldr	r2, [pc, #32]	; (800b098 <TIM_Base_SetConfig+0xe4>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d103      	bne.n	800b084 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	691a      	ldr	r2, [r3, #16]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	615a      	str	r2, [r3, #20]
}
 800b08a:	bf00      	nop
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	40010000 	.word	0x40010000
 800b09c:	40000400 	.word	0x40000400
 800b0a0:	40000800 	.word	0x40000800
 800b0a4:	40000c00 	.word	0x40000c00
 800b0a8:	40014000 	.word	0x40014000
 800b0ac:	40014400 	.word	0x40014400
 800b0b0:	40014800 	.word	0x40014800

0800b0b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	f023 0201 	bic.w	r2, r3, #1
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f023 030a 	bic.w	r3, r3, #10
 800b0f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	621a      	str	r2, [r3, #32]
}
 800b106:	bf00      	nop
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b112:	b480      	push	{r7}
 800b114:	b087      	sub	sp, #28
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f023 0210 	bic.w	r2, r3, #16
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6a1b      	ldr	r3, [r3, #32]
 800b134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b13c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	031b      	lsls	r3, r3, #12
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	4313      	orrs	r3, r2
 800b146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b14e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	011b      	lsls	r3, r3, #4
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	4313      	orrs	r3, r2
 800b158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	621a      	str	r2, [r3, #32]
}
 800b166:	bf00      	nop
 800b168:	371c      	adds	r7, #28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b172:	b480      	push	{r7}
 800b174:	b085      	sub	sp, #20
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	f043 0307 	orr.w	r3, r3, #7
 800b194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	609a      	str	r2, [r3, #8]
}
 800b19c:	bf00      	nop
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	021a      	lsls	r2, r3, #8
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	609a      	str	r2, [r3, #8]
}
 800b1dc:	bf00      	nop
 800b1de:	371c      	adds	r7, #28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d101      	bne.n	800b200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	e050      	b.n	800b2a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a1c      	ldr	r2, [pc, #112]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d018      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b24c:	d013      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a18      	ldr	r2, [pc, #96]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d00e      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a16      	ldr	r2, [pc, #88]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d009      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a15      	ldr	r2, [pc, #84]	; (800b2bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d004      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a13      	ldr	r2, [pc, #76]	; (800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d10c      	bne.n	800b290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b27c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	4313      	orrs	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	40010000 	.word	0x40010000
 800b2b4:	40000400 	.word	0x40000400
 800b2b8:	40000800 	.word	0x40000800
 800b2bc:	40000c00 	.word	0x40000c00
 800b2c0:	40014000 	.word	0x40014000

0800b2c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e03f      	b.n	800b37e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	d106      	bne.n	800b318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7fd fe64 	bl	8008fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2224      	movs	r2, #36	; 0x24
 800b31c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b32e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fb0d 	bl	800b950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	691a      	ldr	r2, [r3, #16]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	695a      	ldr	r2, [r3, #20]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68da      	ldr	r2, [r3, #12]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2220      	movs	r2, #32
 800b370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2220      	movs	r2, #32
 800b378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b386:	b480      	push	{r7}
 800b388:	b085      	sub	sp, #20
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	4613      	mov	r3, r2
 800b392:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	d130      	bne.n	800b402 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <HAL_UART_Transmit_IT+0x26>
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e029      	b.n	800b404 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d101      	bne.n	800b3be <HAL_UART_Transmit_IT+0x38>
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e022      	b.n	800b404 <HAL_UART_Transmit_IT+0x7e>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	88fa      	ldrh	r2, [r7, #6]
 800b3d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	88fa      	ldrh	r2, [r7, #6]
 800b3d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2221      	movs	r2, #33	; 0x21
 800b3e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68da      	ldr	r2, [r3, #12]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	e000      	b.n	800b404 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b402:	2302      	movs	r3, #2
  }
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	4613      	mov	r3, r2
 800b41c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b20      	cmp	r3, #32
 800b428:	d140      	bne.n	800b4ac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <HAL_UART_Receive_IT+0x26>
 800b430:	88fb      	ldrh	r3, [r7, #6]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e039      	b.n	800b4ae <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <HAL_UART_Receive_IT+0x38>
 800b444:	2302      	movs	r3, #2
 800b446:	e032      	b.n	800b4ae <HAL_UART_Receive_IT+0x9e>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	88fa      	ldrh	r2, [r7, #6]
 800b45a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	88fa      	ldrh	r2, [r7, #6]
 800b460:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2222      	movs	r2, #34	; 0x22
 800b46c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b486:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695a      	ldr	r2, [r3, #20]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f042 0201 	orr.w	r2, r2, #1
 800b496:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68da      	ldr	r2, [r3, #12]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f042 0220 	orr.w	r2, r2, #32
 800b4a6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	e000      	b.n	800b4ae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b4ac:	2302      	movs	r3, #2
  }
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
	...

0800b4bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	f003 030f 	and.w	r3, r3, #15
 800b4ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10d      	bne.n	800b50e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	f003 0320 	and.w	r3, r3, #32
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d008      	beq.n	800b50e <HAL_UART_IRQHandler+0x52>
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	f003 0320 	and.w	r3, r3, #32
 800b502:	2b00      	cmp	r3, #0
 800b504:	d003      	beq.n	800b50e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f9a0 	bl	800b84c <UART_Receive_IT>
      return;
 800b50c:	e0d1      	b.n	800b6b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 80b0 	beq.w	800b676 <HAL_UART_IRQHandler+0x1ba>
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d105      	bne.n	800b52c <HAL_UART_IRQHandler+0x70>
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 80a5 	beq.w	800b676 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00a      	beq.n	800b54c <HAL_UART_IRQHandler+0x90>
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b544:	f043 0201 	orr.w	r2, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f003 0304 	and.w	r3, r3, #4
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <HAL_UART_IRQHandler+0xb0>
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b564:	f043 0202 	orr.w	r2, r3, #2
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	f003 0302 	and.w	r3, r3, #2
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <HAL_UART_IRQHandler+0xd0>
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d005      	beq.n	800b58c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b584:	f043 0204 	orr.w	r2, r3, #4
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	f003 0308 	and.w	r3, r3, #8
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00f      	beq.n	800b5b6 <HAL_UART_IRQHandler+0xfa>
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d104      	bne.n	800b5aa <HAL_UART_IRQHandler+0xee>
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d005      	beq.n	800b5b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ae:	f043 0208 	orr.w	r2, r3, #8
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d078      	beq.n	800b6b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d007      	beq.n	800b5d8 <HAL_UART_IRQHandler+0x11c>
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	f003 0320 	and.w	r3, r3, #32
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d002      	beq.n	800b5d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f93a 	bl	800b84c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e2:	2b40      	cmp	r3, #64	; 0x40
 800b5e4:	bf0c      	ite	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	2300      	movne	r3, #0
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	f003 0308 	and.w	r3, r3, #8
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d102      	bne.n	800b600 <HAL_UART_IRQHandler+0x144>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d031      	beq.n	800b664 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f883 	bl	800b70c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b610:	2b40      	cmp	r3, #64	; 0x40
 800b612:	d123      	bne.n	800b65c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	695a      	ldr	r2, [r3, #20]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b622:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d013      	beq.n	800b654 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b630:	4a21      	ldr	r2, [pc, #132]	; (800b6b8 <HAL_UART_IRQHandler+0x1fc>)
 800b632:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fd ff1f 	bl	800947c <HAL_DMA_Abort_IT>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d016      	beq.n	800b672 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b64e:	4610      	mov	r0, r2
 800b650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b652:	e00e      	b.n	800b672 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f831 	bl	800b6bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65a:	e00a      	b.n	800b672 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f82d 	bl	800b6bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b662:	e006      	b.n	800b672 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f829 	bl	800b6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b670:	e01e      	b.n	800b6b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b672:	bf00      	nop
    return;
 800b674:	e01c      	b.n	800b6b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d008      	beq.n	800b692 <HAL_UART_IRQHandler+0x1d6>
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f870 	bl	800b770 <UART_Transmit_IT>
    return;
 800b690:	e00f      	b.n	800b6b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00a      	beq.n	800b6b2 <HAL_UART_IRQHandler+0x1f6>
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f8b8 	bl	800b81c <UART_EndTransmit_IT>
    return;
 800b6ac:	bf00      	nop
 800b6ae:	e000      	b.n	800b6b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 800b6b0:	bf00      	nop
  }
}
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	0800b749 	.word	0x0800b749

0800b6bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	b2db      	uxtb	r3, r3
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68da      	ldr	r2, [r3, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b722:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	695a      	ldr	r2, [r3, #20]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f022 0201 	bic.w	r2, r2, #1
 800b732:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2220      	movs	r2, #32
 800b738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2200      	movs	r2, #0
 800b760:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7ff ffaa 	bl	800b6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b768:	bf00      	nop
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	2b21      	cmp	r3, #33	; 0x21
 800b782:	d144      	bne.n	800b80e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b78c:	d11a      	bne.n	800b7c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	461a      	mov	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d105      	bne.n	800b7b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	1c9a      	adds	r2, r3, #2
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	621a      	str	r2, [r3, #32]
 800b7b6:	e00e      	b.n	800b7d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	621a      	str	r2, [r3, #32]
 800b7c2:	e008      	b.n	800b7d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	1c59      	adds	r1, r3, #1
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6211      	str	r1, [r2, #32]
 800b7ce:	781a      	ldrb	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10f      	bne.n	800b80a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68da      	ldr	r2, [r3, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b808:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	e000      	b.n	800b810 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b80e:	2302      	movs	r3, #2
  }
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b832:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2220      	movs	r2, #32
 800b838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f005 fd27 	bl	8011290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b22      	cmp	r3, #34	; 0x22
 800b85e:	d171      	bne.n	800b944 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b868:	d123      	bne.n	800b8b2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10e      	bne.n	800b896 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	b29b      	uxth	r3, r3
 800b880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b884:	b29a      	uxth	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88e:	1c9a      	adds	r2, r3, #2
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	629a      	str	r2, [r3, #40]	; 0x28
 800b894:	e029      	b.n	800b8ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	629a      	str	r2, [r3, #40]	; 0x28
 800b8b0:	e01b      	b.n	800b8ea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6858      	ldr	r0, [r3, #4]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c4:	1c59      	adds	r1, r3, #1
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	6291      	str	r1, [r2, #40]	; 0x28
 800b8ca:	b2c2      	uxtb	r2, r0
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	e00c      	b.n	800b8ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	1c58      	adds	r0, r3, #1
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	6288      	str	r0, [r1, #40]	; 0x28
 800b8e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8e6:	b2d2      	uxtb	r2, r2
 800b8e8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d120      	bne.n	800b940 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f022 0220 	bic.w	r2, r2, #32
 800b90c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68da      	ldr	r2, [r3, #12]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b91c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	695a      	ldr	r2, [r3, #20]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f022 0201 	bic.w	r2, r2, #1
 800b92c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2220      	movs	r2, #32
 800b932:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f004 ffc0 	bl	80108bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	e002      	b.n	800b946 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	e000      	b.n	800b946 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b944:	2302      	movs	r3, #2
  }
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	b085      	sub	sp, #20
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	430a      	orrs	r2, r1
 800b96e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	431a      	orrs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	4313      	orrs	r3, r2
 800b986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b992:	f023 030c 	bic.w	r3, r3, #12
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	6812      	ldr	r2, [r2, #0]
 800b99a:	68f9      	ldr	r1, [r7, #12]
 800b99c:	430b      	orrs	r3, r1
 800b99e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9be:	f040 818b 	bne.w	800bcd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4ac1      	ldr	r2, [pc, #772]	; (800bccc <UART_SetConfig+0x37c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d005      	beq.n	800b9d8 <UART_SetConfig+0x88>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4abf      	ldr	r2, [pc, #764]	; (800bcd0 <UART_SetConfig+0x380>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	f040 80bd 	bne.w	800bb52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9d8:	f7fe fb74 	bl	800a0c4 <HAL_RCC_GetPCLK2Freq>
 800b9dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	461d      	mov	r5, r3
 800b9e2:	f04f 0600 	mov.w	r6, #0
 800b9e6:	46a8      	mov	r8, r5
 800b9e8:	46b1      	mov	r9, r6
 800b9ea:	eb18 0308 	adds.w	r3, r8, r8
 800b9ee:	eb49 0409 	adc.w	r4, r9, r9
 800b9f2:	4698      	mov	r8, r3
 800b9f4:	46a1      	mov	r9, r4
 800b9f6:	eb18 0805 	adds.w	r8, r8, r5
 800b9fa:	eb49 0906 	adc.w	r9, r9, r6
 800b9fe:	f04f 0100 	mov.w	r1, #0
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ba0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ba0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ba12:	4688      	mov	r8, r1
 800ba14:	4691      	mov	r9, r2
 800ba16:	eb18 0005 	adds.w	r0, r8, r5
 800ba1a:	eb49 0106 	adc.w	r1, r9, r6
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	461d      	mov	r5, r3
 800ba24:	f04f 0600 	mov.w	r6, #0
 800ba28:	196b      	adds	r3, r5, r5
 800ba2a:	eb46 0406 	adc.w	r4, r6, r6
 800ba2e:	461a      	mov	r2, r3
 800ba30:	4623      	mov	r3, r4
 800ba32:	f7fc fbd5 	bl	80081e0 <__aeabi_uldivmod>
 800ba36:	4603      	mov	r3, r0
 800ba38:	460c      	mov	r4, r1
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	4ba5      	ldr	r3, [pc, #660]	; (800bcd4 <UART_SetConfig+0x384>)
 800ba3e:	fba3 2302 	umull	r2, r3, r3, r2
 800ba42:	095b      	lsrs	r3, r3, #5
 800ba44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	461d      	mov	r5, r3
 800ba4c:	f04f 0600 	mov.w	r6, #0
 800ba50:	46a9      	mov	r9, r5
 800ba52:	46b2      	mov	sl, r6
 800ba54:	eb19 0309 	adds.w	r3, r9, r9
 800ba58:	eb4a 040a 	adc.w	r4, sl, sl
 800ba5c:	4699      	mov	r9, r3
 800ba5e:	46a2      	mov	sl, r4
 800ba60:	eb19 0905 	adds.w	r9, r9, r5
 800ba64:	eb4a 0a06 	adc.w	sl, sl, r6
 800ba68:	f04f 0100 	mov.w	r1, #0
 800ba6c:	f04f 0200 	mov.w	r2, #0
 800ba70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba7c:	4689      	mov	r9, r1
 800ba7e:	4692      	mov	sl, r2
 800ba80:	eb19 0005 	adds.w	r0, r9, r5
 800ba84:	eb4a 0106 	adc.w	r1, sl, r6
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	461d      	mov	r5, r3
 800ba8e:	f04f 0600 	mov.w	r6, #0
 800ba92:	196b      	adds	r3, r5, r5
 800ba94:	eb46 0406 	adc.w	r4, r6, r6
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4623      	mov	r3, r4
 800ba9c:	f7fc fba0 	bl	80081e0 <__aeabi_uldivmod>
 800baa0:	4603      	mov	r3, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	461a      	mov	r2, r3
 800baa6:	4b8b      	ldr	r3, [pc, #556]	; (800bcd4 <UART_SetConfig+0x384>)
 800baa8:	fba3 1302 	umull	r1, r3, r3, r2
 800baac:	095b      	lsrs	r3, r3, #5
 800baae:	2164      	movs	r1, #100	; 0x64
 800bab0:	fb01 f303 	mul.w	r3, r1, r3
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	3332      	adds	r3, #50	; 0x32
 800baba:	4a86      	ldr	r2, [pc, #536]	; (800bcd4 <UART_SetConfig+0x384>)
 800babc:	fba2 2303 	umull	r2, r3, r2, r3
 800bac0:	095b      	lsrs	r3, r3, #5
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bac8:	4498      	add	r8, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	461d      	mov	r5, r3
 800bace:	f04f 0600 	mov.w	r6, #0
 800bad2:	46a9      	mov	r9, r5
 800bad4:	46b2      	mov	sl, r6
 800bad6:	eb19 0309 	adds.w	r3, r9, r9
 800bada:	eb4a 040a 	adc.w	r4, sl, sl
 800bade:	4699      	mov	r9, r3
 800bae0:	46a2      	mov	sl, r4
 800bae2:	eb19 0905 	adds.w	r9, r9, r5
 800bae6:	eb4a 0a06 	adc.w	sl, sl, r6
 800baea:	f04f 0100 	mov.w	r1, #0
 800baee:	f04f 0200 	mov.w	r2, #0
 800baf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800baf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bafa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bafe:	4689      	mov	r9, r1
 800bb00:	4692      	mov	sl, r2
 800bb02:	eb19 0005 	adds.w	r0, r9, r5
 800bb06:	eb4a 0106 	adc.w	r1, sl, r6
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	461d      	mov	r5, r3
 800bb10:	f04f 0600 	mov.w	r6, #0
 800bb14:	196b      	adds	r3, r5, r5
 800bb16:	eb46 0406 	adc.w	r4, r6, r6
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	4623      	mov	r3, r4
 800bb1e:	f7fc fb5f 	bl	80081e0 <__aeabi_uldivmod>
 800bb22:	4603      	mov	r3, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	461a      	mov	r2, r3
 800bb28:	4b6a      	ldr	r3, [pc, #424]	; (800bcd4 <UART_SetConfig+0x384>)
 800bb2a:	fba3 1302 	umull	r1, r3, r3, r2
 800bb2e:	095b      	lsrs	r3, r3, #5
 800bb30:	2164      	movs	r1, #100	; 0x64
 800bb32:	fb01 f303 	mul.w	r3, r1, r3
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	3332      	adds	r3, #50	; 0x32
 800bb3c:	4a65      	ldr	r2, [pc, #404]	; (800bcd4 <UART_SetConfig+0x384>)
 800bb3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb42:	095b      	lsrs	r3, r3, #5
 800bb44:	f003 0207 	and.w	r2, r3, #7
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4442      	add	r2, r8
 800bb4e:	609a      	str	r2, [r3, #8]
 800bb50:	e26f      	b.n	800c032 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb52:	f7fe faa3 	bl	800a09c <HAL_RCC_GetPCLK1Freq>
 800bb56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	461d      	mov	r5, r3
 800bb5c:	f04f 0600 	mov.w	r6, #0
 800bb60:	46a8      	mov	r8, r5
 800bb62:	46b1      	mov	r9, r6
 800bb64:	eb18 0308 	adds.w	r3, r8, r8
 800bb68:	eb49 0409 	adc.w	r4, r9, r9
 800bb6c:	4698      	mov	r8, r3
 800bb6e:	46a1      	mov	r9, r4
 800bb70:	eb18 0805 	adds.w	r8, r8, r5
 800bb74:	eb49 0906 	adc.w	r9, r9, r6
 800bb78:	f04f 0100 	mov.w	r1, #0
 800bb7c:	f04f 0200 	mov.w	r2, #0
 800bb80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bb84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bb88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bb8c:	4688      	mov	r8, r1
 800bb8e:	4691      	mov	r9, r2
 800bb90:	eb18 0005 	adds.w	r0, r8, r5
 800bb94:	eb49 0106 	adc.w	r1, r9, r6
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	461d      	mov	r5, r3
 800bb9e:	f04f 0600 	mov.w	r6, #0
 800bba2:	196b      	adds	r3, r5, r5
 800bba4:	eb46 0406 	adc.w	r4, r6, r6
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4623      	mov	r3, r4
 800bbac:	f7fc fb18 	bl	80081e0 <__aeabi_uldivmod>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	4b47      	ldr	r3, [pc, #284]	; (800bcd4 <UART_SetConfig+0x384>)
 800bbb8:	fba3 2302 	umull	r2, r3, r3, r2
 800bbbc:	095b      	lsrs	r3, r3, #5
 800bbbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	461d      	mov	r5, r3
 800bbc6:	f04f 0600 	mov.w	r6, #0
 800bbca:	46a9      	mov	r9, r5
 800bbcc:	46b2      	mov	sl, r6
 800bbce:	eb19 0309 	adds.w	r3, r9, r9
 800bbd2:	eb4a 040a 	adc.w	r4, sl, sl
 800bbd6:	4699      	mov	r9, r3
 800bbd8:	46a2      	mov	sl, r4
 800bbda:	eb19 0905 	adds.w	r9, r9, r5
 800bbde:	eb4a 0a06 	adc.w	sl, sl, r6
 800bbe2:	f04f 0100 	mov.w	r1, #0
 800bbe6:	f04f 0200 	mov.w	r2, #0
 800bbea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbf6:	4689      	mov	r9, r1
 800bbf8:	4692      	mov	sl, r2
 800bbfa:	eb19 0005 	adds.w	r0, r9, r5
 800bbfe:	eb4a 0106 	adc.w	r1, sl, r6
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	461d      	mov	r5, r3
 800bc08:	f04f 0600 	mov.w	r6, #0
 800bc0c:	196b      	adds	r3, r5, r5
 800bc0e:	eb46 0406 	adc.w	r4, r6, r6
 800bc12:	461a      	mov	r2, r3
 800bc14:	4623      	mov	r3, r4
 800bc16:	f7fc fae3 	bl	80081e0 <__aeabi_uldivmod>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	461a      	mov	r2, r3
 800bc20:	4b2c      	ldr	r3, [pc, #176]	; (800bcd4 <UART_SetConfig+0x384>)
 800bc22:	fba3 1302 	umull	r1, r3, r3, r2
 800bc26:	095b      	lsrs	r3, r3, #5
 800bc28:	2164      	movs	r1, #100	; 0x64
 800bc2a:	fb01 f303 	mul.w	r3, r1, r3
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	3332      	adds	r3, #50	; 0x32
 800bc34:	4a27      	ldr	r2, [pc, #156]	; (800bcd4 <UART_SetConfig+0x384>)
 800bc36:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3a:	095b      	lsrs	r3, r3, #5
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc42:	4498      	add	r8, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	461d      	mov	r5, r3
 800bc48:	f04f 0600 	mov.w	r6, #0
 800bc4c:	46a9      	mov	r9, r5
 800bc4e:	46b2      	mov	sl, r6
 800bc50:	eb19 0309 	adds.w	r3, r9, r9
 800bc54:	eb4a 040a 	adc.w	r4, sl, sl
 800bc58:	4699      	mov	r9, r3
 800bc5a:	46a2      	mov	sl, r4
 800bc5c:	eb19 0905 	adds.w	r9, r9, r5
 800bc60:	eb4a 0a06 	adc.w	sl, sl, r6
 800bc64:	f04f 0100 	mov.w	r1, #0
 800bc68:	f04f 0200 	mov.w	r2, #0
 800bc6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bc74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bc78:	4689      	mov	r9, r1
 800bc7a:	4692      	mov	sl, r2
 800bc7c:	eb19 0005 	adds.w	r0, r9, r5
 800bc80:	eb4a 0106 	adc.w	r1, sl, r6
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	461d      	mov	r5, r3
 800bc8a:	f04f 0600 	mov.w	r6, #0
 800bc8e:	196b      	adds	r3, r5, r5
 800bc90:	eb46 0406 	adc.w	r4, r6, r6
 800bc94:	461a      	mov	r2, r3
 800bc96:	4623      	mov	r3, r4
 800bc98:	f7fc faa2 	bl	80081e0 <__aeabi_uldivmod>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	460c      	mov	r4, r1
 800bca0:	461a      	mov	r2, r3
 800bca2:	4b0c      	ldr	r3, [pc, #48]	; (800bcd4 <UART_SetConfig+0x384>)
 800bca4:	fba3 1302 	umull	r1, r3, r3, r2
 800bca8:	095b      	lsrs	r3, r3, #5
 800bcaa:	2164      	movs	r1, #100	; 0x64
 800bcac:	fb01 f303 	mul.w	r3, r1, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	3332      	adds	r3, #50	; 0x32
 800bcb6:	4a07      	ldr	r2, [pc, #28]	; (800bcd4 <UART_SetConfig+0x384>)
 800bcb8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcbc:	095b      	lsrs	r3, r3, #5
 800bcbe:	f003 0207 	and.w	r2, r3, #7
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4442      	add	r2, r8
 800bcc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bcca:	e1b2      	b.n	800c032 <UART_SetConfig+0x6e2>
 800bccc:	40011000 	.word	0x40011000
 800bcd0:	40011400 	.word	0x40011400
 800bcd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4ad7      	ldr	r2, [pc, #860]	; (800c03c <UART_SetConfig+0x6ec>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d005      	beq.n	800bcee <UART_SetConfig+0x39e>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4ad6      	ldr	r2, [pc, #856]	; (800c040 <UART_SetConfig+0x6f0>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	f040 80d1 	bne.w	800be90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bcee:	f7fe f9e9 	bl	800a0c4 <HAL_RCC_GetPCLK2Freq>
 800bcf2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	469a      	mov	sl, r3
 800bcf8:	f04f 0b00 	mov.w	fp, #0
 800bcfc:	46d0      	mov	r8, sl
 800bcfe:	46d9      	mov	r9, fp
 800bd00:	eb18 0308 	adds.w	r3, r8, r8
 800bd04:	eb49 0409 	adc.w	r4, r9, r9
 800bd08:	4698      	mov	r8, r3
 800bd0a:	46a1      	mov	r9, r4
 800bd0c:	eb18 080a 	adds.w	r8, r8, sl
 800bd10:	eb49 090b 	adc.w	r9, r9, fp
 800bd14:	f04f 0100 	mov.w	r1, #0
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bd20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bd24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bd28:	4688      	mov	r8, r1
 800bd2a:	4691      	mov	r9, r2
 800bd2c:	eb1a 0508 	adds.w	r5, sl, r8
 800bd30:	eb4b 0609 	adc.w	r6, fp, r9
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f04f 0200 	mov.w	r2, #0
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	f04f 0400 	mov.w	r4, #0
 800bd46:	0094      	lsls	r4, r2, #2
 800bd48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd4c:	008b      	lsls	r3, r1, #2
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4623      	mov	r3, r4
 800bd52:	4628      	mov	r0, r5
 800bd54:	4631      	mov	r1, r6
 800bd56:	f7fc fa43 	bl	80081e0 <__aeabi_uldivmod>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4bb8      	ldr	r3, [pc, #736]	; (800c044 <UART_SetConfig+0x6f4>)
 800bd62:	fba3 2302 	umull	r2, r3, r3, r2
 800bd66:	095b      	lsrs	r3, r3, #5
 800bd68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	469b      	mov	fp, r3
 800bd70:	f04f 0c00 	mov.w	ip, #0
 800bd74:	46d9      	mov	r9, fp
 800bd76:	46e2      	mov	sl, ip
 800bd78:	eb19 0309 	adds.w	r3, r9, r9
 800bd7c:	eb4a 040a 	adc.w	r4, sl, sl
 800bd80:	4699      	mov	r9, r3
 800bd82:	46a2      	mov	sl, r4
 800bd84:	eb19 090b 	adds.w	r9, r9, fp
 800bd88:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd8c:	f04f 0100 	mov.w	r1, #0
 800bd90:	f04f 0200 	mov.w	r2, #0
 800bd94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bd9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bda0:	4689      	mov	r9, r1
 800bda2:	4692      	mov	sl, r2
 800bda4:	eb1b 0509 	adds.w	r5, fp, r9
 800bda8:	eb4c 060a 	adc.w	r6, ip, sl
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	f04f 0200 	mov.w	r2, #0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	f04f 0400 	mov.w	r4, #0
 800bdbe:	0094      	lsls	r4, r2, #2
 800bdc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bdc4:	008b      	lsls	r3, r1, #2
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4623      	mov	r3, r4
 800bdca:	4628      	mov	r0, r5
 800bdcc:	4631      	mov	r1, r6
 800bdce:	f7fc fa07 	bl	80081e0 <__aeabi_uldivmod>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	4b9a      	ldr	r3, [pc, #616]	; (800c044 <UART_SetConfig+0x6f4>)
 800bdda:	fba3 1302 	umull	r1, r3, r3, r2
 800bdde:	095b      	lsrs	r3, r3, #5
 800bde0:	2164      	movs	r1, #100	; 0x64
 800bde2:	fb01 f303 	mul.w	r3, r1, r3
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	3332      	adds	r3, #50	; 0x32
 800bdec:	4a95      	ldr	r2, [pc, #596]	; (800c044 <UART_SetConfig+0x6f4>)
 800bdee:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdf8:	4498      	add	r8, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	469b      	mov	fp, r3
 800bdfe:	f04f 0c00 	mov.w	ip, #0
 800be02:	46d9      	mov	r9, fp
 800be04:	46e2      	mov	sl, ip
 800be06:	eb19 0309 	adds.w	r3, r9, r9
 800be0a:	eb4a 040a 	adc.w	r4, sl, sl
 800be0e:	4699      	mov	r9, r3
 800be10:	46a2      	mov	sl, r4
 800be12:	eb19 090b 	adds.w	r9, r9, fp
 800be16:	eb4a 0a0c 	adc.w	sl, sl, ip
 800be1a:	f04f 0100 	mov.w	r1, #0
 800be1e:	f04f 0200 	mov.w	r2, #0
 800be22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be2e:	4689      	mov	r9, r1
 800be30:	4692      	mov	sl, r2
 800be32:	eb1b 0509 	adds.w	r5, fp, r9
 800be36:	eb4c 060a 	adc.w	r6, ip, sl
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	4619      	mov	r1, r3
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	f04f 0400 	mov.w	r4, #0
 800be4c:	0094      	lsls	r4, r2, #2
 800be4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800be52:	008b      	lsls	r3, r1, #2
 800be54:	461a      	mov	r2, r3
 800be56:	4623      	mov	r3, r4
 800be58:	4628      	mov	r0, r5
 800be5a:	4631      	mov	r1, r6
 800be5c:	f7fc f9c0 	bl	80081e0 <__aeabi_uldivmod>
 800be60:	4603      	mov	r3, r0
 800be62:	460c      	mov	r4, r1
 800be64:	461a      	mov	r2, r3
 800be66:	4b77      	ldr	r3, [pc, #476]	; (800c044 <UART_SetConfig+0x6f4>)
 800be68:	fba3 1302 	umull	r1, r3, r3, r2
 800be6c:	095b      	lsrs	r3, r3, #5
 800be6e:	2164      	movs	r1, #100	; 0x64
 800be70:	fb01 f303 	mul.w	r3, r1, r3
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	011b      	lsls	r3, r3, #4
 800be78:	3332      	adds	r3, #50	; 0x32
 800be7a:	4a72      	ldr	r2, [pc, #456]	; (800c044 <UART_SetConfig+0x6f4>)
 800be7c:	fba2 2303 	umull	r2, r3, r2, r3
 800be80:	095b      	lsrs	r3, r3, #5
 800be82:	f003 020f 	and.w	r2, r3, #15
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4442      	add	r2, r8
 800be8c:	609a      	str	r2, [r3, #8]
 800be8e:	e0d0      	b.n	800c032 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800be90:	f7fe f904 	bl	800a09c <HAL_RCC_GetPCLK1Freq>
 800be94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	469a      	mov	sl, r3
 800be9a:	f04f 0b00 	mov.w	fp, #0
 800be9e:	46d0      	mov	r8, sl
 800bea0:	46d9      	mov	r9, fp
 800bea2:	eb18 0308 	adds.w	r3, r8, r8
 800bea6:	eb49 0409 	adc.w	r4, r9, r9
 800beaa:	4698      	mov	r8, r3
 800beac:	46a1      	mov	r9, r4
 800beae:	eb18 080a 	adds.w	r8, r8, sl
 800beb2:	eb49 090b 	adc.w	r9, r9, fp
 800beb6:	f04f 0100 	mov.w	r1, #0
 800beba:	f04f 0200 	mov.w	r2, #0
 800bebe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bec2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bec6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800beca:	4688      	mov	r8, r1
 800becc:	4691      	mov	r9, r2
 800bece:	eb1a 0508 	adds.w	r5, sl, r8
 800bed2:	eb4b 0609 	adc.w	r6, fp, r9
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	4619      	mov	r1, r3
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	f04f 0400 	mov.w	r4, #0
 800bee8:	0094      	lsls	r4, r2, #2
 800beea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800beee:	008b      	lsls	r3, r1, #2
 800bef0:	461a      	mov	r2, r3
 800bef2:	4623      	mov	r3, r4
 800bef4:	4628      	mov	r0, r5
 800bef6:	4631      	mov	r1, r6
 800bef8:	f7fc f972 	bl	80081e0 <__aeabi_uldivmod>
 800befc:	4603      	mov	r3, r0
 800befe:	460c      	mov	r4, r1
 800bf00:	461a      	mov	r2, r3
 800bf02:	4b50      	ldr	r3, [pc, #320]	; (800c044 <UART_SetConfig+0x6f4>)
 800bf04:	fba3 2302 	umull	r2, r3, r3, r2
 800bf08:	095b      	lsrs	r3, r3, #5
 800bf0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	469b      	mov	fp, r3
 800bf12:	f04f 0c00 	mov.w	ip, #0
 800bf16:	46d9      	mov	r9, fp
 800bf18:	46e2      	mov	sl, ip
 800bf1a:	eb19 0309 	adds.w	r3, r9, r9
 800bf1e:	eb4a 040a 	adc.w	r4, sl, sl
 800bf22:	4699      	mov	r9, r3
 800bf24:	46a2      	mov	sl, r4
 800bf26:	eb19 090b 	adds.w	r9, r9, fp
 800bf2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bf2e:	f04f 0100 	mov.w	r1, #0
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf42:	4689      	mov	r9, r1
 800bf44:	4692      	mov	sl, r2
 800bf46:	eb1b 0509 	adds.w	r5, fp, r9
 800bf4a:	eb4c 060a 	adc.w	r6, ip, sl
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	4619      	mov	r1, r3
 800bf54:	f04f 0200 	mov.w	r2, #0
 800bf58:	f04f 0300 	mov.w	r3, #0
 800bf5c:	f04f 0400 	mov.w	r4, #0
 800bf60:	0094      	lsls	r4, r2, #2
 800bf62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bf66:	008b      	lsls	r3, r1, #2
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	4631      	mov	r1, r6
 800bf70:	f7fc f936 	bl	80081e0 <__aeabi_uldivmod>
 800bf74:	4603      	mov	r3, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	461a      	mov	r2, r3
 800bf7a:	4b32      	ldr	r3, [pc, #200]	; (800c044 <UART_SetConfig+0x6f4>)
 800bf7c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf80:	095b      	lsrs	r3, r3, #5
 800bf82:	2164      	movs	r1, #100	; 0x64
 800bf84:	fb01 f303 	mul.w	r3, r1, r3
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	3332      	adds	r3, #50	; 0x32
 800bf8e:	4a2d      	ldr	r2, [pc, #180]	; (800c044 <UART_SetConfig+0x6f4>)
 800bf90:	fba2 2303 	umull	r2, r3, r2, r3
 800bf94:	095b      	lsrs	r3, r3, #5
 800bf96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf9a:	4498      	add	r8, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	469b      	mov	fp, r3
 800bfa0:	f04f 0c00 	mov.w	ip, #0
 800bfa4:	46d9      	mov	r9, fp
 800bfa6:	46e2      	mov	sl, ip
 800bfa8:	eb19 0309 	adds.w	r3, r9, r9
 800bfac:	eb4a 040a 	adc.w	r4, sl, sl
 800bfb0:	4699      	mov	r9, r3
 800bfb2:	46a2      	mov	sl, r4
 800bfb4:	eb19 090b 	adds.w	r9, r9, fp
 800bfb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bfbc:	f04f 0100 	mov.w	r1, #0
 800bfc0:	f04f 0200 	mov.w	r2, #0
 800bfc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bfc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bfcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bfd0:	4689      	mov	r9, r1
 800bfd2:	4692      	mov	sl, r2
 800bfd4:	eb1b 0509 	adds.w	r5, fp, r9
 800bfd8:	eb4c 060a 	adc.w	r6, ip, sl
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	f04f 0300 	mov.w	r3, #0
 800bfea:	f04f 0400 	mov.w	r4, #0
 800bfee:	0094      	lsls	r4, r2, #2
 800bff0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bff4:	008b      	lsls	r3, r1, #2
 800bff6:	461a      	mov	r2, r3
 800bff8:	4623      	mov	r3, r4
 800bffa:	4628      	mov	r0, r5
 800bffc:	4631      	mov	r1, r6
 800bffe:	f7fc f8ef 	bl	80081e0 <__aeabi_uldivmod>
 800c002:	4603      	mov	r3, r0
 800c004:	460c      	mov	r4, r1
 800c006:	461a      	mov	r2, r3
 800c008:	4b0e      	ldr	r3, [pc, #56]	; (800c044 <UART_SetConfig+0x6f4>)
 800c00a:	fba3 1302 	umull	r1, r3, r3, r2
 800c00e:	095b      	lsrs	r3, r3, #5
 800c010:	2164      	movs	r1, #100	; 0x64
 800c012:	fb01 f303 	mul.w	r3, r1, r3
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	011b      	lsls	r3, r3, #4
 800c01a:	3332      	adds	r3, #50	; 0x32
 800c01c:	4a09      	ldr	r2, [pc, #36]	; (800c044 <UART_SetConfig+0x6f4>)
 800c01e:	fba2 2303 	umull	r2, r3, r2, r3
 800c022:	095b      	lsrs	r3, r3, #5
 800c024:	f003 020f 	and.w	r2, r3, #15
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4442      	add	r2, r8
 800c02e:	609a      	str	r2, [r3, #8]
}
 800c030:	e7ff      	b.n	800c032 <UART_SetConfig+0x6e2>
 800c032:	bf00      	nop
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03c:	40011000 	.word	0x40011000
 800c040:	40011400 	.word	0x40011400
 800c044:	51eb851f 	.word	0x51eb851f

0800c048 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c04c:	bf00      	nop
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
	...

0800c058 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c05e:	f3ef 8305 	mrs	r3, IPSR
 800c062:	60bb      	str	r3, [r7, #8]
  return(result);
 800c064:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10f      	bne.n	800c08a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c06a:	f3ef 8310 	mrs	r3, PRIMASK
 800c06e:	607b      	str	r3, [r7, #4]
  return(result);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d105      	bne.n	800c082 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c076:	f3ef 8311 	mrs	r3, BASEPRI
 800c07a:	603b      	str	r3, [r7, #0]
  return(result);
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d007      	beq.n	800c092 <osKernelInitialize+0x3a>
 800c082:	4b0e      	ldr	r3, [pc, #56]	; (800c0bc <osKernelInitialize+0x64>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b02      	cmp	r3, #2
 800c088:	d103      	bne.n	800c092 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c08a:	f06f 0305 	mvn.w	r3, #5
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	e00c      	b.n	800c0ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c092:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <osKernelInitialize+0x64>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d105      	bne.n	800c0a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c09a:	4b08      	ldr	r3, [pc, #32]	; (800c0bc <osKernelInitialize+0x64>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e002      	b.n	800c0ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c0a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	20000034 	.word	0x20000034

0800c0c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0c6:	f3ef 8305 	mrs	r3, IPSR
 800c0ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10f      	bne.n	800c0f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c0d6:	607b      	str	r3, [r7, #4]
  return(result);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d105      	bne.n	800c0ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c0de:	f3ef 8311 	mrs	r3, BASEPRI
 800c0e2:	603b      	str	r3, [r7, #0]
  return(result);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d007      	beq.n	800c0fa <osKernelStart+0x3a>
 800c0ea:	4b0f      	ldr	r3, [pc, #60]	; (800c128 <osKernelStart+0x68>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d103      	bne.n	800c0fa <osKernelStart+0x3a>
    stat = osErrorISR;
 800c0f2:	f06f 0305 	mvn.w	r3, #5
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	e010      	b.n	800c11c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	; (800c128 <osKernelStart+0x68>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d109      	bne.n	800c116 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c102:	f7ff ffa1 	bl	800c048 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c106:	4b08      	ldr	r3, [pc, #32]	; (800c128 <osKernelStart+0x68>)
 800c108:	2202      	movs	r2, #2
 800c10a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c10c:	f001 fe62 	bl	800ddd4 <vTaskStartScheduler>
      stat = osOK;
 800c110:	2300      	movs	r3, #0
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	e002      	b.n	800c11c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c11a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c11c:	68fb      	ldr	r3, [r7, #12]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20000034 	.word	0x20000034

0800c12c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b090      	sub	sp, #64	; 0x40
 800c130:	af04      	add	r7, sp, #16
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c138:	2300      	movs	r3, #0
 800c13a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c13c:	f3ef 8305 	mrs	r3, IPSR
 800c140:	61fb      	str	r3, [r7, #28]
  return(result);
 800c142:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c144:	2b00      	cmp	r3, #0
 800c146:	f040 808f 	bne.w	800c268 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c14a:	f3ef 8310 	mrs	r3, PRIMASK
 800c14e:	61bb      	str	r3, [r7, #24]
  return(result);
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c156:	f3ef 8311 	mrs	r3, BASEPRI
 800c15a:	617b      	str	r3, [r7, #20]
  return(result);
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <osThreadNew+0x3e>
 800c162:	4b44      	ldr	r3, [pc, #272]	; (800c274 <osThreadNew+0x148>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d07e      	beq.n	800c268 <osThreadNew+0x13c>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d07b      	beq.n	800c268 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800c170:	2380      	movs	r3, #128	; 0x80
 800c172:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c174:	2318      	movs	r3, #24
 800c176:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c178:	2300      	movs	r3, #0
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c180:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d045      	beq.n	800c214 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <osThreadNew+0x6a>
        name = attr->name;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d002      	beq.n	800c1a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d008      	beq.n	800c1bc <osThreadNew+0x90>
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	2b38      	cmp	r3, #56	; 0x38
 800c1ae:	d805      	bhi.n	800c1bc <osThreadNew+0x90>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <osThreadNew+0x94>
        return (NULL);
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e054      	b.n	800c26a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	695b      	ldr	r3, [r3, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d003      	beq.n	800c1d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	089b      	lsrs	r3, r3, #2
 800c1ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00e      	beq.n	800c1f6 <osThreadNew+0xca>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	2b5b      	cmp	r3, #91	; 0x5b
 800c1de:	d90a      	bls.n	800c1f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d006      	beq.n	800c1f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <osThreadNew+0xca>
        mem = 1;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	623b      	str	r3, [r7, #32]
 800c1f4:	e010      	b.n	800c218 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10c      	bne.n	800c218 <osThreadNew+0xec>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d108      	bne.n	800c218 <osThreadNew+0xec>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d104      	bne.n	800c218 <osThreadNew+0xec>
          mem = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	623b      	str	r3, [r7, #32]
 800c212:	e001      	b.n	800c218 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d110      	bne.n	800c240 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c226:	9202      	str	r2, [sp, #8]
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f001 fbfb 	bl	800da30 <xTaskCreateStatic>
 800c23a:	4603      	mov	r3, r0
 800c23c:	613b      	str	r3, [r7, #16]
 800c23e:	e013      	b.n	800c268 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d110      	bne.n	800c268 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	b29a      	uxth	r2, r3
 800c24a:	f107 0310 	add.w	r3, r7, #16
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f001 fc43 	bl	800dae4 <xTaskCreate>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b01      	cmp	r3, #1
 800c262:	d001      	beq.n	800c268 <osThreadNew+0x13c>
          hTask = NULL;
 800c264:	2300      	movs	r3, #0
 800c266:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c268:	693b      	ldr	r3, [r7, #16]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3730      	adds	r7, #48	; 0x30
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20000034 	.word	0x20000034

0800c278 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c280:	f3ef 8305 	mrs	r3, IPSR
 800c284:	613b      	str	r3, [r7, #16]
  return(result);
 800c286:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10f      	bne.n	800c2ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c28c:	f3ef 8310 	mrs	r3, PRIMASK
 800c290:	60fb      	str	r3, [r7, #12]
  return(result);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d105      	bne.n	800c2a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c298:	f3ef 8311 	mrs	r3, BASEPRI
 800c29c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d007      	beq.n	800c2b4 <osDelay+0x3c>
 800c2a4:	4b0a      	ldr	r3, [pc, #40]	; (800c2d0 <osDelay+0x58>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d103      	bne.n	800c2b4 <osDelay+0x3c>
    stat = osErrorISR;
 800c2ac:	f06f 0305 	mvn.w	r3, #5
 800c2b0:	617b      	str	r3, [r7, #20]
 800c2b2:	e007      	b.n	800c2c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f001 fd54 	bl	800dd6c <vTaskDelay>
    }
  }

  return (stat);
 800c2c4:	697b      	ldr	r3, [r7, #20]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20000034 	.word	0x20000034

0800c2d4 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f003 f94d 	bl	800f57c <pvTimerGetTimerID>
 800c2e2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d005      	beq.n	800c2f6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	6852      	ldr	r2, [r2, #4]
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	4798      	blx	r3
  }
}
 800c2f6:	bf00      	nop
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c300:	b580      	push	{r7, lr}
 800c302:	b08e      	sub	sp, #56	; 0x38
 800c304:	af02      	add	r7, sp, #8
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	607a      	str	r2, [r7, #4]
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	460b      	mov	r3, r1
 800c30e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c310:	2300      	movs	r3, #0
 800c312:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c314:	f3ef 8305 	mrs	r3, IPSR
 800c318:	61bb      	str	r3, [r7, #24]
  return(result);
 800c31a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d16a      	bne.n	800c3f6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c320:	f3ef 8310 	mrs	r3, PRIMASK
 800c324:	617b      	str	r3, [r7, #20]
  return(result);
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d105      	bne.n	800c338 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c32c:	f3ef 8311 	mrs	r3, BASEPRI
 800c330:	613b      	str	r3, [r7, #16]
  return(result);
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d003      	beq.n	800c340 <osTimerNew+0x40>
 800c338:	4b31      	ldr	r3, [pc, #196]	; (800c400 <osTimerNew+0x100>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d05a      	beq.n	800c3f6 <osTimerNew+0xf6>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d057      	beq.n	800c3f6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c346:	2008      	movs	r0, #8
 800c348:	f003 fb7a 	bl	800fa40 <pvPortMalloc>
 800c34c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d050      	beq.n	800c3f6 <osTimerNew+0xf6>
      callb->func = func;
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c360:	7afb      	ldrb	r3, [r7, #11]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <osTimerNew+0x6c>
        reload = pdFALSE;
 800c366:	2300      	movs	r3, #0
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
 800c36a:	e001      	b.n	800c370 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800c36c:	2301      	movs	r3, #1
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800c370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c374:	623b      	str	r3, [r7, #32]
      name = NULL;
 800c376:	2300      	movs	r3, #0
 800c378:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01c      	beq.n	800c3ba <osTimerNew+0xba>
        if (attr->name != NULL) {
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <osTimerNew+0x8e>
          name = attr->name;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d006      	beq.n	800c3a4 <osTimerNew+0xa4>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	2b2b      	cmp	r3, #43	; 0x2b
 800c39c:	d902      	bls.n	800c3a4 <osTimerNew+0xa4>
          mem = 1;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	623b      	str	r3, [r7, #32]
 800c3a2:	e00c      	b.n	800c3be <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d108      	bne.n	800c3be <osTimerNew+0xbe>
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d104      	bne.n	800c3be <osTimerNew+0xbe>
            mem = 0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	623b      	str	r3, [r7, #32]
 800c3b8:	e001      	b.n	800c3be <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d10c      	bne.n	800c3de <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	4b0e      	ldr	r3, [pc, #56]	; (800c404 <osTimerNew+0x104>)
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3d6:	f002 fd5c 	bl	800ee92 <xTimerCreateStatic>
 800c3da:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3dc:	e00b      	b.n	800c3f6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d108      	bne.n	800c3f6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c3e4:	4b07      	ldr	r3, [pc, #28]	; (800c404 <osTimerNew+0x104>)
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3f0:	f002 fd2e 	bl	800ee50 <xTimerCreate>
 800c3f4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3730      	adds	r7, #48	; 0x30
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20000034 	.word	0x20000034
 800c404:	0800c2d5 	.word	0x0800c2d5

0800c408 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08a      	sub	sp, #40	; 0x28
 800c40c:	af02      	add	r7, sp, #8
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c416:	f3ef 8305 	mrs	r3, IPSR
 800c41a:	617b      	str	r3, [r7, #20]
  return(result);
 800c41c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10f      	bne.n	800c442 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c422:	f3ef 8310 	mrs	r3, PRIMASK
 800c426:	613b      	str	r3, [r7, #16]
  return(result);
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d105      	bne.n	800c43a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c42e:	f3ef 8311 	mrs	r3, BASEPRI
 800c432:	60fb      	str	r3, [r7, #12]
  return(result);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d007      	beq.n	800c44a <osTimerStart+0x42>
 800c43a:	4b12      	ldr	r3, [pc, #72]	; (800c484 <osTimerStart+0x7c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d103      	bne.n	800c44a <osTimerStart+0x42>
    stat = osErrorISR;
 800c442:	f06f 0305 	mvn.w	r3, #5
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	e017      	b.n	800c47a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d103      	bne.n	800c458 <osTimerStart+0x50>
    stat = osErrorParameter;
 800c450:	f06f 0303 	mvn.w	r3, #3
 800c454:	61fb      	str	r3, [r7, #28]
 800c456:	e010      	b.n	800c47a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c458:	2300      	movs	r3, #0
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	2300      	movs	r3, #0
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	2104      	movs	r1, #4
 800c462:	69b8      	ldr	r0, [r7, #24]
 800c464:	f002 fd8c 	bl	800ef80 <xTimerGenericCommand>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d102      	bne.n	800c474 <osTimerStart+0x6c>
      stat = osOK;
 800c46e:	2300      	movs	r3, #0
 800c470:	61fb      	str	r3, [r7, #28]
 800c472:	e002      	b.n	800c47a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800c474:	f06f 0302 	mvn.w	r3, #2
 800c478:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800c47a:	69fb      	ldr	r3, [r7, #28]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3720      	adds	r7, #32
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20000034 	.word	0x20000034

0800c488 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08c      	sub	sp, #48	; 0x30
 800c48c:	af02      	add	r7, sp, #8
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c494:	2300      	movs	r3, #0
 800c496:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c498:	f3ef 8305 	mrs	r3, IPSR
 800c49c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c49e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f040 8087 	bne.w	800c5b4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c4aa:	617b      	str	r3, [r7, #20]
  return(result);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d105      	bne.n	800c4be <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c4b2:	f3ef 8311 	mrs	r3, BASEPRI
 800c4b6:	613b      	str	r3, [r7, #16]
  return(result);
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d003      	beq.n	800c4c6 <osSemaphoreNew+0x3e>
 800c4be:	4b40      	ldr	r3, [pc, #256]	; (800c5c0 <osSemaphoreNew+0x138>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d076      	beq.n	800c5b4 <osSemaphoreNew+0x12c>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d073      	beq.n	800c5b4 <osSemaphoreNew+0x12c>
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d86f      	bhi.n	800c5b4 <osSemaphoreNew+0x12c>
    mem = -1;
 800c4d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d015      	beq.n	800c50c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <osSemaphoreNew+0x6e>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	2b4f      	cmp	r3, #79	; 0x4f
 800c4ee:	d902      	bls.n	800c4f6 <osSemaphoreNew+0x6e>
        mem = 1;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	623b      	str	r3, [r7, #32]
 800c4f4:	e00c      	b.n	800c510 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d108      	bne.n	800c510 <osSemaphoreNew+0x88>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d104      	bne.n	800c510 <osSemaphoreNew+0x88>
          mem = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	623b      	str	r3, [r7, #32]
 800c50a:	e001      	b.n	800c510 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c516:	d04d      	beq.n	800c5b4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d129      	bne.n	800c572 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d10b      	bne.n	800c53c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	689a      	ldr	r2, [r3, #8]
 800c528:	2303      	movs	r3, #3
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	4613      	mov	r3, r2
 800c52e:	2200      	movs	r2, #0
 800c530:	2100      	movs	r1, #0
 800c532:	2001      	movs	r0, #1
 800c534:	f000 fada 	bl	800caec <xQueueGenericCreateStatic>
 800c538:	6278      	str	r0, [r7, #36]	; 0x24
 800c53a:	e005      	b.n	800c548 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800c53c:	2203      	movs	r2, #3
 800c53e:	2100      	movs	r1, #0
 800c540:	2001      	movs	r0, #1
 800c542:	f000 fb46 	bl	800cbd2 <xQueueGenericCreate>
 800c546:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d022      	beq.n	800c594 <osSemaphoreNew+0x10c>
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d01f      	beq.n	800c594 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c554:	2300      	movs	r3, #0
 800c556:	2200      	movs	r2, #0
 800c558:	2100      	movs	r1, #0
 800c55a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c55c:	f000 fc02 	bl	800cd64 <xQueueGenericSend>
 800c560:	4603      	mov	r3, r0
 800c562:	2b01      	cmp	r3, #1
 800c564:	d016      	beq.n	800c594 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800c566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c568:	f001 f892 	bl	800d690 <vQueueDelete>
            hSemaphore = NULL;
 800c56c:	2300      	movs	r3, #0
 800c56e:	627b      	str	r3, [r7, #36]	; 0x24
 800c570:	e010      	b.n	800c594 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d108      	bne.n	800c58a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	461a      	mov	r2, r3
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f000 fb88 	bl	800cc96 <xQueueCreateCountingSemaphoreStatic>
 800c586:	6278      	str	r0, [r7, #36]	; 0x24
 800c588:	e004      	b.n	800c594 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c58a:	68b9      	ldr	r1, [r7, #8]
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 fbb7 	bl	800cd00 <xQueueCreateCountingSemaphore>
 800c592:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00c      	beq.n	800c5b4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d003      	beq.n	800c5a8 <osSemaphoreNew+0x120>
          name = attr->name;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	61fb      	str	r3, [r7, #28]
 800c5a6:	e001      	b.n	800c5ac <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c5ac:	69f9      	ldr	r1, [r7, #28]
 800c5ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5b0:	f001 f9b8 	bl	800d924 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3728      	adds	r7, #40	; 0x28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000034 	.word	0x20000034

0800c5c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d103      	bne.n	800c5e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c5dc:	f06f 0303 	mvn.w	r3, #3
 800c5e0:	61fb      	str	r3, [r7, #28]
 800c5e2:	e04b      	b.n	800c67c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5e4:	f3ef 8305 	mrs	r3, IPSR
 800c5e8:	617b      	str	r3, [r7, #20]
  return(result);
 800c5ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10f      	bne.n	800c610 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5f4:	613b      	str	r3, [r7, #16]
  return(result);
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d105      	bne.n	800c608 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c5fc:	f3ef 8311 	mrs	r3, BASEPRI
 800c600:	60fb      	str	r3, [r7, #12]
  return(result);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d026      	beq.n	800c656 <osSemaphoreAcquire+0x92>
 800c608:	4b1f      	ldr	r3, [pc, #124]	; (800c688 <osSemaphoreAcquire+0xc4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d122      	bne.n	800c656 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d003      	beq.n	800c61e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800c616:	f06f 0303 	mvn.w	r3, #3
 800c61a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c61c:	e02d      	b.n	800c67a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800c61e:	2300      	movs	r3, #0
 800c620:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	461a      	mov	r2, r3
 800c628:	2100      	movs	r1, #0
 800c62a:	69b8      	ldr	r0, [r7, #24]
 800c62c:	f000 ff96 	bl	800d55c <xQueueReceiveFromISR>
 800c630:	4603      	mov	r3, r0
 800c632:	2b01      	cmp	r3, #1
 800c634:	d003      	beq.n	800c63e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800c636:	f06f 0302 	mvn.w	r3, #2
 800c63a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c63c:	e01d      	b.n	800c67a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d01a      	beq.n	800c67a <osSemaphoreAcquire+0xb6>
 800c644:	4b11      	ldr	r3, [pc, #68]	; (800c68c <osSemaphoreAcquire+0xc8>)
 800c646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800c654:	e011      	b.n	800c67a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	69b8      	ldr	r0, [r7, #24]
 800c65a:	f000 fe77 	bl	800d34c <xQueueSemaphoreTake>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b01      	cmp	r3, #1
 800c662:	d00b      	beq.n	800c67c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d003      	beq.n	800c672 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800c66a:	f06f 0301 	mvn.w	r3, #1
 800c66e:	61fb      	str	r3, [r7, #28]
 800c670:	e004      	b.n	800c67c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800c672:	f06f 0302 	mvn.w	r3, #2
 800c676:	61fb      	str	r3, [r7, #28]
 800c678:	e000      	b.n	800c67c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800c67a:	bf00      	nop
      }
    }
  }

  return (stat);
 800c67c:	69fb      	ldr	r3, [r7, #28]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3720      	adds	r7, #32
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20000034 	.word	0x20000034
 800c68c:	e000ed04 	.word	0xe000ed04

0800c690 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c690:	b580      	push	{r7, lr}
 800c692:	b088      	sub	sp, #32
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d103      	bne.n	800c6ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c6a6:	f06f 0303 	mvn.w	r3, #3
 800c6aa:	61fb      	str	r3, [r7, #28]
 800c6ac:	e03e      	b.n	800c72c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6ae:	f3ef 8305 	mrs	r3, IPSR
 800c6b2:	617b      	str	r3, [r7, #20]
  return(result);
 800c6b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10f      	bne.n	800c6da <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6ba:	f3ef 8310 	mrs	r3, PRIMASK
 800c6be:	613b      	str	r3, [r7, #16]
  return(result);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d105      	bne.n	800c6d2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c6c6:	f3ef 8311 	mrs	r3, BASEPRI
 800c6ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d01e      	beq.n	800c710 <osSemaphoreRelease+0x80>
 800c6d2:	4b19      	ldr	r3, [pc, #100]	; (800c738 <osSemaphoreRelease+0xa8>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d11a      	bne.n	800c710 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c6de:	f107 0308 	add.w	r3, r7, #8
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	69b8      	ldr	r0, [r7, #24]
 800c6e6:	f000 fccb 	bl	800d080 <xQueueGiveFromISR>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d003      	beq.n	800c6f8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800c6f0:	f06f 0302 	mvn.w	r3, #2
 800c6f4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c6f6:	e018      	b.n	800c72a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d015      	beq.n	800c72a <osSemaphoreRelease+0x9a>
 800c6fe:	4b0f      	ldr	r3, [pc, #60]	; (800c73c <osSemaphoreRelease+0xac>)
 800c700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c70e:	e00c      	b.n	800c72a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c710:	2300      	movs	r3, #0
 800c712:	2200      	movs	r2, #0
 800c714:	2100      	movs	r1, #0
 800c716:	69b8      	ldr	r0, [r7, #24]
 800c718:	f000 fb24 	bl	800cd64 <xQueueGenericSend>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d004      	beq.n	800c72c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800c722:	f06f 0302 	mvn.w	r3, #2
 800c726:	61fb      	str	r3, [r7, #28]
 800c728:	e000      	b.n	800c72c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c72a:	bf00      	nop
    }
  }

  return (stat);
 800c72c:	69fb      	ldr	r3, [r7, #28]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3720      	adds	r7, #32
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000034 	.word	0x20000034
 800c73c:	e000ed04 	.word	0xe000ed04

0800c740 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b08c      	sub	sp, #48	; 0x30
 800c744:	af02      	add	r7, sp, #8
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c74c:	2300      	movs	r3, #0
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c750:	f3ef 8305 	mrs	r3, IPSR
 800c754:	61bb      	str	r3, [r7, #24]
  return(result);
 800c756:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d170      	bne.n	800c83e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c75c:	f3ef 8310 	mrs	r3, PRIMASK
 800c760:	617b      	str	r3, [r7, #20]
  return(result);
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d105      	bne.n	800c774 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c768:	f3ef 8311 	mrs	r3, BASEPRI
 800c76c:	613b      	str	r3, [r7, #16]
  return(result);
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d003      	beq.n	800c77c <osMessageQueueNew+0x3c>
 800c774:	4b34      	ldr	r3, [pc, #208]	; (800c848 <osMessageQueueNew+0x108>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d060      	beq.n	800c83e <osMessageQueueNew+0xfe>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d05d      	beq.n	800c83e <osMessageQueueNew+0xfe>
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d05a      	beq.n	800c83e <osMessageQueueNew+0xfe>
    mem = -1;
 800c788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c78c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d029      	beq.n	800c7e8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d012      	beq.n	800c7c2 <osMessageQueueNew+0x82>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	2b4f      	cmp	r3, #79	; 0x4f
 800c7a2:	d90e      	bls.n	800c7c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00a      	beq.n	800c7c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	695a      	ldr	r2, [r3, #20]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	fb01 f303 	mul.w	r3, r1, r3
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d302      	bcc.n	800c7c2 <osMessageQueueNew+0x82>
        mem = 1;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	623b      	str	r3, [r7, #32]
 800c7c0:	e014      	b.n	800c7ec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d110      	bne.n	800c7ec <osMessageQueueNew+0xac>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10c      	bne.n	800c7ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d108      	bne.n	800c7ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d104      	bne.n	800c7ec <osMessageQueueNew+0xac>
          mem = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	623b      	str	r3, [r7, #32]
 800c7e6:	e001      	b.n	800c7ec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d10c      	bne.n	800c80c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	691a      	ldr	r2, [r3, #16]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6899      	ldr	r1, [r3, #8]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	460b      	mov	r3, r1
 800c800:	68b9      	ldr	r1, [r7, #8]
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 f972 	bl	800caec <xQueueGenericCreateStatic>
 800c808:	6278      	str	r0, [r7, #36]	; 0x24
 800c80a:	e008      	b.n	800c81e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d105      	bne.n	800c81e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800c812:	2200      	movs	r2, #0
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 f9db 	bl	800cbd2 <xQueueGenericCreate>
 800c81c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00c      	beq.n	800c83e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <osMessageQueueNew+0xf2>
        name = attr->name;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	61fb      	str	r3, [r7, #28]
 800c830:	e001      	b.n	800c836 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800c832:	2300      	movs	r3, #0
 800c834:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800c836:	69f9      	ldr	r1, [r7, #28]
 800c838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c83a:	f001 f873 	bl	800d924 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c840:	4618      	mov	r0, r3
 800c842:	3728      	adds	r7, #40	; 0x28
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	20000034 	.word	0x20000034

0800c84c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	4a07      	ldr	r2, [pc, #28]	; (800c878 <vApplicationGetIdleTaskMemory+0x2c>)
 800c85c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	4a06      	ldr	r2, [pc, #24]	; (800c87c <vApplicationGetIdleTaskMemory+0x30>)
 800c862:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2280      	movs	r2, #128	; 0x80
 800c868:	601a      	str	r2, [r3, #0]
}
 800c86a:	bf00      	nop
 800c86c:	3714      	adds	r7, #20
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	20000038 	.word	0x20000038
 800c87c:	20000094 	.word	0x20000094

0800c880 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4a07      	ldr	r2, [pc, #28]	; (800c8ac <vApplicationGetTimerTaskMemory+0x2c>)
 800c890:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	4a06      	ldr	r2, [pc, #24]	; (800c8b0 <vApplicationGetTimerTaskMemory+0x30>)
 800c896:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c89e:	601a      	str	r2, [r3, #0]
}
 800c8a0:	bf00      	nop
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	20000294 	.word	0x20000294
 800c8b0:	200002f0 	.word	0x200002f0

0800c8b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f103 0208 	add.w	r2, r3, #8
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f103 0208 	add.w	r2, r3, #8
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f103 0208 	add.w	r2, r3, #8
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c902:	bf00      	nop
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c90e:	b480      	push	{r7}
 800c910:	b085      	sub	sp, #20
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	1c5a      	adds	r2, r3, #1
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	601a      	str	r2, [r3, #0]
}
 800c94a:	bf00      	nop
 800c94c:	3714      	adds	r7, #20
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c956:	b480      	push	{r7}
 800c958:	b085      	sub	sp, #20
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c96c:	d103      	bne.n	800c976 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	e00c      	b.n	800c990 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3308      	adds	r3, #8
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	e002      	b.n	800c984 <vListInsert+0x2e>
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d2f6      	bcs.n	800c97e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	683a      	ldr	r2, [r7, #0]
 800c99e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	601a      	str	r2, [r3, #0]
}
 800c9bc:	bf00      	nop
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	6892      	ldr	r2, [r2, #8]
 800c9de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	6852      	ldr	r2, [r2, #4]
 800c9e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d103      	bne.n	800c9fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	1e5a      	subs	r2, r3, #1
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d109      	bne.n	800ca44 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	60bb      	str	r3, [r7, #8]
 800ca42:	e7fe      	b.n	800ca42 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ca44:	f002 fee2 	bl	800f80c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca50:	68f9      	ldr	r1, [r7, #12]
 800ca52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca54:	fb01 f303 	mul.w	r3, r1, r3
 800ca58:	441a      	add	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca74:	3b01      	subs	r3, #1
 800ca76:	68f9      	ldr	r1, [r7, #12]
 800ca78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca7a:	fb01 f303 	mul.w	r3, r1, r3
 800ca7e:	441a      	add	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	22ff      	movs	r2, #255	; 0xff
 800ca88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	22ff      	movs	r2, #255	; 0xff
 800ca90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d114      	bne.n	800cac4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d01a      	beq.n	800cad8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3310      	adds	r3, #16
 800caa6:	4618      	mov	r0, r3
 800caa8:	f001 fc26 	bl	800e2f8 <xTaskRemoveFromEventList>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d012      	beq.n	800cad8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cab2:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <xQueueGenericReset+0xcc>)
 800cab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	e009      	b.n	800cad8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	3310      	adds	r3, #16
 800cac8:	4618      	mov	r0, r3
 800caca:	f7ff fef3 	bl	800c8b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3324      	adds	r3, #36	; 0x24
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7ff feee 	bl	800c8b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cad8:	f002 fec6 	bl	800f868 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cadc:	2301      	movs	r3, #1
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08e      	sub	sp, #56	; 0x38
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d109      	bne.n	800cb14 <xQueueGenericCreateStatic+0x28>
 800cb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb04:	f383 8811 	msr	BASEPRI, r3
 800cb08:	f3bf 8f6f 	isb	sy
 800cb0c:	f3bf 8f4f 	dsb	sy
 800cb10:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb12:	e7fe      	b.n	800cb12 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d109      	bne.n	800cb2e <xQueueGenericCreateStatic+0x42>
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2c:	e7fe      	b.n	800cb2c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d002      	beq.n	800cb3a <xQueueGenericCreateStatic+0x4e>
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <xQueueGenericCreateStatic+0x52>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e000      	b.n	800cb40 <xQueueGenericCreateStatic+0x54>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d109      	bne.n	800cb58 <xQueueGenericCreateStatic+0x6c>
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	623b      	str	r3, [r7, #32]
 800cb56:	e7fe      	b.n	800cb56 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d102      	bne.n	800cb64 <xQueueGenericCreateStatic+0x78>
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <xQueueGenericCreateStatic+0x7c>
 800cb64:	2301      	movs	r3, #1
 800cb66:	e000      	b.n	800cb6a <xQueueGenericCreateStatic+0x7e>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d109      	bne.n	800cb82 <xQueueGenericCreateStatic+0x96>
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	61fb      	str	r3, [r7, #28]
 800cb80:	e7fe      	b.n	800cb80 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cb82:	2350      	movs	r3, #80	; 0x50
 800cb84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	2b50      	cmp	r3, #80	; 0x50
 800cb8a:	d009      	beq.n	800cba0 <xQueueGenericCreateStatic+0xb4>
 800cb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	61bb      	str	r3, [r7, #24]
 800cb9e:	e7fe      	b.n	800cb9e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cba0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00d      	beq.n	800cbc8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbb4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	68b9      	ldr	r1, [r7, #8]
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 f844 	bl	800cc50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3730      	adds	r7, #48	; 0x30
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b08a      	sub	sp, #40	; 0x28
 800cbd6:	af02      	add	r7, sp, #8
 800cbd8:	60f8      	str	r0, [r7, #12]
 800cbda:	60b9      	str	r1, [r7, #8]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d109      	bne.n	800cbfa <xQueueGenericCreate+0x28>
 800cbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbea:	f383 8811 	msr	BASEPRI, r3
 800cbee:	f3bf 8f6f 	isb	sy
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	613b      	str	r3, [r7, #16]
 800cbf8:	e7fe      	b.n	800cbf8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d102      	bne.n	800cc06 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	61fb      	str	r3, [r7, #28]
 800cc04:	e004      	b.n	800cc10 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	fb02 f303 	mul.w	r3, r2, r3
 800cc0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	3350      	adds	r3, #80	; 0x50
 800cc14:	4618      	mov	r0, r3
 800cc16:	f002 ff13 	bl	800fa40 <pvPortMalloc>
 800cc1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d011      	beq.n	800cc46 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	3350      	adds	r3, #80	; 0x50
 800cc2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc34:	79fa      	ldrb	r2, [r7, #7]
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	68b9      	ldr	r1, [r7, #8]
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f000 f805 	bl	800cc50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc46:	69bb      	ldr	r3, [r7, #24]
	}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3720      	adds	r7, #32
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d103      	bne.n	800cc6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e002      	b.n	800cc72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc7e:	2101      	movs	r1, #1
 800cc80:	69b8      	ldr	r0, [r7, #24]
 800cc82:	f7ff fecb 	bl	800ca1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	78fa      	ldrb	r2, [r7, #3]
 800cc8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc8e:	bf00      	nop
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b08a      	sub	sp, #40	; 0x28
 800cc9a:	af02      	add	r7, sp, #8
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d109      	bne.n	800ccbc <xQueueCreateCountingSemaphoreStatic+0x26>
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	61bb      	str	r3, [r7, #24]
 800ccba:	e7fe      	b.n	800ccba <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d909      	bls.n	800ccd8 <xQueueCreateCountingSemaphoreStatic+0x42>
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	617b      	str	r3, [r7, #20]
 800ccd6:	e7fe      	b.n	800ccd6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ccd8:	2302      	movs	r3, #2
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	2100      	movs	r1, #0
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f7ff ff02 	bl	800caec <xQueueGenericCreateStatic>
 800cce8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ccf6:	69fb      	ldr	r3, [r7, #28]
	}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3720      	adds	r7, #32
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d109      	bne.n	800cd24 <xQueueCreateCountingSemaphore+0x24>
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	e7fe      	b.n	800cd22 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d909      	bls.n	800cd40 <xQueueCreateCountingSemaphore+0x40>
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	60fb      	str	r3, [r7, #12]
 800cd3e:	e7fe      	b.n	800cd3e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cd40:	2202      	movs	r2, #2
 800cd42:	2100      	movs	r1, #0
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff ff44 	bl	800cbd2 <xQueueGenericCreate>
 800cd4a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d002      	beq.n	800cd58 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cd58:	697b      	ldr	r3, [r7, #20]
	}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3718      	adds	r7, #24
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
	...

0800cd64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08e      	sub	sp, #56	; 0x38
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
 800cd70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd72:	2300      	movs	r3, #0
 800cd74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d109      	bne.n	800cd94 <xQueueGenericSend+0x30>
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd92:	e7fe      	b.n	800cd92 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d103      	bne.n	800cda2 <xQueueGenericSend+0x3e>
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <xQueueGenericSend+0x42>
 800cda2:	2301      	movs	r3, #1
 800cda4:	e000      	b.n	800cda8 <xQueueGenericSend+0x44>
 800cda6:	2300      	movs	r3, #0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d109      	bne.n	800cdc0 <xQueueGenericSend+0x5c>
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdbe:	e7fe      	b.n	800cdbe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	d103      	bne.n	800cdce <xQueueGenericSend+0x6a>
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d101      	bne.n	800cdd2 <xQueueGenericSend+0x6e>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e000      	b.n	800cdd4 <xQueueGenericSend+0x70>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d109      	bne.n	800cdec <xQueueGenericSend+0x88>
 800cdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	623b      	str	r3, [r7, #32]
 800cdea:	e7fe      	b.n	800cdea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdec:	f001 fc3a 	bl	800e664 <xTaskGetSchedulerState>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d102      	bne.n	800cdfc <xQueueGenericSend+0x98>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <xQueueGenericSend+0x9c>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e000      	b.n	800ce02 <xQueueGenericSend+0x9e>
 800ce00:	2300      	movs	r3, #0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d109      	bne.n	800ce1a <xQueueGenericSend+0xb6>
 800ce06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	61fb      	str	r3, [r7, #28]
 800ce18:	e7fe      	b.n	800ce18 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce1a:	f002 fcf7 	bl	800f80c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d302      	bcc.n	800ce30 <xQueueGenericSend+0xcc>
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	d129      	bne.n	800ce84 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	68b9      	ldr	r1, [r7, #8]
 800ce34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce36:	f000 fc65 	bl	800d704 <prvCopyDataToQueue>
 800ce3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d010      	beq.n	800ce66 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	3324      	adds	r3, #36	; 0x24
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 fa55 	bl	800e2f8 <xTaskRemoveFromEventList>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d013      	beq.n	800ce7c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce54:	4b3f      	ldr	r3, [pc, #252]	; (800cf54 <xQueueGenericSend+0x1f0>)
 800ce56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	e00a      	b.n	800ce7c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d007      	beq.n	800ce7c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce6c:	4b39      	ldr	r3, [pc, #228]	; (800cf54 <xQueueGenericSend+0x1f0>)
 800ce6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce7c:	f002 fcf4 	bl	800f868 <vPortExitCritical>
				return pdPASS;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e063      	b.n	800cf4c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d103      	bne.n	800ce92 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce8a:	f002 fced 	bl	800f868 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e05c      	b.n	800cf4c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d106      	bne.n	800cea6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce98:	f107 0314 	add.w	r3, r7, #20
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f001 fa8d 	bl	800e3bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cea2:	2301      	movs	r3, #1
 800cea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cea6:	f002 fcdf 	bl	800f868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ceaa:	f000 fff7 	bl	800de9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ceae:	f002 fcad 	bl	800f80c <vPortEnterCritical>
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ceb8:	b25b      	sxtb	r3, r3
 800ceba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cebe:	d103      	bne.n	800cec8 <xQueueGenericSend+0x164>
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cece:	b25b      	sxtb	r3, r3
 800ced0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ced4:	d103      	bne.n	800cede <xQueueGenericSend+0x17a>
 800ced6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cede:	f002 fcc3 	bl	800f868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cee2:	1d3a      	adds	r2, r7, #4
 800cee4:	f107 0314 	add.w	r3, r7, #20
 800cee8:	4611      	mov	r1, r2
 800ceea:	4618      	mov	r0, r3
 800ceec:	f001 fa7c 	bl	800e3e8 <xTaskCheckForTimeOut>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d124      	bne.n	800cf40 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cef8:	f000 fcfc 	bl	800d8f4 <prvIsQueueFull>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d018      	beq.n	800cf34 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	3310      	adds	r3, #16
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	4611      	mov	r1, r2
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f001 f9a6 	bl	800e25c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf12:	f000 fc87 	bl	800d824 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf16:	f000 ffcf 	bl	800deb8 <xTaskResumeAll>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f47f af7c 	bne.w	800ce1a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800cf22:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <xQueueGenericSend+0x1f0>)
 800cf24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	e772      	b.n	800ce1a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf36:	f000 fc75 	bl	800d824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf3a:	f000 ffbd 	bl	800deb8 <xTaskResumeAll>
 800cf3e:	e76c      	b.n	800ce1a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf42:	f000 fc6f 	bl	800d824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf46:	f000 ffb7 	bl	800deb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3738      	adds	r7, #56	; 0x38
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	e000ed04 	.word	0xe000ed04

0800cf58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08e      	sub	sp, #56	; 0x38
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
 800cf64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d109      	bne.n	800cf84 <xQueueGenericSendFromISR+0x2c>
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	627b      	str	r3, [r7, #36]	; 0x24
 800cf82:	e7fe      	b.n	800cf82 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d103      	bne.n	800cf92 <xQueueGenericSendFromISR+0x3a>
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d101      	bne.n	800cf96 <xQueueGenericSendFromISR+0x3e>
 800cf92:	2301      	movs	r3, #1
 800cf94:	e000      	b.n	800cf98 <xQueueGenericSendFromISR+0x40>
 800cf96:	2300      	movs	r3, #0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d109      	bne.n	800cfb0 <xQueueGenericSendFromISR+0x58>
 800cf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	623b      	str	r3, [r7, #32]
 800cfae:	e7fe      	b.n	800cfae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d103      	bne.n	800cfbe <xQueueGenericSendFromISR+0x66>
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d101      	bne.n	800cfc2 <xQueueGenericSendFromISR+0x6a>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e000      	b.n	800cfc4 <xQueueGenericSendFromISR+0x6c>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d109      	bne.n	800cfdc <xQueueGenericSendFromISR+0x84>
 800cfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	61fb      	str	r3, [r7, #28]
 800cfda:	e7fe      	b.n	800cfda <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfdc:	f002 fcf2 	bl	800f9c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfe0:	f3ef 8211 	mrs	r2, BASEPRI
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	61ba      	str	r2, [r7, #24]
 800cff6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cff8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cffa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d004:	429a      	cmp	r2, r3
 800d006:	d302      	bcc.n	800d00e <xQueueGenericSendFromISR+0xb6>
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d12c      	bne.n	800d068 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	68b9      	ldr	r1, [r7, #8]
 800d01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d01e:	f000 fb71 	bl	800d704 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d022:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d02a:	d112      	bne.n	800d052 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d030:	2b00      	cmp	r3, #0
 800d032:	d016      	beq.n	800d062 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d036:	3324      	adds	r3, #36	; 0x24
 800d038:	4618      	mov	r0, r3
 800d03a:	f001 f95d 	bl	800e2f8 <xTaskRemoveFromEventList>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00e      	beq.n	800d062 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00b      	beq.n	800d062 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	e007      	b.n	800d062 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d056:	3301      	adds	r3, #1
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	b25a      	sxtb	r2, r3
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d062:	2301      	movs	r3, #1
 800d064:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d066:	e001      	b.n	800d06c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d068:	2300      	movs	r3, #0
 800d06a:	637b      	str	r3, [r7, #52]	; 0x34
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3738      	adds	r7, #56	; 0x38
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08e      	sub	sp, #56	; 0x38
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	2b00      	cmp	r3, #0
 800d092:	d109      	bne.n	800d0a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800d094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d098:	f383 8811 	msr	BASEPRI, r3
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	f3bf 8f4f 	dsb	sy
 800d0a4:	623b      	str	r3, [r7, #32]
 800d0a6:	e7fe      	b.n	800d0a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d009      	beq.n	800d0c4 <xQueueGiveFromISR+0x44>
 800d0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	61fb      	str	r3, [r7, #28]
 800d0c2:	e7fe      	b.n	800d0c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d103      	bne.n	800d0d4 <xQueueGiveFromISR+0x54>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d101      	bne.n	800d0d8 <xQueueGiveFromISR+0x58>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e000      	b.n	800d0da <xQueueGiveFromISR+0x5a>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d109      	bne.n	800d0f2 <xQueueGiveFromISR+0x72>
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	61bb      	str	r3, [r7, #24]
 800d0f0:	e7fe      	b.n	800d0f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0f2:	f002 fc67 	bl	800f9c4 <vPortValidateInterruptPriority>
	__asm volatile
 800d0f6:	f3ef 8211 	mrs	r2, BASEPRI
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	617a      	str	r2, [r7, #20]
 800d10c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d10e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d116:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d11c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d11e:	429a      	cmp	r2, r3
 800d120:	d22b      	bcs.n	800d17a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d13c:	d112      	bne.n	800d164 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d142:	2b00      	cmp	r3, #0
 800d144:	d016      	beq.n	800d174 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	3324      	adds	r3, #36	; 0x24
 800d14a:	4618      	mov	r0, r3
 800d14c:	f001 f8d4 	bl	800e2f8 <xTaskRemoveFromEventList>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00e      	beq.n	800d174 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2201      	movs	r2, #1
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	e007      	b.n	800d174 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d168:	3301      	adds	r3, #1
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	b25a      	sxtb	r2, r3
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d174:	2301      	movs	r3, #1
 800d176:	637b      	str	r3, [r7, #52]	; 0x34
 800d178:	e001      	b.n	800d17e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	637b      	str	r3, [r7, #52]	; 0x34
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3738      	adds	r7, #56	; 0x38
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b08c      	sub	sp, #48	; 0x30
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d109      	bne.n	800d1c2 <xQueueReceive+0x2e>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	623b      	str	r3, [r7, #32]
 800d1c0:	e7fe      	b.n	800d1c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d103      	bne.n	800d1d0 <xQueueReceive+0x3c>
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <xQueueReceive+0x40>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e000      	b.n	800d1d6 <xQueueReceive+0x42>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d109      	bne.n	800d1ee <xQueueReceive+0x5a>
 800d1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	61fb      	str	r3, [r7, #28]
 800d1ec:	e7fe      	b.n	800d1ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1ee:	f001 fa39 	bl	800e664 <xTaskGetSchedulerState>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d102      	bne.n	800d1fe <xQueueReceive+0x6a>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <xQueueReceive+0x6e>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e000      	b.n	800d204 <xQueueReceive+0x70>
 800d202:	2300      	movs	r3, #0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d109      	bne.n	800d21c <xQueueReceive+0x88>
 800d208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	61bb      	str	r3, [r7, #24]
 800d21a:	e7fe      	b.n	800d21a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d21c:	f002 faf6 	bl	800f80c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d224:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d01f      	beq.n	800d26c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d22c:	68b9      	ldr	r1, [r7, #8]
 800d22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d230:	f000 fad2 	bl	800d7d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	1e5a      	subs	r2, r3, #1
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00f      	beq.n	800d264 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	3310      	adds	r3, #16
 800d248:	4618      	mov	r0, r3
 800d24a:	f001 f855 	bl	800e2f8 <xTaskRemoveFromEventList>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d007      	beq.n	800d264 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d254:	4b3c      	ldr	r3, [pc, #240]	; (800d348 <xQueueReceive+0x1b4>)
 800d256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d264:	f002 fb00 	bl	800f868 <vPortExitCritical>
				return pdPASS;
 800d268:	2301      	movs	r3, #1
 800d26a:	e069      	b.n	800d340 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d272:	f002 faf9 	bl	800f868 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d276:	2300      	movs	r3, #0
 800d278:	e062      	b.n	800d340 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d106      	bne.n	800d28e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d280:	f107 0310 	add.w	r3, r7, #16
 800d284:	4618      	mov	r0, r3
 800d286:	f001 f899 	bl	800e3bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d28a:	2301      	movs	r3, #1
 800d28c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d28e:	f002 faeb 	bl	800f868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d292:	f000 fe03 	bl	800de9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d296:	f002 fab9 	bl	800f80c <vPortEnterCritical>
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2a0:	b25b      	sxtb	r3, r3
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2a6:	d103      	bne.n	800d2b0 <xQueueReceive+0x11c>
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2b6:	b25b      	sxtb	r3, r3
 800d2b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2bc:	d103      	bne.n	800d2c6 <xQueueReceive+0x132>
 800d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2c6:	f002 facf 	bl	800f868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2ca:	1d3a      	adds	r2, r7, #4
 800d2cc:	f107 0310 	add.w	r3, r7, #16
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f001 f888 	bl	800e3e8 <xTaskCheckForTimeOut>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d123      	bne.n	800d326 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2e0:	f000 faf2 	bl	800d8c8 <prvIsQueueEmpty>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d017      	beq.n	800d31a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	3324      	adds	r3, #36	; 0x24
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 ffb2 	bl	800e25c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fa:	f000 fa93 	bl	800d824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2fe:	f000 fddb 	bl	800deb8 <xTaskResumeAll>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d189      	bne.n	800d21c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800d308:	4b0f      	ldr	r3, [pc, #60]	; (800d348 <xQueueReceive+0x1b4>)
 800d30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	e780      	b.n	800d21c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d31c:	f000 fa82 	bl	800d824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d320:	f000 fdca 	bl	800deb8 <xTaskResumeAll>
 800d324:	e77a      	b.n	800d21c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d328:	f000 fa7c 	bl	800d824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d32c:	f000 fdc4 	bl	800deb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d332:	f000 fac9 	bl	800d8c8 <prvIsQueueEmpty>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f43f af6f 	beq.w	800d21c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d33e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d340:	4618      	mov	r0, r3
 800d342:	3730      	adds	r7, #48	; 0x30
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	e000ed04 	.word	0xe000ed04

0800d34c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b08e      	sub	sp, #56	; 0x38
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d356:	2300      	movs	r3, #0
 800d358:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d35e:	2300      	movs	r3, #0
 800d360:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d109      	bne.n	800d37c <xQueueSemaphoreTake+0x30>
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	623b      	str	r3, [r7, #32]
 800d37a:	e7fe      	b.n	800d37a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d380:	2b00      	cmp	r3, #0
 800d382:	d009      	beq.n	800d398 <xQueueSemaphoreTake+0x4c>
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	61fb      	str	r3, [r7, #28]
 800d396:	e7fe      	b.n	800d396 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d398:	f001 f964 	bl	800e664 <xTaskGetSchedulerState>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <xQueueSemaphoreTake+0x5c>
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <xQueueSemaphoreTake+0x60>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <xQueueSemaphoreTake+0x62>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d109      	bne.n	800d3c6 <xQueueSemaphoreTake+0x7a>
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	61bb      	str	r3, [r7, #24]
 800d3c4:	e7fe      	b.n	800d3c4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3c6:	f002 fa21 	bl	800f80c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d024      	beq.n	800d420 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	1e5a      	subs	r2, r3, #1
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d104      	bne.n	800d3f0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d3e6:	f001 faaf 	bl	800e948 <pvTaskIncrementMutexHeldCount>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00f      	beq.n	800d418 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	3310      	adds	r3, #16
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 ff7b 	bl	800e2f8 <xTaskRemoveFromEventList>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d007      	beq.n	800d418 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d408:	4b53      	ldr	r3, [pc, #332]	; (800d558 <xQueueSemaphoreTake+0x20c>)
 800d40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d418:	f002 fa26 	bl	800f868 <vPortExitCritical>
				return pdPASS;
 800d41c:	2301      	movs	r3, #1
 800d41e:	e096      	b.n	800d54e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d110      	bne.n	800d448 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d009      	beq.n	800d440 <xQueueSemaphoreTake+0xf4>
 800d42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	617b      	str	r3, [r7, #20]
 800d43e:	e7fe      	b.n	800d43e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d440:	f002 fa12 	bl	800f868 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d444:	2300      	movs	r3, #0
 800d446:	e082      	b.n	800d54e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d44e:	f107 030c 	add.w	r3, r7, #12
 800d452:	4618      	mov	r0, r3
 800d454:	f000 ffb2 	bl	800e3bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d458:	2301      	movs	r3, #1
 800d45a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d45c:	f002 fa04 	bl	800f868 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d460:	f000 fd1c 	bl	800de9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d464:	f002 f9d2 	bl	800f80c <vPortEnterCritical>
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d46e:	b25b      	sxtb	r3, r3
 800d470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d474:	d103      	bne.n	800d47e <xQueueSemaphoreTake+0x132>
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d484:	b25b      	sxtb	r3, r3
 800d486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d48a:	d103      	bne.n	800d494 <xQueueSemaphoreTake+0x148>
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	2200      	movs	r2, #0
 800d490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d494:	f002 f9e8 	bl	800f868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d498:	463a      	mov	r2, r7
 800d49a:	f107 030c 	add.w	r3, r7, #12
 800d49e:	4611      	mov	r1, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 ffa1 	bl	800e3e8 <xTaskCheckForTimeOut>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d132      	bne.n	800d512 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4ae:	f000 fa0b 	bl	800d8c8 <prvIsQueueEmpty>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d026      	beq.n	800d506 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d109      	bne.n	800d4d4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800d4c0:	f002 f9a4 	bl	800f80c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f001 f8e9 	bl	800e6a0 <xTaskPriorityInherit>
 800d4ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d4d0:	f002 f9ca 	bl	800f868 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	3324      	adds	r3, #36	; 0x24
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	4611      	mov	r1, r2
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 febd 	bl	800e25c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4e4:	f000 f99e 	bl	800d824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4e8:	f000 fce6 	bl	800deb8 <xTaskResumeAll>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f47f af69 	bne.w	800d3c6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800d4f4:	4b18      	ldr	r3, [pc, #96]	; (800d558 <xQueueSemaphoreTake+0x20c>)
 800d4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	e75f      	b.n	800d3c6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d508:	f000 f98c 	bl	800d824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d50c:	f000 fcd4 	bl	800deb8 <xTaskResumeAll>
 800d510:	e759      	b.n	800d3c6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d514:	f000 f986 	bl	800d824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d518:	f000 fcce 	bl	800deb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d51c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d51e:	f000 f9d3 	bl	800d8c8 <prvIsQueueEmpty>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	f43f af4e 	beq.w	800d3c6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00d      	beq.n	800d54c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800d530:	f002 f96c 	bl	800f80c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d536:	f000 f8cd 	bl	800d6d4 <prvGetDisinheritPriorityAfterTimeout>
 800d53a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d542:	4618      	mov	r0, r3
 800d544:	f001 f980 	bl	800e848 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d548:	f002 f98e 	bl	800f868 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d54c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3738      	adds	r7, #56	; 0x38
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08e      	sub	sp, #56	; 0x38
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d109      	bne.n	800d586 <xQueueReceiveFromISR+0x2a>
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	623b      	str	r3, [r7, #32]
 800d584:	e7fe      	b.n	800d584 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d103      	bne.n	800d594 <xQueueReceiveFromISR+0x38>
 800d58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <xQueueReceiveFromISR+0x3c>
 800d594:	2301      	movs	r3, #1
 800d596:	e000      	b.n	800d59a <xQueueReceiveFromISR+0x3e>
 800d598:	2300      	movs	r3, #0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d109      	bne.n	800d5b2 <xQueueReceiveFromISR+0x56>
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	61fb      	str	r3, [r7, #28]
 800d5b0:	e7fe      	b.n	800d5b0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5b2:	f002 fa07 	bl	800f9c4 <vPortValidateInterruptPriority>
	__asm volatile
 800d5b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	61ba      	str	r2, [r7, #24]
 800d5cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d5ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d02f      	beq.n	800d63e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5e8:	68b9      	ldr	r1, [r7, #8]
 800d5ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ec:	f000 f8f4 	bl	800d7d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f2:	1e5a      	subs	r2, r3, #1
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d5f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d600:	d112      	bne.n	800d628 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d016      	beq.n	800d638 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60c:	3310      	adds	r3, #16
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 fe72 	bl	800e2f8 <xTaskRemoveFromEventList>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00e      	beq.n	800d638 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00b      	beq.n	800d638 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	e007      	b.n	800d638 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d62c:	3301      	adds	r3, #1
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	b25a      	sxtb	r2, r3
 800d632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d638:	2301      	movs	r3, #1
 800d63a:	637b      	str	r3, [r7, #52]	; 0x34
 800d63c:	e001      	b.n	800d642 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800d63e:	2300      	movs	r3, #0
 800d640:	637b      	str	r3, [r7, #52]	; 0x34
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3738      	adds	r7, #56	; 0x38
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d109      	bne.n	800d678 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	60bb      	str	r3, [r7, #8]
 800d676:	e7fe      	b.n	800d676 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800d678:	f002 f8c8 	bl	800f80c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d680:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d682:	f002 f8f1 	bl	800f868 <vPortExitCritical>

	return uxReturn;
 800d686:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d109      	bne.n	800d6b6 <vQueueDelete+0x26>
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	60bb      	str	r3, [r7, #8]
 800d6b4:	e7fe      	b.n	800d6b4 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 f95c 	bl	800d974 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d102      	bne.n	800d6cc <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f002 fa7c 	bl	800fbc4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d6cc:	bf00      	nop
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d006      	beq.n	800d6f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	e001      	b.n	800d6f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
	}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d710:	2300      	movs	r3, #0
 800d712:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d718:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10d      	bne.n	800d73e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d14d      	bne.n	800d7c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	4618      	mov	r0, r3
 800d730:	f001 f81e 	bl	800e770 <xTaskPriorityDisinherit>
 800d734:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2200      	movs	r2, #0
 800d73a:	609a      	str	r2, [r3, #8]
 800d73c:	e043      	b.n	800d7c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d119      	bne.n	800d778 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6858      	ldr	r0, [r3, #4]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74c:	461a      	mov	r2, r3
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	f003 fdfa 	bl	8011348 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75c:	441a      	add	r2, r3
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d32b      	bcc.n	800d7c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	605a      	str	r2, [r3, #4]
 800d776:	e026      	b.n	800d7c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	68d8      	ldr	r0, [r3, #12]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d780:	461a      	mov	r2, r3
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	f003 fde0 	bl	8011348 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	68da      	ldr	r2, [r3, #12]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d790:	425b      	negs	r3, r3
 800d792:	441a      	add	r2, r3
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	68da      	ldr	r2, [r3, #12]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d207      	bcs.n	800d7b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	689a      	ldr	r2, [r3, #8]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ac:	425b      	negs	r3, r3
 800d7ae:	441a      	add	r2, r3
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d105      	bne.n	800d7c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d7ce:	697b      	ldr	r3, [r7, #20]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3718      	adds	r7, #24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d018      	beq.n	800d81c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	68da      	ldr	r2, [r3, #12]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f2:	441a      	add	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68da      	ldr	r2, [r3, #12]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	429a      	cmp	r2, r3
 800d802:	d303      	bcc.n	800d80c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	68d9      	ldr	r1, [r3, #12]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d814:	461a      	mov	r2, r3
 800d816:	6838      	ldr	r0, [r7, #0]
 800d818:	f003 fd96 	bl	8011348 <memcpy>
	}
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d82c:	f001 ffee 	bl	800f80c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d836:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d838:	e011      	b.n	800d85e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d012      	beq.n	800d868 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	3324      	adds	r3, #36	; 0x24
 800d846:	4618      	mov	r0, r3
 800d848:	f000 fd56 	bl	800e2f8 <xTaskRemoveFromEventList>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d852:	f000 fe29 	bl	800e4a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d856:	7bfb      	ldrb	r3, [r7, #15]
 800d858:	3b01      	subs	r3, #1
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d862:	2b00      	cmp	r3, #0
 800d864:	dce9      	bgt.n	800d83a <prvUnlockQueue+0x16>
 800d866:	e000      	b.n	800d86a <prvUnlockQueue+0x46>
					break;
 800d868:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	22ff      	movs	r2, #255	; 0xff
 800d86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d872:	f001 fff9 	bl	800f868 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d876:	f001 ffc9 	bl	800f80c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d880:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d882:	e011      	b.n	800d8a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d012      	beq.n	800d8b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	3310      	adds	r3, #16
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fd31 	bl	800e2f8 <xTaskRemoveFromEventList>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d001      	beq.n	800d8a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d89c:	f000 fe04 	bl	800e4a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dce9      	bgt.n	800d884 <prvUnlockQueue+0x60>
 800d8b0:	e000      	b.n	800d8b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	22ff      	movs	r2, #255	; 0xff
 800d8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d8bc:	f001 ffd4 	bl	800f868 <vPortExitCritical>
}
 800d8c0:	bf00      	nop
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8d0:	f001 ff9c 	bl	800f80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d102      	bne.n	800d8e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	60fb      	str	r3, [r7, #12]
 800d8e0:	e001      	b.n	800d8e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8e6:	f001 ffbf 	bl	800f868 <vPortExitCritical>

	return xReturn;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8fc:	f001 ff86 	bl	800f80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d908:	429a      	cmp	r2, r3
 800d90a:	d102      	bne.n	800d912 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	e001      	b.n	800d916 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d912:	2300      	movs	r3, #0
 800d914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d916:	f001 ffa7 	bl	800f868 <vPortExitCritical>

	return xReturn;
 800d91a:	68fb      	ldr	r3, [r7, #12]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d92e:	2300      	movs	r3, #0
 800d930:	60fb      	str	r3, [r7, #12]
 800d932:	e014      	b.n	800d95e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d934:	4a0e      	ldr	r2, [pc, #56]	; (800d970 <vQueueAddToRegistry+0x4c>)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10b      	bne.n	800d958 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d940:	490b      	ldr	r1, [pc, #44]	; (800d970 <vQueueAddToRegistry+0x4c>)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	683a      	ldr	r2, [r7, #0]
 800d946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d94a:	4a09      	ldr	r2, [pc, #36]	; (800d970 <vQueueAddToRegistry+0x4c>)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	4413      	add	r3, r2
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d956:	e005      	b.n	800d964 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	3301      	adds	r3, #1
 800d95c:	60fb      	str	r3, [r7, #12]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2b07      	cmp	r3, #7
 800d962:	d9e7      	bls.n	800d934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d964:	bf00      	nop
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	20004c54 	.word	0x20004c54

0800d974 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d97c:	2300      	movs	r3, #0
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	e016      	b.n	800d9b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d982:	4a10      	ldr	r2, [pc, #64]	; (800d9c4 <vQueueUnregisterQueue+0x50>)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	00db      	lsls	r3, r3, #3
 800d988:	4413      	add	r3, r2
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d10b      	bne.n	800d9aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d992:	4a0c      	ldr	r2, [pc, #48]	; (800d9c4 <vQueueUnregisterQueue+0x50>)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2100      	movs	r1, #0
 800d998:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d99c:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <vQueueUnregisterQueue+0x50>)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	4413      	add	r3, r2
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	605a      	str	r2, [r3, #4]
				break;
 800d9a8:	e005      	b.n	800d9b6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2b07      	cmp	r3, #7
 800d9b4:	d9e5      	bls.n	800d982 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d9b6:	bf00      	nop
 800d9b8:	3714      	adds	r7, #20
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	20004c54 	.word	0x20004c54

0800d9c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b086      	sub	sp, #24
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d9d8:	f001 ff18 	bl	800f80c <vPortEnterCritical>
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9e2:	b25b      	sxtb	r3, r3
 800d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9e8:	d103      	bne.n	800d9f2 <vQueueWaitForMessageRestricted+0x2a>
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9f8:	b25b      	sxtb	r3, r3
 800d9fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9fe:	d103      	bne.n	800da08 <vQueueWaitForMessageRestricted+0x40>
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da08:	f001 ff2e 	bl	800f868 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da10:	2b00      	cmp	r3, #0
 800da12:	d106      	bne.n	800da22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	3324      	adds	r3, #36	; 0x24
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 fc41 	bl	800e2a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da22:	6978      	ldr	r0, [r7, #20]
 800da24:	f7ff fefe 	bl	800d824 <prvUnlockQueue>
	}
 800da28:	bf00      	nop
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da30:	b580      	push	{r7, lr}
 800da32:	b08e      	sub	sp, #56	; 0x38
 800da34:	af04      	add	r7, sp, #16
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da40:	2b00      	cmp	r3, #0
 800da42:	d109      	bne.n	800da58 <xTaskCreateStatic+0x28>
 800da44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	623b      	str	r3, [r7, #32]
 800da56:	e7fe      	b.n	800da56 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800da58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d109      	bne.n	800da72 <xTaskCreateStatic+0x42>
 800da5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	61fb      	str	r3, [r7, #28]
 800da70:	e7fe      	b.n	800da70 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da72:	235c      	movs	r3, #92	; 0x5c
 800da74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	2b5c      	cmp	r3, #92	; 0x5c
 800da7a:	d009      	beq.n	800da90 <xTaskCreateStatic+0x60>
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	61bb      	str	r3, [r7, #24]
 800da8e:	e7fe      	b.n	800da8e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	2b00      	cmp	r3, #0
 800da96:	d01e      	beq.n	800dad6 <xTaskCreateStatic+0xa6>
 800da98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d01b      	beq.n	800dad6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daa6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	2202      	movs	r2, #2
 800daac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dab0:	2300      	movs	r3, #0
 800dab2:	9303      	str	r3, [sp, #12]
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	9302      	str	r3, [sp, #8]
 800dab8:	f107 0314 	add.w	r3, r7, #20
 800dabc:	9301      	str	r3, [sp, #4]
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	68b9      	ldr	r1, [r7, #8]
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 f850 	bl	800db6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dad0:	f000 f8dc 	bl	800dc8c <prvAddNewTaskToReadyList>
 800dad4:	e001      	b.n	800dada <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800dad6:	2300      	movs	r3, #0
 800dad8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dada:	697b      	ldr	r3, [r7, #20]
	}
 800dadc:	4618      	mov	r0, r3
 800dade:	3728      	adds	r7, #40	; 0x28
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08c      	sub	sp, #48	; 0x30
 800dae8:	af04      	add	r7, sp, #16
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	4613      	mov	r3, r2
 800daf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800daf4:	88fb      	ldrh	r3, [r7, #6]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4618      	mov	r0, r3
 800dafa:	f001 ffa1 	bl	800fa40 <pvPortMalloc>
 800dafe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00e      	beq.n	800db24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db06:	205c      	movs	r0, #92	; 0x5c
 800db08:	f001 ff9a 	bl	800fa40 <pvPortMalloc>
 800db0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	697a      	ldr	r2, [r7, #20]
 800db18:	631a      	str	r2, [r3, #48]	; 0x30
 800db1a:	e005      	b.n	800db28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db1c:	6978      	ldr	r0, [r7, #20]
 800db1e:	f002 f851 	bl	800fbc4 <vPortFree>
 800db22:	e001      	b.n	800db28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db24:	2300      	movs	r3, #0
 800db26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d017      	beq.n	800db5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	2200      	movs	r2, #0
 800db32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db36:	88fa      	ldrh	r2, [r7, #6]
 800db38:	2300      	movs	r3, #0
 800db3a:	9303      	str	r3, [sp, #12]
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	9302      	str	r3, [sp, #8]
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db42:	9301      	str	r3, [sp, #4]
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	68b9      	ldr	r1, [r7, #8]
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f000 f80e 	bl	800db6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db52:	69f8      	ldr	r0, [r7, #28]
 800db54:	f000 f89a 	bl	800dc8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db58:	2301      	movs	r3, #1
 800db5a:	61bb      	str	r3, [r7, #24]
 800db5c:	e002      	b.n	800db64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db64:	69bb      	ldr	r3, [r7, #24]
	}
 800db66:	4618      	mov	r0, r3
 800db68:	3720      	adds	r7, #32
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b088      	sub	sp, #32
 800db72:	af00      	add	r7, sp, #0
 800db74:	60f8      	str	r0, [r7, #12]
 800db76:	60b9      	str	r1, [r7, #8]
 800db78:	607a      	str	r2, [r7, #4]
 800db7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	461a      	mov	r2, r3
 800db86:	21a5      	movs	r1, #165	; 0xa5
 800db88:	f003 fbe9 	bl	801135e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800db96:	3b01      	subs	r3, #1
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	4413      	add	r3, r2
 800db9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	f023 0307 	bic.w	r3, r3, #7
 800dba4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	f003 0307 	and.w	r3, r3, #7
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d009      	beq.n	800dbc4 <prvInitialiseNewTask+0x56>
 800dbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	e7fe      	b.n	800dbc2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d01f      	beq.n	800dc0a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbca:	2300      	movs	r3, #0
 800dbcc:	61fb      	str	r3, [r7, #28]
 800dbce:	e012      	b.n	800dbf6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbd0:	68ba      	ldr	r2, [r7, #8]
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	7819      	ldrb	r1, [r3, #0]
 800dbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	4413      	add	r3, r2
 800dbde:	3334      	adds	r3, #52	; 0x34
 800dbe0:	460a      	mov	r2, r1
 800dbe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	4413      	add	r3, r2
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d006      	beq.n	800dbfe <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	61fb      	str	r3, [r7, #28]
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	2b0f      	cmp	r3, #15
 800dbfa:	d9e9      	bls.n	800dbd0 <prvInitialiseNewTask+0x62>
 800dbfc:	e000      	b.n	800dc00 <prvInitialiseNewTask+0x92>
			{
				break;
 800dbfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc08:	e003      	b.n	800dc12 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	2b37      	cmp	r3, #55	; 0x37
 800dc16:	d901      	bls.n	800dc1c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc18:	2337      	movs	r3, #55	; 0x37
 800dc1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	3304      	adds	r3, #4
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fe fe5e 	bl	800c8f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	3318      	adds	r3, #24
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fe fe59 	bl	800c8f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc60:	2200      	movs	r2, #0
 800dc62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	68f9      	ldr	r1, [r7, #12]
 800dc6a:	69b8      	ldr	r0, [r7, #24]
 800dc6c:	f001 fca6 	bl	800f5bc <pxPortInitialiseStack>
 800dc70:	4602      	mov	r2, r0
 800dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc82:	bf00      	nop
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
	...

0800dc8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc94:	f001 fdba 	bl	800f80c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc98:	4b2d      	ldr	r3, [pc, #180]	; (800dd50 <prvAddNewTaskToReadyList+0xc4>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	4a2c      	ldr	r2, [pc, #176]	; (800dd50 <prvAddNewTaskToReadyList+0xc4>)
 800dca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dca2:	4b2c      	ldr	r3, [pc, #176]	; (800dd54 <prvAddNewTaskToReadyList+0xc8>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d109      	bne.n	800dcbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcaa:	4a2a      	ldr	r2, [pc, #168]	; (800dd54 <prvAddNewTaskToReadyList+0xc8>)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcb0:	4b27      	ldr	r3, [pc, #156]	; (800dd50 <prvAddNewTaskToReadyList+0xc4>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d110      	bne.n	800dcda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dcb8:	f000 fc1a 	bl	800e4f0 <prvInitialiseTaskLists>
 800dcbc:	e00d      	b.n	800dcda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dcbe:	4b26      	ldr	r3, [pc, #152]	; (800dd58 <prvAddNewTaskToReadyList+0xcc>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d109      	bne.n	800dcda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dcc6:	4b23      	ldr	r3, [pc, #140]	; (800dd54 <prvAddNewTaskToReadyList+0xc8>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d802      	bhi.n	800dcda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dcd4:	4a1f      	ldr	r2, [pc, #124]	; (800dd54 <prvAddNewTaskToReadyList+0xc8>)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dcda:	4b20      	ldr	r3, [pc, #128]	; (800dd5c <prvAddNewTaskToReadyList+0xd0>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	3301      	adds	r3, #1
 800dce0:	4a1e      	ldr	r2, [pc, #120]	; (800dd5c <prvAddNewTaskToReadyList+0xd0>)
 800dce2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dce4:	4b1d      	ldr	r3, [pc, #116]	; (800dd5c <prvAddNewTaskToReadyList+0xd0>)
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf0:	4b1b      	ldr	r3, [pc, #108]	; (800dd60 <prvAddNewTaskToReadyList+0xd4>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d903      	bls.n	800dd00 <prvAddNewTaskToReadyList+0x74>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfc:	4a18      	ldr	r2, [pc, #96]	; (800dd60 <prvAddNewTaskToReadyList+0xd4>)
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd04:	4613      	mov	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4a15      	ldr	r2, [pc, #84]	; (800dd64 <prvAddNewTaskToReadyList+0xd8>)
 800dd0e:	441a      	add	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3304      	adds	r3, #4
 800dd14:	4619      	mov	r1, r3
 800dd16:	4610      	mov	r0, r2
 800dd18:	f7fe fdf9 	bl	800c90e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd1c:	f001 fda4 	bl	800f868 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd20:	4b0d      	ldr	r3, [pc, #52]	; (800dd58 <prvAddNewTaskToReadyList+0xcc>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00e      	beq.n	800dd46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd28:	4b0a      	ldr	r3, [pc, #40]	; (800dd54 <prvAddNewTaskToReadyList+0xc8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d207      	bcs.n	800dd46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd36:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <prvAddNewTaskToReadyList+0xdc>)
 800dd38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd46:	bf00      	nop
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	20000bc4 	.word	0x20000bc4
 800dd54:	200006f0 	.word	0x200006f0
 800dd58:	20000bd0 	.word	0x20000bd0
 800dd5c:	20000be0 	.word	0x20000be0
 800dd60:	20000bcc 	.word	0x20000bcc
 800dd64:	200006f4 	.word	0x200006f4
 800dd68:	e000ed04 	.word	0xe000ed04

0800dd6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d016      	beq.n	800ddac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd7e:	4b13      	ldr	r3, [pc, #76]	; (800ddcc <vTaskDelay+0x60>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d009      	beq.n	800dd9a <vTaskDelay+0x2e>
 800dd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	60bb      	str	r3, [r7, #8]
 800dd98:	e7fe      	b.n	800dd98 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800dd9a:	f000 f87f 	bl	800de9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd9e:	2100      	movs	r1, #0
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 ffb9 	bl	800ed18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dda6:	f000 f887 	bl	800deb8 <xTaskResumeAll>
 800ddaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d107      	bne.n	800ddc2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ddb2:	4b07      	ldr	r3, [pc, #28]	; (800ddd0 <vTaskDelay+0x64>)
 800ddb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20000bec 	.word	0x20000bec
 800ddd0:	e000ed04 	.word	0xe000ed04

0800ddd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b08a      	sub	sp, #40	; 0x28
 800ddd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddda:	2300      	movs	r3, #0
 800dddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddde:	2300      	movs	r3, #0
 800dde0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dde2:	463a      	mov	r2, r7
 800dde4:	1d39      	adds	r1, r7, #4
 800dde6:	f107 0308 	add.w	r3, r7, #8
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fd2e 	bl	800c84c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	9202      	str	r2, [sp, #8]
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	2300      	movs	r3, #0
 800de00:	460a      	mov	r2, r1
 800de02:	4920      	ldr	r1, [pc, #128]	; (800de84 <vTaskStartScheduler+0xb0>)
 800de04:	4820      	ldr	r0, [pc, #128]	; (800de88 <vTaskStartScheduler+0xb4>)
 800de06:	f7ff fe13 	bl	800da30 <xTaskCreateStatic>
 800de0a:	4602      	mov	r2, r0
 800de0c:	4b1f      	ldr	r3, [pc, #124]	; (800de8c <vTaskStartScheduler+0xb8>)
 800de0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de10:	4b1e      	ldr	r3, [pc, #120]	; (800de8c <vTaskStartScheduler+0xb8>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de18:	2301      	movs	r3, #1
 800de1a:	617b      	str	r3, [r7, #20]
 800de1c:	e001      	b.n	800de22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de1e:	2300      	movs	r3, #0
 800de20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d102      	bne.n	800de2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de28:	f000 ffca 	bl	800edc0 <xTimerCreateTimerTask>
 800de2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d115      	bne.n	800de60 <vTaskStartScheduler+0x8c>
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de46:	4b12      	ldr	r3, [pc, #72]	; (800de90 <vTaskStartScheduler+0xbc>)
 800de48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de4e:	4b11      	ldr	r3, [pc, #68]	; (800de94 <vTaskStartScheduler+0xc0>)
 800de50:	2201      	movs	r2, #1
 800de52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de54:	4b10      	ldr	r3, [pc, #64]	; (800de98 <vTaskStartScheduler+0xc4>)
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de5a:	f001 fc39 	bl	800f6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de5e:	e00d      	b.n	800de7c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de66:	d109      	bne.n	800de7c <vTaskStartScheduler+0xa8>
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	e7fe      	b.n	800de7a <vTaskStartScheduler+0xa6>
}
 800de7c:	bf00      	nop
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	080113b8 	.word	0x080113b8
 800de88:	0800e4c1 	.word	0x0800e4c1
 800de8c:	20000be8 	.word	0x20000be8
 800de90:	20000be4 	.word	0x20000be4
 800de94:	20000bd0 	.word	0x20000bd0
 800de98:	20000bc8 	.word	0x20000bc8

0800de9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dea0:	4b04      	ldr	r3, [pc, #16]	; (800deb4 <vTaskSuspendAll+0x18>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3301      	adds	r3, #1
 800dea6:	4a03      	ldr	r2, [pc, #12]	; (800deb4 <vTaskSuspendAll+0x18>)
 800dea8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800deaa:	bf00      	nop
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	20000bec 	.word	0x20000bec

0800deb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800debe:	2300      	movs	r3, #0
 800dec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dec2:	2300      	movs	r3, #0
 800dec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dec6:	4b41      	ldr	r3, [pc, #260]	; (800dfcc <xTaskResumeAll+0x114>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d109      	bne.n	800dee2 <xTaskResumeAll+0x2a>
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	603b      	str	r3, [r7, #0]
 800dee0:	e7fe      	b.n	800dee0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dee2:	f001 fc93 	bl	800f80c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dee6:	4b39      	ldr	r3, [pc, #228]	; (800dfcc <xTaskResumeAll+0x114>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3b01      	subs	r3, #1
 800deec:	4a37      	ldr	r2, [pc, #220]	; (800dfcc <xTaskResumeAll+0x114>)
 800deee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800def0:	4b36      	ldr	r3, [pc, #216]	; (800dfcc <xTaskResumeAll+0x114>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d162      	bne.n	800dfbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800def8:	4b35      	ldr	r3, [pc, #212]	; (800dfd0 <xTaskResumeAll+0x118>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d05e      	beq.n	800dfbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df00:	e02f      	b.n	800df62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df02:	4b34      	ldr	r3, [pc, #208]	; (800dfd4 <xTaskResumeAll+0x11c>)
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	3318      	adds	r3, #24
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fe fd5a 	bl	800c9c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3304      	adds	r3, #4
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fe fd55 	bl	800c9c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df22:	4b2d      	ldr	r3, [pc, #180]	; (800dfd8 <xTaskResumeAll+0x120>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	429a      	cmp	r2, r3
 800df28:	d903      	bls.n	800df32 <xTaskResumeAll+0x7a>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2e:	4a2a      	ldr	r2, [pc, #168]	; (800dfd8 <xTaskResumeAll+0x120>)
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df36:	4613      	mov	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	4413      	add	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4a27      	ldr	r2, [pc, #156]	; (800dfdc <xTaskResumeAll+0x124>)
 800df40:	441a      	add	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	3304      	adds	r3, #4
 800df46:	4619      	mov	r1, r3
 800df48:	4610      	mov	r0, r2
 800df4a:	f7fe fce0 	bl	800c90e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df52:	4b23      	ldr	r3, [pc, #140]	; (800dfe0 <xTaskResumeAll+0x128>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df58:	429a      	cmp	r2, r3
 800df5a:	d302      	bcc.n	800df62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800df5c:	4b21      	ldr	r3, [pc, #132]	; (800dfe4 <xTaskResumeAll+0x12c>)
 800df5e:	2201      	movs	r2, #1
 800df60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df62:	4b1c      	ldr	r3, [pc, #112]	; (800dfd4 <xTaskResumeAll+0x11c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1cb      	bne.n	800df02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df70:	f000 fb58 	bl	800e624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800df74:	4b1c      	ldr	r3, [pc, #112]	; (800dfe8 <xTaskResumeAll+0x130>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d010      	beq.n	800dfa2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df80:	f000 f858 	bl	800e034 <xTaskIncrementTick>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800df8a:	4b16      	ldr	r3, [pc, #88]	; (800dfe4 <xTaskResumeAll+0x12c>)
 800df8c:	2201      	movs	r2, #1
 800df8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	3b01      	subs	r3, #1
 800df94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1f1      	bne.n	800df80 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800df9c:	4b12      	ldr	r3, [pc, #72]	; (800dfe8 <xTaskResumeAll+0x130>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dfa2:	4b10      	ldr	r3, [pc, #64]	; (800dfe4 <xTaskResumeAll+0x12c>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d009      	beq.n	800dfbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfae:	4b0f      	ldr	r3, [pc, #60]	; (800dfec <xTaskResumeAll+0x134>)
 800dfb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfbe:	f001 fc53 	bl	800f868 <vPortExitCritical>

	return xAlreadyYielded;
 800dfc2:	68bb      	ldr	r3, [r7, #8]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	20000bec 	.word	0x20000bec
 800dfd0:	20000bc4 	.word	0x20000bc4
 800dfd4:	20000b84 	.word	0x20000b84
 800dfd8:	20000bcc 	.word	0x20000bcc
 800dfdc:	200006f4 	.word	0x200006f4
 800dfe0:	200006f0 	.word	0x200006f0
 800dfe4:	20000bd8 	.word	0x20000bd8
 800dfe8:	20000bd4 	.word	0x20000bd4
 800dfec:	e000ed04 	.word	0xe000ed04

0800dff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dff6:	4b05      	ldr	r3, [pc, #20]	; (800e00c <xTaskGetTickCount+0x1c>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dffc:	687b      	ldr	r3, [r7, #4]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	370c      	adds	r7, #12
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	20000bc8 	.word	0x20000bc8

0800e010 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e016:	f001 fcd5 	bl	800f9c4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e01a:	2300      	movs	r3, #0
 800e01c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e01e:	4b04      	ldr	r3, [pc, #16]	; (800e030 <xTaskGetTickCountFromISR+0x20>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e024:	683b      	ldr	r3, [r7, #0]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000bc8 	.word	0x20000bc8

0800e034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e03a:	2300      	movs	r3, #0
 800e03c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e03e:	4b4e      	ldr	r3, [pc, #312]	; (800e178 <xTaskIncrementTick+0x144>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	f040 8088 	bne.w	800e158 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e048:	4b4c      	ldr	r3, [pc, #304]	; (800e17c <xTaskIncrementTick+0x148>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	3301      	adds	r3, #1
 800e04e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e050:	4a4a      	ldr	r2, [pc, #296]	; (800e17c <xTaskIncrementTick+0x148>)
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d11f      	bne.n	800e09c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e05c:	4b48      	ldr	r3, [pc, #288]	; (800e180 <xTaskIncrementTick+0x14c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d009      	beq.n	800e07a <xTaskIncrementTick+0x46>
 800e066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	603b      	str	r3, [r7, #0]
 800e078:	e7fe      	b.n	800e078 <xTaskIncrementTick+0x44>
 800e07a:	4b41      	ldr	r3, [pc, #260]	; (800e180 <xTaskIncrementTick+0x14c>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	4b40      	ldr	r3, [pc, #256]	; (800e184 <xTaskIncrementTick+0x150>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a3e      	ldr	r2, [pc, #248]	; (800e180 <xTaskIncrementTick+0x14c>)
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	4a3e      	ldr	r2, [pc, #248]	; (800e184 <xTaskIncrementTick+0x150>)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	4b3e      	ldr	r3, [pc, #248]	; (800e188 <xTaskIncrementTick+0x154>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3301      	adds	r3, #1
 800e094:	4a3c      	ldr	r2, [pc, #240]	; (800e188 <xTaskIncrementTick+0x154>)
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	f000 fac4 	bl	800e624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e09c:	4b3b      	ldr	r3, [pc, #236]	; (800e18c <xTaskIncrementTick+0x158>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d349      	bcc.n	800e13a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0a6:	4b36      	ldr	r3, [pc, #216]	; (800e180 <xTaskIncrementTick+0x14c>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d104      	bne.n	800e0ba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0b0:	4b36      	ldr	r3, [pc, #216]	; (800e18c <xTaskIncrementTick+0x158>)
 800e0b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0b6:	601a      	str	r2, [r3, #0]
					break;
 800e0b8:	e03f      	b.n	800e13a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ba:	4b31      	ldr	r3, [pc, #196]	; (800e180 <xTaskIncrementTick+0x14c>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0ca:	693a      	ldr	r2, [r7, #16]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d203      	bcs.n	800e0da <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0d2:	4a2e      	ldr	r2, [pc, #184]	; (800e18c <xTaskIncrementTick+0x158>)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0d8:	e02f      	b.n	800e13a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fe fc72 	bl	800c9c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d004      	beq.n	800e0f6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	3318      	adds	r3, #24
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7fe fc69 	bl	800c9c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fa:	4b25      	ldr	r3, [pc, #148]	; (800e190 <xTaskIncrementTick+0x15c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d903      	bls.n	800e10a <xTaskIncrementTick+0xd6>
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e106:	4a22      	ldr	r2, [pc, #136]	; (800e190 <xTaskIncrementTick+0x15c>)
 800e108:	6013      	str	r3, [r2, #0]
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10e:	4613      	mov	r3, r2
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4413      	add	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4a1f      	ldr	r2, [pc, #124]	; (800e194 <xTaskIncrementTick+0x160>)
 800e118:	441a      	add	r2, r3
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	3304      	adds	r3, #4
 800e11e:	4619      	mov	r1, r3
 800e120:	4610      	mov	r0, r2
 800e122:	f7fe fbf4 	bl	800c90e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12a:	4b1b      	ldr	r3, [pc, #108]	; (800e198 <xTaskIncrementTick+0x164>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e130:	429a      	cmp	r2, r3
 800e132:	d3b8      	bcc.n	800e0a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e134:	2301      	movs	r3, #1
 800e136:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e138:	e7b5      	b.n	800e0a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e13a:	4b17      	ldr	r3, [pc, #92]	; (800e198 <xTaskIncrementTick+0x164>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e140:	4914      	ldr	r1, [pc, #80]	; (800e194 <xTaskIncrementTick+0x160>)
 800e142:	4613      	mov	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	440b      	add	r3, r1
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d907      	bls.n	800e162 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e152:	2301      	movs	r3, #1
 800e154:	617b      	str	r3, [r7, #20]
 800e156:	e004      	b.n	800e162 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e158:	4b10      	ldr	r3, [pc, #64]	; (800e19c <xTaskIncrementTick+0x168>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	3301      	adds	r3, #1
 800e15e:	4a0f      	ldr	r2, [pc, #60]	; (800e19c <xTaskIncrementTick+0x168>)
 800e160:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e162:	4b0f      	ldr	r3, [pc, #60]	; (800e1a0 <xTaskIncrementTick+0x16c>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e16a:	2301      	movs	r3, #1
 800e16c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e16e:	697b      	ldr	r3, [r7, #20]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3718      	adds	r7, #24
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20000bec 	.word	0x20000bec
 800e17c:	20000bc8 	.word	0x20000bc8
 800e180:	20000b7c 	.word	0x20000b7c
 800e184:	20000b80 	.word	0x20000b80
 800e188:	20000bdc 	.word	0x20000bdc
 800e18c:	20000be4 	.word	0x20000be4
 800e190:	20000bcc 	.word	0x20000bcc
 800e194:	200006f4 	.word	0x200006f4
 800e198:	200006f0 	.word	0x200006f0
 800e19c:	20000bd4 	.word	0x20000bd4
 800e1a0:	20000bd8 	.word	0x20000bd8

0800e1a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1aa:	4b27      	ldr	r3, [pc, #156]	; (800e248 <vTaskSwitchContext+0xa4>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d003      	beq.n	800e1ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1b2:	4b26      	ldr	r3, [pc, #152]	; (800e24c <vTaskSwitchContext+0xa8>)
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1b8:	e040      	b.n	800e23c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e1ba:	4b24      	ldr	r3, [pc, #144]	; (800e24c <vTaskSwitchContext+0xa8>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1c0:	4b23      	ldr	r3, [pc, #140]	; (800e250 <vTaskSwitchContext+0xac>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	60fb      	str	r3, [r7, #12]
 800e1c6:	e00f      	b.n	800e1e8 <vTaskSwitchContext+0x44>
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d109      	bne.n	800e1e2 <vTaskSwitchContext+0x3e>
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	607b      	str	r3, [r7, #4]
 800e1e0:	e7fe      	b.n	800e1e0 <vTaskSwitchContext+0x3c>
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	60fb      	str	r3, [r7, #12]
 800e1e8:	491a      	ldr	r1, [pc, #104]	; (800e254 <vTaskSwitchContext+0xb0>)
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d0e5      	beq.n	800e1c8 <vTaskSwitchContext+0x24>
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4a13      	ldr	r2, [pc, #76]	; (800e254 <vTaskSwitchContext+0xb0>)
 800e208:	4413      	add	r3, r2
 800e20a:	60bb      	str	r3, [r7, #8]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	605a      	str	r2, [r3, #4]
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	685a      	ldr	r2, [r3, #4]
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	3308      	adds	r3, #8
 800e21e:	429a      	cmp	r2, r3
 800e220:	d104      	bne.n	800e22c <vTaskSwitchContext+0x88>
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	605a      	str	r2, [r3, #4]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	4a09      	ldr	r2, [pc, #36]	; (800e258 <vTaskSwitchContext+0xb4>)
 800e234:	6013      	str	r3, [r2, #0]
 800e236:	4a06      	ldr	r2, [pc, #24]	; (800e250 <vTaskSwitchContext+0xac>)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6013      	str	r3, [r2, #0]
}
 800e23c:	bf00      	nop
 800e23e:	3714      	adds	r7, #20
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	20000bec 	.word	0x20000bec
 800e24c:	20000bd8 	.word	0x20000bd8
 800e250:	20000bcc 	.word	0x20000bcc
 800e254:	200006f4 	.word	0x200006f4
 800e258:	200006f0 	.word	0x200006f0

0800e25c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d109      	bne.n	800e280 <vTaskPlaceOnEventList+0x24>
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	60fb      	str	r3, [r7, #12]
 800e27e:	e7fe      	b.n	800e27e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e280:	4b07      	ldr	r3, [pc, #28]	; (800e2a0 <vTaskPlaceOnEventList+0x44>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	3318      	adds	r3, #24
 800e286:	4619      	mov	r1, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7fe fb64 	bl	800c956 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e28e:	2101      	movs	r1, #1
 800e290:	6838      	ldr	r0, [r7, #0]
 800e292:	f000 fd41 	bl	800ed18 <prvAddCurrentTaskToDelayedList>
}
 800e296:	bf00      	nop
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	200006f0 	.word	0x200006f0

0800e2a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d109      	bne.n	800e2ca <vTaskPlaceOnEventListRestricted+0x26>
 800e2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	617b      	str	r3, [r7, #20]
 800e2c8:	e7fe      	b.n	800e2c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2ca:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <vTaskPlaceOnEventListRestricted+0x50>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3318      	adds	r3, #24
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7fe fb1b 	bl	800c90e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d002      	beq.n	800e2e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2e4:	6879      	ldr	r1, [r7, #4]
 800e2e6:	68b8      	ldr	r0, [r7, #8]
 800e2e8:	f000 fd16 	bl	800ed18 <prvAddCurrentTaskToDelayedList>
	}
 800e2ec:	bf00      	nop
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	200006f0 	.word	0x200006f0

0800e2f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d109      	bne.n	800e322 <xTaskRemoveFromEventList+0x2a>
 800e30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e312:	f383 8811 	msr	BASEPRI, r3
 800e316:	f3bf 8f6f 	isb	sy
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	60fb      	str	r3, [r7, #12]
 800e320:	e7fe      	b.n	800e320 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	3318      	adds	r3, #24
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe fb4e 	bl	800c9c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e32c:	4b1d      	ldr	r3, [pc, #116]	; (800e3a4 <xTaskRemoveFromEventList+0xac>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d11d      	bne.n	800e370 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	3304      	adds	r3, #4
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe fb45 	bl	800c9c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e342:	4b19      	ldr	r3, [pc, #100]	; (800e3a8 <xTaskRemoveFromEventList+0xb0>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	429a      	cmp	r2, r3
 800e348:	d903      	bls.n	800e352 <xTaskRemoveFromEventList+0x5a>
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e34e:	4a16      	ldr	r2, [pc, #88]	; (800e3a8 <xTaskRemoveFromEventList+0xb0>)
 800e350:	6013      	str	r3, [r2, #0]
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e356:	4613      	mov	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	4a13      	ldr	r2, [pc, #76]	; (800e3ac <xTaskRemoveFromEventList+0xb4>)
 800e360:	441a      	add	r2, r3
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	3304      	adds	r3, #4
 800e366:	4619      	mov	r1, r3
 800e368:	4610      	mov	r0, r2
 800e36a:	f7fe fad0 	bl	800c90e <vListInsertEnd>
 800e36e:	e005      	b.n	800e37c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	3318      	adds	r3, #24
 800e374:	4619      	mov	r1, r3
 800e376:	480e      	ldr	r0, [pc, #56]	; (800e3b0 <xTaskRemoveFromEventList+0xb8>)
 800e378:	f7fe fac9 	bl	800c90e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e380:	4b0c      	ldr	r3, [pc, #48]	; (800e3b4 <xTaskRemoveFromEventList+0xbc>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e386:	429a      	cmp	r2, r3
 800e388:	d905      	bls.n	800e396 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e38a:	2301      	movs	r3, #1
 800e38c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e38e:	4b0a      	ldr	r3, [pc, #40]	; (800e3b8 <xTaskRemoveFromEventList+0xc0>)
 800e390:	2201      	movs	r2, #1
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	e001      	b.n	800e39a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e396:	2300      	movs	r3, #0
 800e398:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e39a:	697b      	ldr	r3, [r7, #20]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	20000bec 	.word	0x20000bec
 800e3a8:	20000bcc 	.word	0x20000bcc
 800e3ac:	200006f4 	.word	0x200006f4
 800e3b0:	20000b84 	.word	0x20000b84
 800e3b4:	200006f0 	.word	0x200006f0
 800e3b8:	20000bd8 	.word	0x20000bd8

0800e3bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3c4:	4b06      	ldr	r3, [pc, #24]	; (800e3e0 <vTaskInternalSetTimeOutState+0x24>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3cc:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <vTaskInternalSetTimeOutState+0x28>)
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	605a      	str	r2, [r3, #4]
}
 800e3d4:	bf00      	nop
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	20000bdc 	.word	0x20000bdc
 800e3e4:	20000bc8 	.word	0x20000bc8

0800e3e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b088      	sub	sp, #32
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d109      	bne.n	800e40c <xTaskCheckForTimeOut+0x24>
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	613b      	str	r3, [r7, #16]
 800e40a:	e7fe      	b.n	800e40a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d109      	bne.n	800e426 <xTaskCheckForTimeOut+0x3e>
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	e7fe      	b.n	800e424 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800e426:	f001 f9f1 	bl	800f80c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e42a:	4b1d      	ldr	r3, [pc, #116]	; (800e4a0 <xTaskCheckForTimeOut+0xb8>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	69ba      	ldr	r2, [r7, #24]
 800e436:	1ad3      	subs	r3, r2, r3
 800e438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e442:	d102      	bne.n	800e44a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e444:	2300      	movs	r3, #0
 800e446:	61fb      	str	r3, [r7, #28]
 800e448:	e023      	b.n	800e492 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	4b15      	ldr	r3, [pc, #84]	; (800e4a4 <xTaskCheckForTimeOut+0xbc>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	429a      	cmp	r2, r3
 800e454:	d007      	beq.n	800e466 <xTaskCheckForTimeOut+0x7e>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	69ba      	ldr	r2, [r7, #24]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d302      	bcc.n	800e466 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e460:	2301      	movs	r3, #1
 800e462:	61fb      	str	r3, [r7, #28]
 800e464:	e015      	b.n	800e492 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d20b      	bcs.n	800e488 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	1ad2      	subs	r2, r2, r3
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7ff ff9d 	bl	800e3bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e482:	2300      	movs	r3, #0
 800e484:	61fb      	str	r3, [r7, #28]
 800e486:	e004      	b.n	800e492 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	2200      	movs	r2, #0
 800e48c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e48e:	2301      	movs	r3, #1
 800e490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e492:	f001 f9e9 	bl	800f868 <vPortExitCritical>

	return xReturn;
 800e496:	69fb      	ldr	r3, [r7, #28]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3720      	adds	r7, #32
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	20000bc8 	.word	0x20000bc8
 800e4a4:	20000bdc 	.word	0x20000bdc

0800e4a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e4ac:	4b03      	ldr	r3, [pc, #12]	; (800e4bc <vTaskMissedYield+0x14>)
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	601a      	str	r2, [r3, #0]
}
 800e4b2:	bf00      	nop
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	20000bd8 	.word	0x20000bd8

0800e4c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e4c8:	f000 f852 	bl	800e570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4cc:	4b06      	ldr	r3, [pc, #24]	; (800e4e8 <prvIdleTask+0x28>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d9f9      	bls.n	800e4c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e4d4:	4b05      	ldr	r3, [pc, #20]	; (800e4ec <prvIdleTask+0x2c>)
 800e4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4da:	601a      	str	r2, [r3, #0]
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e4e4:	e7f0      	b.n	800e4c8 <prvIdleTask+0x8>
 800e4e6:	bf00      	nop
 800e4e8:	200006f4 	.word	0x200006f4
 800e4ec:	e000ed04 	.word	0xe000ed04

0800e4f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	607b      	str	r3, [r7, #4]
 800e4fa:	e00c      	b.n	800e516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	4613      	mov	r3, r2
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	4413      	add	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4a12      	ldr	r2, [pc, #72]	; (800e550 <prvInitialiseTaskLists+0x60>)
 800e508:	4413      	add	r3, r2
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe f9d2 	bl	800c8b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	3301      	adds	r3, #1
 800e514:	607b      	str	r3, [r7, #4]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2b37      	cmp	r3, #55	; 0x37
 800e51a:	d9ef      	bls.n	800e4fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e51c:	480d      	ldr	r0, [pc, #52]	; (800e554 <prvInitialiseTaskLists+0x64>)
 800e51e:	f7fe f9c9 	bl	800c8b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e522:	480d      	ldr	r0, [pc, #52]	; (800e558 <prvInitialiseTaskLists+0x68>)
 800e524:	f7fe f9c6 	bl	800c8b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e528:	480c      	ldr	r0, [pc, #48]	; (800e55c <prvInitialiseTaskLists+0x6c>)
 800e52a:	f7fe f9c3 	bl	800c8b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e52e:	480c      	ldr	r0, [pc, #48]	; (800e560 <prvInitialiseTaskLists+0x70>)
 800e530:	f7fe f9c0 	bl	800c8b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e534:	480b      	ldr	r0, [pc, #44]	; (800e564 <prvInitialiseTaskLists+0x74>)
 800e536:	f7fe f9bd 	bl	800c8b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e53a:	4b0b      	ldr	r3, [pc, #44]	; (800e568 <prvInitialiseTaskLists+0x78>)
 800e53c:	4a05      	ldr	r2, [pc, #20]	; (800e554 <prvInitialiseTaskLists+0x64>)
 800e53e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e540:	4b0a      	ldr	r3, [pc, #40]	; (800e56c <prvInitialiseTaskLists+0x7c>)
 800e542:	4a05      	ldr	r2, [pc, #20]	; (800e558 <prvInitialiseTaskLists+0x68>)
 800e544:	601a      	str	r2, [r3, #0]
}
 800e546:	bf00      	nop
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	200006f4 	.word	0x200006f4
 800e554:	20000b54 	.word	0x20000b54
 800e558:	20000b68 	.word	0x20000b68
 800e55c:	20000b84 	.word	0x20000b84
 800e560:	20000b98 	.word	0x20000b98
 800e564:	20000bb0 	.word	0x20000bb0
 800e568:	20000b7c 	.word	0x20000b7c
 800e56c:	20000b80 	.word	0x20000b80

0800e570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e576:	e019      	b.n	800e5ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e578:	f001 f948 	bl	800f80c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e57c:	4b0f      	ldr	r3, [pc, #60]	; (800e5bc <prvCheckTasksWaitingTermination+0x4c>)
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	3304      	adds	r3, #4
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fe fa1d 	bl	800c9c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e58e:	4b0c      	ldr	r3, [pc, #48]	; (800e5c0 <prvCheckTasksWaitingTermination+0x50>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3b01      	subs	r3, #1
 800e594:	4a0a      	ldr	r2, [pc, #40]	; (800e5c0 <prvCheckTasksWaitingTermination+0x50>)
 800e596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <prvCheckTasksWaitingTermination+0x54>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <prvCheckTasksWaitingTermination+0x54>)
 800e5a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5a2:	f001 f961 	bl	800f868 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f80e 	bl	800e5c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5ac:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <prvCheckTasksWaitingTermination+0x54>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1e1      	bne.n	800e578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	20000b98 	.word	0x20000b98
 800e5c0:	20000bc4 	.word	0x20000bc4
 800e5c4:	20000bac 	.word	0x20000bac

0800e5c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d108      	bne.n	800e5ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f001 faf0 	bl	800fbc4 <vPortFree>
				vPortFree( pxTCB );
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f001 faed 	bl	800fbc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e5ea:	e017      	b.n	800e61c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d103      	bne.n	800e5fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f001 fae4 	bl	800fbc4 <vPortFree>
	}
 800e5fc:	e00e      	b.n	800e61c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e604:	2b02      	cmp	r3, #2
 800e606:	d009      	beq.n	800e61c <prvDeleteTCB+0x54>
 800e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	60fb      	str	r3, [r7, #12]
 800e61a:	e7fe      	b.n	800e61a <prvDeleteTCB+0x52>
	}
 800e61c:	bf00      	nop
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e62a:	4b0c      	ldr	r3, [pc, #48]	; (800e65c <prvResetNextTaskUnblockTime+0x38>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d104      	bne.n	800e63e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e634:	4b0a      	ldr	r3, [pc, #40]	; (800e660 <prvResetNextTaskUnblockTime+0x3c>)
 800e636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e63a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e63c:	e008      	b.n	800e650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e63e:	4b07      	ldr	r3, [pc, #28]	; (800e65c <prvResetNextTaskUnblockTime+0x38>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	4a04      	ldr	r2, [pc, #16]	; (800e660 <prvResetNextTaskUnblockTime+0x3c>)
 800e64e:	6013      	str	r3, [r2, #0]
}
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	20000b7c 	.word	0x20000b7c
 800e660:	20000be4 	.word	0x20000be4

0800e664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e66a:	4b0b      	ldr	r3, [pc, #44]	; (800e698 <xTaskGetSchedulerState+0x34>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d102      	bne.n	800e678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e672:	2301      	movs	r3, #1
 800e674:	607b      	str	r3, [r7, #4]
 800e676:	e008      	b.n	800e68a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e678:	4b08      	ldr	r3, [pc, #32]	; (800e69c <xTaskGetSchedulerState+0x38>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d102      	bne.n	800e686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e680:	2302      	movs	r3, #2
 800e682:	607b      	str	r3, [r7, #4]
 800e684:	e001      	b.n	800e68a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e686:	2300      	movs	r3, #0
 800e688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e68a:	687b      	ldr	r3, [r7, #4]
	}
 800e68c:	4618      	mov	r0, r3
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	20000bd0 	.word	0x20000bd0
 800e69c:	20000bec 	.word	0x20000bec

0800e6a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d051      	beq.n	800e75a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ba:	4b2a      	ldr	r3, [pc, #168]	; (800e764 <xTaskPriorityInherit+0xc4>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d241      	bcs.n	800e748 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	db06      	blt.n	800e6da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6cc:	4b25      	ldr	r3, [pc, #148]	; (800e764 <xTaskPriorityInherit+0xc4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	6959      	ldr	r1, [r3, #20]
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	4413      	add	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4a1f      	ldr	r2, [pc, #124]	; (800e768 <xTaskPriorityInherit+0xc8>)
 800e6ec:	4413      	add	r3, r2
 800e6ee:	4299      	cmp	r1, r3
 800e6f0:	d122      	bne.n	800e738 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fe f966 	bl	800c9c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6fc:	4b19      	ldr	r3, [pc, #100]	; (800e764 <xTaskPriorityInherit+0xc4>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70a:	4b18      	ldr	r3, [pc, #96]	; (800e76c <xTaskPriorityInherit+0xcc>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d903      	bls.n	800e71a <xTaskPriorityInherit+0x7a>
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e716:	4a15      	ldr	r2, [pc, #84]	; (800e76c <xTaskPriorityInherit+0xcc>)
 800e718:	6013      	str	r3, [r2, #0]
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71e:	4613      	mov	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4413      	add	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4a10      	ldr	r2, [pc, #64]	; (800e768 <xTaskPriorityInherit+0xc8>)
 800e728:	441a      	add	r2, r3
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	3304      	adds	r3, #4
 800e72e:	4619      	mov	r1, r3
 800e730:	4610      	mov	r0, r2
 800e732:	f7fe f8ec 	bl	800c90e <vListInsertEnd>
 800e736:	e004      	b.n	800e742 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e738:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <xTaskPriorityInherit+0xc4>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e742:	2301      	movs	r3, #1
 800e744:	60fb      	str	r3, [r7, #12]
 800e746:	e008      	b.n	800e75a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e74c:	4b05      	ldr	r3, [pc, #20]	; (800e764 <xTaskPriorityInherit+0xc4>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e752:	429a      	cmp	r2, r3
 800e754:	d201      	bcs.n	800e75a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e756:	2301      	movs	r3, #1
 800e758:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e75a:	68fb      	ldr	r3, [r7, #12]
	}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	200006f0 	.word	0x200006f0
 800e768:	200006f4 	.word	0x200006f4
 800e76c:	20000bcc 	.word	0x20000bcc

0800e770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e77c:	2300      	movs	r3, #0
 800e77e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d054      	beq.n	800e830 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e786:	4b2d      	ldr	r3, [pc, #180]	; (800e83c <xTaskPriorityDisinherit+0xcc>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d009      	beq.n	800e7a4 <xTaskPriorityDisinherit+0x34>
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	60fb      	str	r3, [r7, #12]
 800e7a2:	e7fe      	b.n	800e7a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d109      	bne.n	800e7c0 <xTaskPriorityDisinherit+0x50>
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	60bb      	str	r3, [r7, #8]
 800e7be:	e7fe      	b.n	800e7be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7c4:	1e5a      	subs	r2, r3, #1
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d02c      	beq.n	800e830 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d128      	bne.n	800e830 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe f8f0 	bl	800c9c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e800:	4b0f      	ldr	r3, [pc, #60]	; (800e840 <xTaskPriorityDisinherit+0xd0>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d903      	bls.n	800e810 <xTaskPriorityDisinherit+0xa0>
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80c:	4a0c      	ldr	r2, [pc, #48]	; (800e840 <xTaskPriorityDisinherit+0xd0>)
 800e80e:	6013      	str	r3, [r2, #0]
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e814:	4613      	mov	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	4413      	add	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4a09      	ldr	r2, [pc, #36]	; (800e844 <xTaskPriorityDisinherit+0xd4>)
 800e81e:	441a      	add	r2, r3
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	3304      	adds	r3, #4
 800e824:	4619      	mov	r1, r3
 800e826:	4610      	mov	r0, r2
 800e828:	f7fe f871 	bl	800c90e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e82c:	2301      	movs	r3, #1
 800e82e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e830:	697b      	ldr	r3, [r7, #20]
	}
 800e832:	4618      	mov	r0, r3
 800e834:	3718      	adds	r7, #24
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	200006f0 	.word	0x200006f0
 800e840:	20000bcc 	.word	0x20000bcc
 800e844:	200006f4 	.word	0x200006f4

0800e848 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b088      	sub	sp, #32
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e856:	2301      	movs	r3, #1
 800e858:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d068      	beq.n	800e932 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e864:	2b00      	cmp	r3, #0
 800e866:	d109      	bne.n	800e87c <vTaskPriorityDisinheritAfterTimeout+0x34>
 800e868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	60fb      	str	r3, [r7, #12]
 800e87a:	e7fe      	b.n	800e87a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	429a      	cmp	r2, r3
 800e884:	d902      	bls.n	800e88c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	61fb      	str	r3, [r7, #28]
 800e88a:	e002      	b.n	800e892 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e890:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e896:	69fa      	ldr	r2, [r7, #28]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d04a      	beq.n	800e932 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8a0:	697a      	ldr	r2, [r7, #20]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d145      	bne.n	800e932 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e8a6:	4b25      	ldr	r3, [pc, #148]	; (800e93c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	69ba      	ldr	r2, [r7, #24]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d109      	bne.n	800e8c4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800e8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	60bb      	str	r3, [r7, #8]
 800e8c2:	e7fe      	b.n	800e8c2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	69fa      	ldr	r2, [r7, #28]
 800e8ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	db04      	blt.n	800e8e2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	6959      	ldr	r1, [r3, #20]
 800e8e6:	693a      	ldr	r2, [r7, #16]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4a13      	ldr	r2, [pc, #76]	; (800e940 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e8f2:	4413      	add	r3, r2
 800e8f4:	4299      	cmp	r1, r3
 800e8f6:	d11c      	bne.n	800e932 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fe f863 	bl	800c9c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e902:	69bb      	ldr	r3, [r7, #24]
 800e904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e906:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d903      	bls.n	800e916 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e912:	4a0c      	ldr	r2, [pc, #48]	; (800e944 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e914:	6013      	str	r3, [r2, #0]
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91a:	4613      	mov	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4a07      	ldr	r2, [pc, #28]	; (800e940 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e924:	441a      	add	r2, r3
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	3304      	adds	r3, #4
 800e92a:	4619      	mov	r1, r3
 800e92c:	4610      	mov	r0, r2
 800e92e:	f7fd ffee 	bl	800c90e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e932:	bf00      	nop
 800e934:	3720      	adds	r7, #32
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	200006f0 	.word	0x200006f0
 800e940:	200006f4 	.word	0x200006f4
 800e944:	20000bcc 	.word	0x20000bcc

0800e948 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e948:	b480      	push	{r7}
 800e94a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e94c:	4b07      	ldr	r3, [pc, #28]	; (800e96c <pvTaskIncrementMutexHeldCount+0x24>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d004      	beq.n	800e95e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e954:	4b05      	ldr	r3, [pc, #20]	; (800e96c <pvTaskIncrementMutexHeldCount+0x24>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e95a:	3201      	adds	r2, #1
 800e95c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e95e:	4b03      	ldr	r3, [pc, #12]	; (800e96c <pvTaskIncrementMutexHeldCount+0x24>)
 800e960:	681b      	ldr	r3, [r3, #0]
	}
 800e962:	4618      	mov	r0, r3
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	200006f0 	.word	0x200006f0

0800e970 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e97a:	f000 ff47 	bl	800f80c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e97e:	4b1e      	ldr	r3, [pc, #120]	; (800e9f8 <ulTaskNotifyTake+0x88>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e984:	2b00      	cmp	r3, #0
 800e986:	d113      	bne.n	800e9b0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e988:	4b1b      	ldr	r3, [pc, #108]	; (800e9f8 <ulTaskNotifyTake+0x88>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00b      	beq.n	800e9b0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e998:	2101      	movs	r1, #1
 800e99a:	6838      	ldr	r0, [r7, #0]
 800e99c:	f000 f9bc 	bl	800ed18 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e9a0:	4b16      	ldr	r3, [pc, #88]	; (800e9fc <ulTaskNotifyTake+0x8c>)
 800e9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e9b0:	f000 ff5a 	bl	800f868 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e9b4:	f000 ff2a 	bl	800f80c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e9b8:	4b0f      	ldr	r3, [pc, #60]	; (800e9f8 <ulTaskNotifyTake+0x88>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9be:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00c      	beq.n	800e9e0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d004      	beq.n	800e9d6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e9cc:	4b0a      	ldr	r3, [pc, #40]	; (800e9f8 <ulTaskNotifyTake+0x88>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	655a      	str	r2, [r3, #84]	; 0x54
 800e9d4:	e004      	b.n	800e9e0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800e9d6:	4b08      	ldr	r3, [pc, #32]	; (800e9f8 <ulTaskNotifyTake+0x88>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	3a01      	subs	r2, #1
 800e9de:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e9e0:	4b05      	ldr	r3, [pc, #20]	; (800e9f8 <ulTaskNotifyTake+0x88>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800e9ea:	f000 ff3d 	bl	800f868 <vPortExitCritical>

		return ulReturn;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
	}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	200006f0 	.word	0x200006f0
 800e9fc:	e000ed04 	.word	0xe000ed04

0800ea00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b08a      	sub	sp, #40	; 0x28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	603b      	str	r3, [r7, #0]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ea10:	2301      	movs	r3, #1
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d109      	bne.n	800ea2e <xTaskGenericNotify+0x2e>
 800ea1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	61bb      	str	r3, [r7, #24]
 800ea2c:	e7fe      	b.n	800ea2c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ea32:	f000 feeb 	bl	800f80c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ea44:	6a3b      	ldr	r3, [r7, #32]
 800ea46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ea4a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	2202      	movs	r2, #2
 800ea50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	2b04      	cmp	r3, #4
 800ea58:	d827      	bhi.n	800eaaa <xTaskGenericNotify+0xaa>
 800ea5a:	a201      	add	r2, pc, #4	; (adr r2, 800ea60 <xTaskGenericNotify+0x60>)
 800ea5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea60:	0800eac9 	.word	0x0800eac9
 800ea64:	0800ea75 	.word	0x0800ea75
 800ea68:	0800ea83 	.word	0x0800ea83
 800ea6c:	0800ea8f 	.word	0x0800ea8f
 800ea70:	0800ea97 	.word	0x0800ea97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ea74:	6a3b      	ldr	r3, [r7, #32]
 800ea76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	431a      	orrs	r2, r3
 800ea7c:	6a3b      	ldr	r3, [r7, #32]
 800ea7e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ea80:	e025      	b.n	800eace <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ea8c:	e01f      	b.n	800eace <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ea8e:	6a3b      	ldr	r3, [r7, #32]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ea94:	e01b      	b.n	800eace <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ea96:	7ffb      	ldrb	r3, [r7, #31]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d003      	beq.n	800eaa4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	68ba      	ldr	r2, [r7, #8]
 800eaa0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800eaa2:	e014      	b.n	800eace <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800eaa8:	e011      	b.n	800eace <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eab2:	d00b      	beq.n	800eacc <xTaskGenericNotify+0xcc>
 800eab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	617b      	str	r3, [r7, #20]
 800eac6:	e7fe      	b.n	800eac6 <xTaskGenericNotify+0xc6>
					break;
 800eac8:	bf00      	nop
 800eaca:	e000      	b.n	800eace <xTaskGenericNotify+0xce>

					break;
 800eacc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800eace:	7ffb      	ldrb	r3, [r7, #31]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d139      	bne.n	800eb48 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	3304      	adds	r3, #4
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fd ff75 	bl	800c9c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800eade:	6a3b      	ldr	r3, [r7, #32]
 800eae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae2:	4b1d      	ldr	r3, [pc, #116]	; (800eb58 <xTaskGenericNotify+0x158>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d903      	bls.n	800eaf2 <xTaskGenericNotify+0xf2>
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaee:	4a1a      	ldr	r2, [pc, #104]	; (800eb58 <xTaskGenericNotify+0x158>)
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	6a3b      	ldr	r3, [r7, #32]
 800eaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4413      	add	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4a17      	ldr	r2, [pc, #92]	; (800eb5c <xTaskGenericNotify+0x15c>)
 800eb00:	441a      	add	r2, r3
 800eb02:	6a3b      	ldr	r3, [r7, #32]
 800eb04:	3304      	adds	r3, #4
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f7fd ff00 	bl	800c90e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eb0e:	6a3b      	ldr	r3, [r7, #32]
 800eb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d009      	beq.n	800eb2a <xTaskGenericNotify+0x12a>
 800eb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1a:	f383 8811 	msr	BASEPRI, r3
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	613b      	str	r3, [r7, #16]
 800eb28:	e7fe      	b.n	800eb28 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb2a:	6a3b      	ldr	r3, [r7, #32]
 800eb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb2e:	4b0c      	ldr	r3, [pc, #48]	; (800eb60 <xTaskGenericNotify+0x160>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d907      	bls.n	800eb48 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800eb38:	4b0a      	ldr	r3, [pc, #40]	; (800eb64 <xTaskGenericNotify+0x164>)
 800eb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eb48:	f000 fe8e 	bl	800f868 <vPortExitCritical>

		return xReturn;
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3728      	adds	r7, #40	; 0x28
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	20000bcc 	.word	0x20000bcc
 800eb5c:	200006f4 	.word	0x200006f4
 800eb60:	200006f0 	.word	0x200006f0
 800eb64:	e000ed04 	.word	0xe000ed04

0800eb68 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08e      	sub	sp, #56	; 0x38
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	603b      	str	r3, [r7, #0]
 800eb74:	4613      	mov	r3, r2
 800eb76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d109      	bne.n	800eb96 <xTaskGenericNotifyFromISR+0x2e>
 800eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb86:	f383 8811 	msr	BASEPRI, r3
 800eb8a:	f3bf 8f6f 	isb	sy
 800eb8e:	f3bf 8f4f 	dsb	sy
 800eb92:	627b      	str	r3, [r7, #36]	; 0x24
 800eb94:	e7fe      	b.n	800eb94 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb96:	f000 ff15 	bl	800f9c4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800eb9e:	f3ef 8211 	mrs	r2, BASEPRI
 800eba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	623a      	str	r2, [r7, #32]
 800ebb4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ebb6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d003      	beq.n	800ebc8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ebce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	2b04      	cmp	r3, #4
 800ebde:	d829      	bhi.n	800ec34 <xTaskGenericNotifyFromISR+0xcc>
 800ebe0:	a201      	add	r2, pc, #4	; (adr r2, 800ebe8 <xTaskGenericNotifyFromISR+0x80>)
 800ebe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe6:	bf00      	nop
 800ebe8:	0800ec53 	.word	0x0800ec53
 800ebec:	0800ebfd 	.word	0x0800ebfd
 800ebf0:	0800ec0b 	.word	0x0800ec0b
 800ebf4:	0800ec17 	.word	0x0800ec17
 800ebf8:	0800ec1f 	.word	0x0800ec1f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	431a      	orrs	r2, r3
 800ec04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec06:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ec08:	e026      	b.n	800ec58 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec12:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ec14:	e020      	b.n	800ec58 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec18:	68ba      	ldr	r2, [r7, #8]
 800ec1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ec1c:	e01c      	b.n	800ec58 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ec1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d003      	beq.n	800ec2e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ec26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ec2c:	e014      	b.n	800ec58 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ec32:	e011      	b.n	800ec58 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec3c:	d00b      	beq.n	800ec56 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800ec3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	61bb      	str	r3, [r7, #24]
 800ec50:	e7fe      	b.n	800ec50 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800ec52:	bf00      	nop
 800ec54:	e000      	b.n	800ec58 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800ec56:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ec58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d145      	bne.n	800ecec <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d009      	beq.n	800ec7c <xTaskGenericNotifyFromISR+0x114>
 800ec68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6c:	f383 8811 	msr	BASEPRI, r3
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	617b      	str	r3, [r7, #20]
 800ec7a:	e7fe      	b.n	800ec7a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec7c:	4b20      	ldr	r3, [pc, #128]	; (800ed00 <xTaskGenericNotifyFromISR+0x198>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d11d      	bne.n	800ecc0 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec86:	3304      	adds	r3, #4
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fd fe9d 	bl	800c9c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec92:	4b1c      	ldr	r3, [pc, #112]	; (800ed04 <xTaskGenericNotifyFromISR+0x19c>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d903      	bls.n	800eca2 <xTaskGenericNotifyFromISR+0x13a>
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9e:	4a19      	ldr	r2, [pc, #100]	; (800ed04 <xTaskGenericNotifyFromISR+0x19c>)
 800eca0:	6013      	str	r3, [r2, #0]
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eca6:	4613      	mov	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4a16      	ldr	r2, [pc, #88]	; (800ed08 <xTaskGenericNotifyFromISR+0x1a0>)
 800ecb0:	441a      	add	r2, r3
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	3304      	adds	r3, #4
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	4610      	mov	r0, r2
 800ecba:	f7fd fe28 	bl	800c90e <vListInsertEnd>
 800ecbe:	e005      	b.n	800eccc <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	3318      	adds	r3, #24
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	4811      	ldr	r0, [pc, #68]	; (800ed0c <xTaskGenericNotifyFromISR+0x1a4>)
 800ecc8:	f7fd fe21 	bl	800c90e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd0:	4b0f      	ldr	r3, [pc, #60]	; (800ed10 <xTaskGenericNotifyFromISR+0x1a8>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d908      	bls.n	800ecec <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ecda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ece0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece2:	2201      	movs	r2, #1
 800ece4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ece6:	4b0b      	ldr	r3, [pc, #44]	; (800ed14 <xTaskGenericNotifyFromISR+0x1ac>)
 800ece8:	2201      	movs	r2, #1
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3738      	adds	r7, #56	; 0x38
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	20000bec 	.word	0x20000bec
 800ed04:	20000bcc 	.word	0x20000bcc
 800ed08:	200006f4 	.word	0x200006f4
 800ed0c:	20000b84 	.word	0x20000b84
 800ed10:	200006f0 	.word	0x200006f0
 800ed14:	20000bd8 	.word	0x20000bd8

0800ed18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed22:	4b21      	ldr	r3, [pc, #132]	; (800eda8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed28:	4b20      	ldr	r3, [pc, #128]	; (800edac <prvAddCurrentTaskToDelayedList+0x94>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	3304      	adds	r3, #4
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fd fe4a 	bl	800c9c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed3a:	d10a      	bne.n	800ed52 <prvAddCurrentTaskToDelayedList+0x3a>
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d007      	beq.n	800ed52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed42:	4b1a      	ldr	r3, [pc, #104]	; (800edac <prvAddCurrentTaskToDelayedList+0x94>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	3304      	adds	r3, #4
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4819      	ldr	r0, [pc, #100]	; (800edb0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ed4c:	f7fd fddf 	bl	800c90e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed50:	e026      	b.n	800eda0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4413      	add	r3, r2
 800ed58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed5a:	4b14      	ldr	r3, [pc, #80]	; (800edac <prvAddCurrentTaskToDelayedList+0x94>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d209      	bcs.n	800ed7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed6a:	4b12      	ldr	r3, [pc, #72]	; (800edb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	4b0f      	ldr	r3, [pc, #60]	; (800edac <prvAddCurrentTaskToDelayedList+0x94>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3304      	adds	r3, #4
 800ed74:	4619      	mov	r1, r3
 800ed76:	4610      	mov	r0, r2
 800ed78:	f7fd fded 	bl	800c956 <vListInsert>
}
 800ed7c:	e010      	b.n	800eda0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed7e:	4b0e      	ldr	r3, [pc, #56]	; (800edb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	4b0a      	ldr	r3, [pc, #40]	; (800edac <prvAddCurrentTaskToDelayedList+0x94>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	3304      	adds	r3, #4
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	f7fd fde3 	bl	800c956 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed90:	4b0a      	ldr	r3, [pc, #40]	; (800edbc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d202      	bcs.n	800eda0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ed9a:	4a08      	ldr	r2, [pc, #32]	; (800edbc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	6013      	str	r3, [r2, #0]
}
 800eda0:	bf00      	nop
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	20000bc8 	.word	0x20000bc8
 800edac:	200006f0 	.word	0x200006f0
 800edb0:	20000bb0 	.word	0x20000bb0
 800edb4:	20000b80 	.word	0x20000b80
 800edb8:	20000b7c 	.word	0x20000b7c
 800edbc:	20000be4 	.word	0x20000be4

0800edc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b08a      	sub	sp, #40	; 0x28
 800edc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800edca:	f000 fb97 	bl	800f4fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800edce:	4b1c      	ldr	r3, [pc, #112]	; (800ee40 <xTimerCreateTimerTask+0x80>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d021      	beq.n	800ee1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edd6:	2300      	movs	r3, #0
 800edd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800edda:	2300      	movs	r3, #0
 800eddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edde:	1d3a      	adds	r2, r7, #4
 800ede0:	f107 0108 	add.w	r1, r7, #8
 800ede4:	f107 030c 	add.w	r3, r7, #12
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fd fd49 	bl	800c880 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	9202      	str	r2, [sp, #8]
 800edf6:	9301      	str	r3, [sp, #4]
 800edf8:	2302      	movs	r3, #2
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	2300      	movs	r3, #0
 800edfe:	460a      	mov	r2, r1
 800ee00:	4910      	ldr	r1, [pc, #64]	; (800ee44 <xTimerCreateTimerTask+0x84>)
 800ee02:	4811      	ldr	r0, [pc, #68]	; (800ee48 <xTimerCreateTimerTask+0x88>)
 800ee04:	f7fe fe14 	bl	800da30 <xTaskCreateStatic>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	4b10      	ldr	r3, [pc, #64]	; (800ee4c <xTimerCreateTimerTask+0x8c>)
 800ee0c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee0e:	4b0f      	ldr	r3, [pc, #60]	; (800ee4c <xTimerCreateTimerTask+0x8c>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d001      	beq.n	800ee1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee16:	2301      	movs	r3, #1
 800ee18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d109      	bne.n	800ee34 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	613b      	str	r3, [r7, #16]
 800ee32:	e7fe      	b.n	800ee32 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ee34:	697b      	ldr	r3, [r7, #20]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20000c20 	.word	0x20000c20
 800ee44:	080113c0 	.word	0x080113c0
 800ee48:	0800f0b1 	.word	0x0800f0b1
 800ee4c:	20000c24 	.word	0x20000c24

0800ee50 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b088      	sub	sp, #32
 800ee54:	af02      	add	r7, sp, #8
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
 800ee5c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ee5e:	202c      	movs	r0, #44	; 0x2c
 800ee60:	f000 fdee 	bl	800fa40 <pvPortMalloc>
 800ee64:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00d      	beq.n	800ee88 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	6a3b      	ldr	r3, [r7, #32]
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	68b9      	ldr	r1, [r7, #8]
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f000 f841 	bl	800ef0a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ee88:	697b      	ldr	r3, [r7, #20]
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b08a      	sub	sp, #40	; 0x28
 800ee96:	af02      	add	r7, sp, #8
 800ee98:	60f8      	str	r0, [r7, #12]
 800ee9a:	60b9      	str	r1, [r7, #8]
 800ee9c:	607a      	str	r2, [r7, #4]
 800ee9e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800eea0:	232c      	movs	r3, #44	; 0x2c
 800eea2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	2b2c      	cmp	r3, #44	; 0x2c
 800eea8:	d009      	beq.n	800eebe <xTimerCreateStatic+0x2c>
 800eeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeae:	f383 8811 	msr	BASEPRI, r3
 800eeb2:	f3bf 8f6f 	isb	sy
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	61bb      	str	r3, [r7, #24]
 800eebc:	e7fe      	b.n	800eebc <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eebe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d109      	bne.n	800eeda <xTimerCreateStatic+0x48>
 800eec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeca:	f383 8811 	msr	BASEPRI, r3
 800eece:	f3bf 8f6f 	isb	sy
 800eed2:	f3bf 8f4f 	dsb	sy
 800eed6:	617b      	str	r3, [r7, #20]
 800eed8:	e7fe      	b.n	800eed8 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00d      	beq.n	800ef00 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	2202      	movs	r2, #2
 800eee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	9301      	str	r3, [sp, #4]
 800eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	68b9      	ldr	r1, [r7, #8]
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 f805 	bl	800ef0a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ef00:	69fb      	ldr	r3, [r7, #28]
	}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3720      	adds	r7, #32
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b086      	sub	sp, #24
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	60f8      	str	r0, [r7, #12]
 800ef12:	60b9      	str	r1, [r7, #8]
 800ef14:	607a      	str	r2, [r7, #4]
 800ef16:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d109      	bne.n	800ef32 <prvInitialiseNewTimer+0x28>
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	617b      	str	r3, [r7, #20]
 800ef30:	e7fe      	b.n	800ef30 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800ef32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d01e      	beq.n	800ef76 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ef38:	f000 fae0 	bl	800f4fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	68ba      	ldr	r2, [r7, #8]
 800ef46:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	6a3a      	ldr	r2, [r7, #32]
 800ef52:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	3304      	adds	r3, #4
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fd fccb 	bl	800c8f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d008      	beq.n	800ef76 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef6a:	f043 0304 	orr.w	r3, r3, #4
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ef76:	bf00      	nop
 800ef78:	3718      	adds	r7, #24
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
	...

0800ef80 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b08a      	sub	sp, #40	; 0x28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d109      	bne.n	800efac <xTimerGenericCommand+0x2c>
 800ef98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef9c:	f383 8811 	msr	BASEPRI, r3
 800efa0:	f3bf 8f6f 	isb	sy
 800efa4:	f3bf 8f4f 	dsb	sy
 800efa8:	623b      	str	r3, [r7, #32]
 800efaa:	e7fe      	b.n	800efaa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800efac:	4b19      	ldr	r3, [pc, #100]	; (800f014 <xTimerGenericCommand+0x94>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d02a      	beq.n	800f00a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	2b05      	cmp	r3, #5
 800efc4:	dc18      	bgt.n	800eff8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efc6:	f7ff fb4d 	bl	800e664 <xTaskGetSchedulerState>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d109      	bne.n	800efe4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efd0:	4b10      	ldr	r3, [pc, #64]	; (800f014 <xTimerGenericCommand+0x94>)
 800efd2:	6818      	ldr	r0, [r3, #0]
 800efd4:	f107 0110 	add.w	r1, r7, #16
 800efd8:	2300      	movs	r3, #0
 800efda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efdc:	f7fd fec2 	bl	800cd64 <xQueueGenericSend>
 800efe0:	6278      	str	r0, [r7, #36]	; 0x24
 800efe2:	e012      	b.n	800f00a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efe4:	4b0b      	ldr	r3, [pc, #44]	; (800f014 <xTimerGenericCommand+0x94>)
 800efe6:	6818      	ldr	r0, [r3, #0]
 800efe8:	f107 0110 	add.w	r1, r7, #16
 800efec:	2300      	movs	r3, #0
 800efee:	2200      	movs	r2, #0
 800eff0:	f7fd feb8 	bl	800cd64 <xQueueGenericSend>
 800eff4:	6278      	str	r0, [r7, #36]	; 0x24
 800eff6:	e008      	b.n	800f00a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eff8:	4b06      	ldr	r3, [pc, #24]	; (800f014 <xTimerGenericCommand+0x94>)
 800effa:	6818      	ldr	r0, [r3, #0]
 800effc:	f107 0110 	add.w	r1, r7, #16
 800f000:	2300      	movs	r3, #0
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	f7fd ffa8 	bl	800cf58 <xQueueGenericSendFromISR>
 800f008:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3728      	adds	r7, #40	; 0x28
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	20000c20 	.word	0x20000c20

0800f018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b088      	sub	sp, #32
 800f01c:	af02      	add	r7, sp, #8
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f022:	4b22      	ldr	r3, [pc, #136]	; (800f0ac <prvProcessExpiredTimer+0x94>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	3304      	adds	r3, #4
 800f030:	4618      	mov	r0, r3
 800f032:	f7fd fcc9 	bl	800c9c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f03c:	f003 0304 	and.w	r3, r3, #4
 800f040:	2b00      	cmp	r3, #0
 800f042:	d021      	beq.n	800f088 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	699a      	ldr	r2, [r3, #24]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	18d1      	adds	r1, r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	683a      	ldr	r2, [r7, #0]
 800f050:	6978      	ldr	r0, [r7, #20]
 800f052:	f000 f8d1 	bl	800f1f8 <prvInsertTimerInActiveList>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d01e      	beq.n	800f09a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f05c:	2300      	movs	r3, #0
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	2300      	movs	r3, #0
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	2100      	movs	r1, #0
 800f066:	6978      	ldr	r0, [r7, #20]
 800f068:	f7ff ff8a 	bl	800ef80 <xTimerGenericCommand>
 800f06c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d112      	bne.n	800f09a <prvProcessExpiredTimer+0x82>
 800f074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f078:	f383 8811 	msr	BASEPRI, r3
 800f07c:	f3bf 8f6f 	isb	sy
 800f080:	f3bf 8f4f 	dsb	sy
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	e7fe      	b.n	800f086 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f08e:	f023 0301 	bic.w	r3, r3, #1
 800f092:	b2da      	uxtb	r2, r3
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	6978      	ldr	r0, [r7, #20]
 800f0a0:	4798      	blx	r3
}
 800f0a2:	bf00      	nop
 800f0a4:	3718      	adds	r7, #24
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	20000c18 	.word	0x20000c18

0800f0b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0b8:	f107 0308 	add.w	r3, r7, #8
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f000 f857 	bl	800f170 <prvGetNextExpireTime>
 800f0c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f000 f803 	bl	800f0d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0ce:	f000 f8d5 	bl	800f27c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0d2:	e7f1      	b.n	800f0b8 <prvTimerTask+0x8>

0800f0d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0de:	f7fe fedd 	bl	800de9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0e2:	f107 0308 	add.w	r3, r7, #8
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f000 f866 	bl	800f1b8 <prvSampleTimeNow>
 800f0ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d130      	bne.n	800f156 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10a      	bne.n	800f110 <prvProcessTimerOrBlockTask+0x3c>
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d806      	bhi.n	800f110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f102:	f7fe fed9 	bl	800deb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f106:	68f9      	ldr	r1, [r7, #12]
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7ff ff85 	bl	800f018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f10e:	e024      	b.n	800f15a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d008      	beq.n	800f128 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f116:	4b13      	ldr	r3, [pc, #76]	; (800f164 <prvProcessTimerOrBlockTask+0x90>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <prvProcessTimerOrBlockTask+0x50>
 800f120:	2301      	movs	r3, #1
 800f122:	e000      	b.n	800f126 <prvProcessTimerOrBlockTask+0x52>
 800f124:	2300      	movs	r3, #0
 800f126:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f128:	4b0f      	ldr	r3, [pc, #60]	; (800f168 <prvProcessTimerOrBlockTask+0x94>)
 800f12a:	6818      	ldr	r0, [r3, #0]
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	683a      	ldr	r2, [r7, #0]
 800f134:	4619      	mov	r1, r3
 800f136:	f7fe fc47 	bl	800d9c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f13a:	f7fe febd 	bl	800deb8 <xTaskResumeAll>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10a      	bne.n	800f15a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f144:	4b09      	ldr	r3, [pc, #36]	; (800f16c <prvProcessTimerOrBlockTask+0x98>)
 800f146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	f3bf 8f6f 	isb	sy
}
 800f154:	e001      	b.n	800f15a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f156:	f7fe feaf 	bl	800deb8 <xTaskResumeAll>
}
 800f15a:	bf00      	nop
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20000c1c 	.word	0x20000c1c
 800f168:	20000c20 	.word	0x20000c20
 800f16c:	e000ed04 	.word	0xe000ed04

0800f170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f178:	4b0e      	ldr	r3, [pc, #56]	; (800f1b4 <prvGetNextExpireTime+0x44>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d101      	bne.n	800f186 <prvGetNextExpireTime+0x16>
 800f182:	2201      	movs	r2, #1
 800f184:	e000      	b.n	800f188 <prvGetNextExpireTime+0x18>
 800f186:	2200      	movs	r2, #0
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d105      	bne.n	800f1a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f194:	4b07      	ldr	r3, [pc, #28]	; (800f1b4 <prvGetNextExpireTime+0x44>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	e001      	b.n	800f1a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	20000c18 	.word	0x20000c18

0800f1b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f1c0:	f7fe ff16 	bl	800dff0 <xTaskGetTickCount>
 800f1c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f1c6:	4b0b      	ldr	r3, [pc, #44]	; (800f1f4 <prvSampleTimeNow+0x3c>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d205      	bcs.n	800f1dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f1d0:	f000 f930 	bl	800f434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	e002      	b.n	800f1e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1e2:	4a04      	ldr	r2, [pc, #16]	; (800f1f4 <prvSampleTimeNow+0x3c>)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3710      	adds	r7, #16
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	20000c28 	.word	0x20000c28

0800f1f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
 800f204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f206:	2300      	movs	r3, #0
 800f208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f216:	68ba      	ldr	r2, [r7, #8]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d812      	bhi.n	800f244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	1ad2      	subs	r2, r2, r3
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	699b      	ldr	r3, [r3, #24]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d302      	bcc.n	800f232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f22c:	2301      	movs	r3, #1
 800f22e:	617b      	str	r3, [r7, #20]
 800f230:	e01b      	b.n	800f26a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f232:	4b10      	ldr	r3, [pc, #64]	; (800f274 <prvInsertTimerInActiveList+0x7c>)
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3304      	adds	r3, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	4610      	mov	r0, r2
 800f23e:	f7fd fb8a 	bl	800c956 <vListInsert>
 800f242:	e012      	b.n	800f26a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d206      	bcs.n	800f25a <prvInsertTimerInActiveList+0x62>
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	429a      	cmp	r2, r3
 800f252:	d302      	bcc.n	800f25a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f254:	2301      	movs	r3, #1
 800f256:	617b      	str	r3, [r7, #20]
 800f258:	e007      	b.n	800f26a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f25a:	4b07      	ldr	r3, [pc, #28]	; (800f278 <prvInsertTimerInActiveList+0x80>)
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	3304      	adds	r3, #4
 800f262:	4619      	mov	r1, r3
 800f264:	4610      	mov	r0, r2
 800f266:	f7fd fb76 	bl	800c956 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f26a:	697b      	ldr	r3, [r7, #20]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3718      	adds	r7, #24
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	20000c1c 	.word	0x20000c1c
 800f278:	20000c18 	.word	0x20000c18

0800f27c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08e      	sub	sp, #56	; 0x38
 800f280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f282:	e0c6      	b.n	800f412 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	da17      	bge.n	800f2ba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f28a:	1d3b      	adds	r3, r7, #4
 800f28c:	3304      	adds	r3, #4
 800f28e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f292:	2b00      	cmp	r3, #0
 800f294:	d109      	bne.n	800f2aa <prvProcessReceivedCommands+0x2e>
 800f296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	61fb      	str	r3, [r7, #28]
 800f2a8:	e7fe      	b.n	800f2a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2b0:	6850      	ldr	r0, [r2, #4]
 800f2b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2b4:	6892      	ldr	r2, [r2, #8]
 800f2b6:	4611      	mov	r1, r2
 800f2b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f2c0 80a7 	blt.w	800f410 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c8:	695b      	ldr	r3, [r3, #20]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d004      	beq.n	800f2d8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fd fb78 	bl	800c9c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2d8:	463b      	mov	r3, r7
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7ff ff6c 	bl	800f1b8 <prvSampleTimeNow>
 800f2e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2b09      	cmp	r3, #9
 800f2e6:	f200 8094 	bhi.w	800f412 <prvProcessReceivedCommands+0x196>
 800f2ea:	a201      	add	r2, pc, #4	; (adr r2, 800f2f0 <prvProcessReceivedCommands+0x74>)
 800f2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f0:	0800f319 	.word	0x0800f319
 800f2f4:	0800f319 	.word	0x0800f319
 800f2f8:	0800f319 	.word	0x0800f319
 800f2fc:	0800f38b 	.word	0x0800f38b
 800f300:	0800f39f 	.word	0x0800f39f
 800f304:	0800f3e7 	.word	0x0800f3e7
 800f308:	0800f319 	.word	0x0800f319
 800f30c:	0800f319 	.word	0x0800f319
 800f310:	0800f38b 	.word	0x0800f38b
 800f314:	0800f39f 	.word	0x0800f39f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f31e:	f043 0301 	orr.w	r3, r3, #1
 800f322:	b2da      	uxtb	r2, r3
 800f324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	18d1      	adds	r1, r2, r3
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f338:	f7ff ff5e 	bl	800f1f8 <prvInsertTimerInActiveList>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d067      	beq.n	800f412 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f348:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f350:	f003 0304 	and.w	r3, r3, #4
 800f354:	2b00      	cmp	r3, #0
 800f356:	d05c      	beq.n	800f412 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	699b      	ldr	r3, [r3, #24]
 800f35e:	441a      	add	r2, r3
 800f360:	2300      	movs	r3, #0
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	2300      	movs	r3, #0
 800f366:	2100      	movs	r1, #0
 800f368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f36a:	f7ff fe09 	bl	800ef80 <xTimerGenericCommand>
 800f36e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f370:	6a3b      	ldr	r3, [r7, #32]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d14d      	bne.n	800f412 <prvProcessReceivedCommands+0x196>
 800f376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	61bb      	str	r3, [r7, #24]
 800f388:	e7fe      	b.n	800f388 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f390:	f023 0301 	bic.w	r3, r3, #1
 800f394:	b2da      	uxtb	r2, r3
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f39c:	e039      	b.n	800f412 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3a4:	f043 0301 	orr.w	r3, r3, #1
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	699b      	ldr	r3, [r3, #24]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d109      	bne.n	800f3d2 <prvProcessReceivedCommands+0x156>
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	617b      	str	r3, [r7, #20]
 800f3d0:	e7fe      	b.n	800f3d0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	699a      	ldr	r2, [r3, #24]
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d8:	18d1      	adds	r1, r2, r3
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3e0:	f7ff ff0a 	bl	800f1f8 <prvInsertTimerInActiveList>
					break;
 800f3e4:	e015      	b.n	800f412 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3ec:	f003 0302 	and.w	r3, r3, #2
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d103      	bne.n	800f3fc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3f6:	f000 fbe5 	bl	800fbc4 <vPortFree>
 800f3fa:	e00a      	b.n	800f412 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f402:	f023 0301 	bic.w	r3, r3, #1
 800f406:	b2da      	uxtb	r2, r3
 800f408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f40e:	e000      	b.n	800f412 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f410:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f412:	4b07      	ldr	r3, [pc, #28]	; (800f430 <prvProcessReceivedCommands+0x1b4>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	1d39      	adds	r1, r7, #4
 800f418:	2200      	movs	r2, #0
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd feba 	bl	800d194 <xQueueReceive>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	f47f af2e 	bne.w	800f284 <prvProcessReceivedCommands+0x8>
	}
}
 800f428:	bf00      	nop
 800f42a:	3730      	adds	r7, #48	; 0x30
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	20000c20 	.word	0x20000c20

0800f434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b088      	sub	sp, #32
 800f438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f43a:	e047      	b.n	800f4cc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f43c:	4b2d      	ldr	r3, [pc, #180]	; (800f4f4 <prvSwitchTimerLists+0xc0>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f446:	4b2b      	ldr	r3, [pc, #172]	; (800f4f4 <prvSwitchTimerLists+0xc0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	3304      	adds	r3, #4
 800f454:	4618      	mov	r0, r3
 800f456:	f7fd fab7 	bl	800c9c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f468:	f003 0304 	and.w	r3, r3, #4
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d02d      	beq.n	800f4cc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	699b      	ldr	r3, [r3, #24]
 800f474:	693a      	ldr	r2, [r7, #16]
 800f476:	4413      	add	r3, r2
 800f478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f47a:	68ba      	ldr	r2, [r7, #8]
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d90e      	bls.n	800f4a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	68ba      	ldr	r2, [r7, #8]
 800f486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f48e:	4b19      	ldr	r3, [pc, #100]	; (800f4f4 <prvSwitchTimerLists+0xc0>)
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3304      	adds	r3, #4
 800f496:	4619      	mov	r1, r3
 800f498:	4610      	mov	r0, r2
 800f49a:	f7fd fa5c 	bl	800c956 <vListInsert>
 800f49e:	e015      	b.n	800f4cc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	693a      	ldr	r2, [r7, #16]
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f7ff fd68 	bl	800ef80 <xTimerGenericCommand>
 800f4b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d109      	bne.n	800f4cc <prvSwitchTimerLists+0x98>
 800f4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4bc:	f383 8811 	msr	BASEPRI, r3
 800f4c0:	f3bf 8f6f 	isb	sy
 800f4c4:	f3bf 8f4f 	dsb	sy
 800f4c8:	603b      	str	r3, [r7, #0]
 800f4ca:	e7fe      	b.n	800f4ca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f4cc:	4b09      	ldr	r3, [pc, #36]	; (800f4f4 <prvSwitchTimerLists+0xc0>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d1b2      	bne.n	800f43c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f4d6:	4b07      	ldr	r3, [pc, #28]	; (800f4f4 <prvSwitchTimerLists+0xc0>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f4dc:	4b06      	ldr	r3, [pc, #24]	; (800f4f8 <prvSwitchTimerLists+0xc4>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	4a04      	ldr	r2, [pc, #16]	; (800f4f4 <prvSwitchTimerLists+0xc0>)
 800f4e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f4e4:	4a04      	ldr	r2, [pc, #16]	; (800f4f8 <prvSwitchTimerLists+0xc4>)
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	6013      	str	r3, [r2, #0]
}
 800f4ea:	bf00      	nop
 800f4ec:	3718      	adds	r7, #24
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	20000c18 	.word	0x20000c18
 800f4f8:	20000c1c 	.word	0x20000c1c

0800f4fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f502:	f000 f983 	bl	800f80c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f506:	4b15      	ldr	r3, [pc, #84]	; (800f55c <prvCheckForValidListAndQueue+0x60>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d120      	bne.n	800f550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f50e:	4814      	ldr	r0, [pc, #80]	; (800f560 <prvCheckForValidListAndQueue+0x64>)
 800f510:	f7fd f9d0 	bl	800c8b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f514:	4813      	ldr	r0, [pc, #76]	; (800f564 <prvCheckForValidListAndQueue+0x68>)
 800f516:	f7fd f9cd 	bl	800c8b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f51a:	4b13      	ldr	r3, [pc, #76]	; (800f568 <prvCheckForValidListAndQueue+0x6c>)
 800f51c:	4a10      	ldr	r2, [pc, #64]	; (800f560 <prvCheckForValidListAndQueue+0x64>)
 800f51e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f520:	4b12      	ldr	r3, [pc, #72]	; (800f56c <prvCheckForValidListAndQueue+0x70>)
 800f522:	4a10      	ldr	r2, [pc, #64]	; (800f564 <prvCheckForValidListAndQueue+0x68>)
 800f524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f526:	2300      	movs	r3, #0
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	4b11      	ldr	r3, [pc, #68]	; (800f570 <prvCheckForValidListAndQueue+0x74>)
 800f52c:	4a11      	ldr	r2, [pc, #68]	; (800f574 <prvCheckForValidListAndQueue+0x78>)
 800f52e:	2110      	movs	r1, #16
 800f530:	200a      	movs	r0, #10
 800f532:	f7fd fadb 	bl	800caec <xQueueGenericCreateStatic>
 800f536:	4602      	mov	r2, r0
 800f538:	4b08      	ldr	r3, [pc, #32]	; (800f55c <prvCheckForValidListAndQueue+0x60>)
 800f53a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f53c:	4b07      	ldr	r3, [pc, #28]	; (800f55c <prvCheckForValidListAndQueue+0x60>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d005      	beq.n	800f550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f544:	4b05      	ldr	r3, [pc, #20]	; (800f55c <prvCheckForValidListAndQueue+0x60>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	490b      	ldr	r1, [pc, #44]	; (800f578 <prvCheckForValidListAndQueue+0x7c>)
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fe f9ea 	bl	800d924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f550:	f000 f98a 	bl	800f868 <vPortExitCritical>
}
 800f554:	bf00      	nop
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	20000c20 	.word	0x20000c20
 800f560:	20000bf0 	.word	0x20000bf0
 800f564:	20000c04 	.word	0x20000c04
 800f568:	20000c18 	.word	0x20000c18
 800f56c:	20000c1c 	.word	0x20000c1c
 800f570:	20000ccc 	.word	0x20000ccc
 800f574:	20000c2c 	.word	0x20000c2c
 800f578:	080113c8 	.word	0x080113c8

0800f57c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b086      	sub	sp, #24
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d109      	bne.n	800f5a2 <pvTimerGetTimerID+0x26>
 800f58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	60fb      	str	r3, [r7, #12]
 800f5a0:	e7fe      	b.n	800f5a0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 800f5a2:	f000 f933 	bl	800f80c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	69db      	ldr	r3, [r3, #28]
 800f5aa:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f5ac:	f000 f95c 	bl	800f868 <vPortExitCritical>

	return pvReturn;
 800f5b0:	693b      	ldr	r3, [r7, #16]
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
	...

0800f5bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	3b04      	subs	r3, #4
 800f5cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f5d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3b04      	subs	r3, #4
 800f5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	f023 0201 	bic.w	r2, r3, #1
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	3b04      	subs	r3, #4
 800f5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f5ec:	4a0c      	ldr	r2, [pc, #48]	; (800f620 <pxPortInitialiseStack+0x64>)
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3b14      	subs	r3, #20
 800f5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3b04      	subs	r3, #4
 800f602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f06f 0202 	mvn.w	r2, #2
 800f60a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	3b20      	subs	r3, #32
 800f610:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f612:	68fb      	ldr	r3, [r7, #12]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr
 800f620:	0800f625 	.word	0x0800f625

0800f624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f62a:	2300      	movs	r3, #0
 800f62c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f62e:	4b11      	ldr	r3, [pc, #68]	; (800f674 <prvTaskExitError+0x50>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f636:	d009      	beq.n	800f64c <prvTaskExitError+0x28>
 800f638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63c:	f383 8811 	msr	BASEPRI, r3
 800f640:	f3bf 8f6f 	isb	sy
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	60fb      	str	r3, [r7, #12]
 800f64a:	e7fe      	b.n	800f64a <prvTaskExitError+0x26>
 800f64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f65e:	bf00      	nop
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d0fc      	beq.n	800f660 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f666:	bf00      	nop
 800f668:	3714      	adds	r7, #20
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	2000000c 	.word	0x2000000c
	...

0800f680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f680:	4b07      	ldr	r3, [pc, #28]	; (800f6a0 <pxCurrentTCBConst2>)
 800f682:	6819      	ldr	r1, [r3, #0]
 800f684:	6808      	ldr	r0, [r1, #0]
 800f686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68a:	f380 8809 	msr	PSP, r0
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f04f 0000 	mov.w	r0, #0
 800f696:	f380 8811 	msr	BASEPRI, r0
 800f69a:	4770      	bx	lr
 800f69c:	f3af 8000 	nop.w

0800f6a0 <pxCurrentTCBConst2>:
 800f6a0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f6a4:	bf00      	nop
 800f6a6:	bf00      	nop

0800f6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f6a8:	4808      	ldr	r0, [pc, #32]	; (800f6cc <prvPortStartFirstTask+0x24>)
 800f6aa:	6800      	ldr	r0, [r0, #0]
 800f6ac:	6800      	ldr	r0, [r0, #0]
 800f6ae:	f380 8808 	msr	MSP, r0
 800f6b2:	f04f 0000 	mov.w	r0, #0
 800f6b6:	f380 8814 	msr	CONTROL, r0
 800f6ba:	b662      	cpsie	i
 800f6bc:	b661      	cpsie	f
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	f3bf 8f6f 	isb	sy
 800f6c6:	df00      	svc	0
 800f6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f6ca:	bf00      	nop
 800f6cc:	e000ed08 	.word	0xe000ed08

0800f6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f6d6:	4b44      	ldr	r3, [pc, #272]	; (800f7e8 <xPortStartScheduler+0x118>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a44      	ldr	r2, [pc, #272]	; (800f7ec <xPortStartScheduler+0x11c>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d109      	bne.n	800f6f4 <xPortStartScheduler+0x24>
 800f6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e4:	f383 8811 	msr	BASEPRI, r3
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	f3bf 8f4f 	dsb	sy
 800f6f0:	613b      	str	r3, [r7, #16]
 800f6f2:	e7fe      	b.n	800f6f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f6f4:	4b3c      	ldr	r3, [pc, #240]	; (800f7e8 <xPortStartScheduler+0x118>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a3d      	ldr	r2, [pc, #244]	; (800f7f0 <xPortStartScheduler+0x120>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d109      	bne.n	800f712 <xPortStartScheduler+0x42>
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	60fb      	str	r3, [r7, #12]
 800f710:	e7fe      	b.n	800f710 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f712:	4b38      	ldr	r3, [pc, #224]	; (800f7f4 <xPortStartScheduler+0x124>)
 800f714:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	22ff      	movs	r2, #255	; 0xff
 800f722:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	b2db      	uxtb	r3, r3
 800f72a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f72c:	78fb      	ldrb	r3, [r7, #3]
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f734:	b2da      	uxtb	r2, r3
 800f736:	4b30      	ldr	r3, [pc, #192]	; (800f7f8 <xPortStartScheduler+0x128>)
 800f738:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f73a:	4b30      	ldr	r3, [pc, #192]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f73c:	2207      	movs	r2, #7
 800f73e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f740:	e009      	b.n	800f756 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f742:	4b2e      	ldr	r3, [pc, #184]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	3b01      	subs	r3, #1
 800f748:	4a2c      	ldr	r2, [pc, #176]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f74a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f74c:	78fb      	ldrb	r3, [r7, #3]
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	b2db      	uxtb	r3, r3
 800f754:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f756:	78fb      	ldrb	r3, [r7, #3]
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f75e:	2b80      	cmp	r3, #128	; 0x80
 800f760:	d0ef      	beq.n	800f742 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f762:	4b26      	ldr	r3, [pc, #152]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f1c3 0307 	rsb	r3, r3, #7
 800f76a:	2b04      	cmp	r3, #4
 800f76c:	d009      	beq.n	800f782 <xPortStartScheduler+0xb2>
 800f76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	60bb      	str	r3, [r7, #8]
 800f780:	e7fe      	b.n	800f780 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f782:	4b1e      	ldr	r3, [pc, #120]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	021b      	lsls	r3, r3, #8
 800f788:	4a1c      	ldr	r2, [pc, #112]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f78a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f78c:	4b1b      	ldr	r3, [pc, #108]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f794:	4a19      	ldr	r2, [pc, #100]	; (800f7fc <xPortStartScheduler+0x12c>)
 800f796:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f7a0:	4b17      	ldr	r3, [pc, #92]	; (800f800 <xPortStartScheduler+0x130>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a16      	ldr	r2, [pc, #88]	; (800f800 <xPortStartScheduler+0x130>)
 800f7a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f7aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f7ac:	4b14      	ldr	r3, [pc, #80]	; (800f800 <xPortStartScheduler+0x130>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a13      	ldr	r2, [pc, #76]	; (800f800 <xPortStartScheduler+0x130>)
 800f7b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f7b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f7b8:	f000 f8d6 	bl	800f968 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7bc:	4b11      	ldr	r3, [pc, #68]	; (800f804 <xPortStartScheduler+0x134>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7c2:	f000 f8f5 	bl	800f9b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7c6:	4b10      	ldr	r3, [pc, #64]	; (800f808 <xPortStartScheduler+0x138>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a0f      	ldr	r2, [pc, #60]	; (800f808 <xPortStartScheduler+0x138>)
 800f7cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f7d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f7d2:	f7ff ff69 	bl	800f6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f7d6:	f7fe fce5 	bl	800e1a4 <vTaskSwitchContext>
	prvTaskExitError();
 800f7da:	f7ff ff23 	bl	800f624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3718      	adds	r7, #24
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	e000ed00 	.word	0xe000ed00
 800f7ec:	410fc271 	.word	0x410fc271
 800f7f0:	410fc270 	.word	0x410fc270
 800f7f4:	e000e400 	.word	0xe000e400
 800f7f8:	20000d1c 	.word	0x20000d1c
 800f7fc:	20000d20 	.word	0x20000d20
 800f800:	e000ed20 	.word	0xe000ed20
 800f804:	2000000c 	.word	0x2000000c
 800f808:	e000ef34 	.word	0xe000ef34

0800f80c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f824:	4b0e      	ldr	r3, [pc, #56]	; (800f860 <vPortEnterCritical+0x54>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	3301      	adds	r3, #1
 800f82a:	4a0d      	ldr	r2, [pc, #52]	; (800f860 <vPortEnterCritical+0x54>)
 800f82c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f82e:	4b0c      	ldr	r3, [pc, #48]	; (800f860 <vPortEnterCritical+0x54>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d10e      	bne.n	800f854 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f836:	4b0b      	ldr	r3, [pc, #44]	; (800f864 <vPortEnterCritical+0x58>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d009      	beq.n	800f854 <vPortEnterCritical+0x48>
 800f840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	603b      	str	r3, [r7, #0]
 800f852:	e7fe      	b.n	800f852 <vPortEnterCritical+0x46>
	}
}
 800f854:	bf00      	nop
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	2000000c 	.word	0x2000000c
 800f864:	e000ed04 	.word	0xe000ed04

0800f868 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f86e:	4b11      	ldr	r3, [pc, #68]	; (800f8b4 <vPortExitCritical+0x4c>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d109      	bne.n	800f88a <vPortExitCritical+0x22>
 800f876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87a:	f383 8811 	msr	BASEPRI, r3
 800f87e:	f3bf 8f6f 	isb	sy
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	607b      	str	r3, [r7, #4]
 800f888:	e7fe      	b.n	800f888 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f88a:	4b0a      	ldr	r3, [pc, #40]	; (800f8b4 <vPortExitCritical+0x4c>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	3b01      	subs	r3, #1
 800f890:	4a08      	ldr	r2, [pc, #32]	; (800f8b4 <vPortExitCritical+0x4c>)
 800f892:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f894:	4b07      	ldr	r3, [pc, #28]	; (800f8b4 <vPortExitCritical+0x4c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d104      	bne.n	800f8a6 <vPortExitCritical+0x3e>
 800f89c:	2300      	movs	r3, #0
 800f89e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f8a6:	bf00      	nop
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	2000000c 	.word	0x2000000c
	...

0800f8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f8c0:	f3ef 8009 	mrs	r0, PSP
 800f8c4:	f3bf 8f6f 	isb	sy
 800f8c8:	4b15      	ldr	r3, [pc, #84]	; (800f920 <pxCurrentTCBConst>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	f01e 0f10 	tst.w	lr, #16
 800f8d0:	bf08      	it	eq
 800f8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8da:	6010      	str	r0, [r2, #0]
 800f8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f8e4:	f380 8811 	msr	BASEPRI, r0
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f7fe fc58 	bl	800e1a4 <vTaskSwitchContext>
 800f8f4:	f04f 0000 	mov.w	r0, #0
 800f8f8:	f380 8811 	msr	BASEPRI, r0
 800f8fc:	bc09      	pop	{r0, r3}
 800f8fe:	6819      	ldr	r1, [r3, #0]
 800f900:	6808      	ldr	r0, [r1, #0]
 800f902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f906:	f01e 0f10 	tst.w	lr, #16
 800f90a:	bf08      	it	eq
 800f90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f910:	f380 8809 	msr	PSP, r0
 800f914:	f3bf 8f6f 	isb	sy
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	f3af 8000 	nop.w

0800f920 <pxCurrentTCBConst>:
 800f920:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f924:	bf00      	nop
 800f926:	bf00      	nop

0800f928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f940:	f7fe fb78 	bl	800e034 <xTaskIncrementTick>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d003      	beq.n	800f952 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f94a:	4b06      	ldr	r3, [pc, #24]	; (800f964 <SysTick_Handler+0x3c>)
 800f94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f950:	601a      	str	r2, [r3, #0]
 800f952:	2300      	movs	r3, #0
 800f954:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	e000ed04 	.word	0xe000ed04

0800f968 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f968:	b480      	push	{r7}
 800f96a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f96c:	4b0b      	ldr	r3, [pc, #44]	; (800f99c <vPortSetupTimerInterrupt+0x34>)
 800f96e:	2200      	movs	r2, #0
 800f970:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f972:	4b0b      	ldr	r3, [pc, #44]	; (800f9a0 <vPortSetupTimerInterrupt+0x38>)
 800f974:	2200      	movs	r2, #0
 800f976:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f978:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <vPortSetupTimerInterrupt+0x3c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a0a      	ldr	r2, [pc, #40]	; (800f9a8 <vPortSetupTimerInterrupt+0x40>)
 800f97e:	fba2 2303 	umull	r2, r3, r2, r3
 800f982:	099b      	lsrs	r3, r3, #6
 800f984:	4a09      	ldr	r2, [pc, #36]	; (800f9ac <vPortSetupTimerInterrupt+0x44>)
 800f986:	3b01      	subs	r3, #1
 800f988:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f98a:	4b04      	ldr	r3, [pc, #16]	; (800f99c <vPortSetupTimerInterrupt+0x34>)
 800f98c:	2207      	movs	r2, #7
 800f98e:	601a      	str	r2, [r3, #0]
}
 800f990:	bf00      	nop
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	e000e010 	.word	0xe000e010
 800f9a0:	e000e018 	.word	0xe000e018
 800f9a4:	20000000 	.word	0x20000000
 800f9a8:	10624dd3 	.word	0x10624dd3
 800f9ac:	e000e014 	.word	0xe000e014

0800f9b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f9b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f9c0 <vPortEnableVFP+0x10>
 800f9b4:	6801      	ldr	r1, [r0, #0]
 800f9b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f9ba:	6001      	str	r1, [r0, #0]
 800f9bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f9be:	bf00      	nop
 800f9c0:	e000ed88 	.word	0xe000ed88

0800f9c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9ca:	f3ef 8305 	mrs	r3, IPSR
 800f9ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2b0f      	cmp	r3, #15
 800f9d4:	d913      	bls.n	800f9fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f9d6:	4a16      	ldr	r2, [pc, #88]	; (800fa30 <vPortValidateInterruptPriority+0x6c>)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	4413      	add	r3, r2
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f9e0:	4b14      	ldr	r3, [pc, #80]	; (800fa34 <vPortValidateInterruptPriority+0x70>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	7afa      	ldrb	r2, [r7, #11]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d209      	bcs.n	800f9fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ee:	f383 8811 	msr	BASEPRI, r3
 800f9f2:	f3bf 8f6f 	isb	sy
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	607b      	str	r3, [r7, #4]
 800f9fc:	e7fe      	b.n	800f9fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9fe:	4b0e      	ldr	r3, [pc, #56]	; (800fa38 <vPortValidateInterruptPriority+0x74>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa06:	4b0d      	ldr	r3, [pc, #52]	; (800fa3c <vPortValidateInterruptPriority+0x78>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d909      	bls.n	800fa22 <vPortValidateInterruptPriority+0x5e>
 800fa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	603b      	str	r3, [r7, #0]
 800fa20:	e7fe      	b.n	800fa20 <vPortValidateInterruptPriority+0x5c>
	}
 800fa22:	bf00      	nop
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop
 800fa30:	e000e3f0 	.word	0xe000e3f0
 800fa34:	20000d1c 	.word	0x20000d1c
 800fa38:	e000ed0c 	.word	0xe000ed0c
 800fa3c:	20000d20 	.word	0x20000d20

0800fa40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b08a      	sub	sp, #40	; 0x28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa4c:	f7fe fa26 	bl	800de9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa50:	4b57      	ldr	r3, [pc, #348]	; (800fbb0 <pvPortMalloc+0x170>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d101      	bne.n	800fa5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa58:	f000 f90c 	bl	800fc74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa5c:	4b55      	ldr	r3, [pc, #340]	; (800fbb4 <pvPortMalloc+0x174>)
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4013      	ands	r3, r2
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f040 808c 	bne.w	800fb82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d01c      	beq.n	800faaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fa70:	2208      	movs	r2, #8
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4413      	add	r3, r2
 800fa76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f003 0307 	and.w	r3, r3, #7
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d013      	beq.n	800faaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f023 0307 	bic.w	r3, r3, #7
 800fa88:	3308      	adds	r3, #8
 800fa8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f003 0307 	and.w	r3, r3, #7
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d009      	beq.n	800faaa <pvPortMalloc+0x6a>
 800fa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9a:	f383 8811 	msr	BASEPRI, r3
 800fa9e:	f3bf 8f6f 	isb	sy
 800faa2:	f3bf 8f4f 	dsb	sy
 800faa6:	617b      	str	r3, [r7, #20]
 800faa8:	e7fe      	b.n	800faa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d068      	beq.n	800fb82 <pvPortMalloc+0x142>
 800fab0:	4b41      	ldr	r3, [pc, #260]	; (800fbb8 <pvPortMalloc+0x178>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d863      	bhi.n	800fb82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800faba:	4b40      	ldr	r3, [pc, #256]	; (800fbbc <pvPortMalloc+0x17c>)
 800fabc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fabe:	4b3f      	ldr	r3, [pc, #252]	; (800fbbc <pvPortMalloc+0x17c>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fac4:	e004      	b.n	800fad0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d903      	bls.n	800fae2 <pvPortMalloc+0xa2>
 800fada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d1f1      	bne.n	800fac6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fae2:	4b33      	ldr	r3, [pc, #204]	; (800fbb0 <pvPortMalloc+0x170>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fae8:	429a      	cmp	r2, r3
 800faea:	d04a      	beq.n	800fb82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800faec:	6a3b      	ldr	r3, [r7, #32]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2208      	movs	r2, #8
 800faf2:	4413      	add	r3, r2
 800faf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800faf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	6a3b      	ldr	r3, [r7, #32]
 800fafc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb00:	685a      	ldr	r2, [r3, #4]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	1ad2      	subs	r2, r2, r3
 800fb06:	2308      	movs	r3, #8
 800fb08:	005b      	lsls	r3, r3, #1
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d91e      	bls.n	800fb4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4413      	add	r3, r2
 800fb14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	f003 0307 	and.w	r3, r3, #7
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d009      	beq.n	800fb34 <pvPortMalloc+0xf4>
 800fb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb24:	f383 8811 	msr	BASEPRI, r3
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	f3bf 8f4f 	dsb	sy
 800fb30:	613b      	str	r3, [r7, #16]
 800fb32:	e7fe      	b.n	800fb32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb36:	685a      	ldr	r2, [r3, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	1ad2      	subs	r2, r2, r3
 800fb3c:	69bb      	ldr	r3, [r7, #24]
 800fb3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb46:	69b8      	ldr	r0, [r7, #24]
 800fb48:	f000 f8f6 	bl	800fd38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb4c:	4b1a      	ldr	r3, [pc, #104]	; (800fbb8 <pvPortMalloc+0x178>)
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	1ad3      	subs	r3, r2, r3
 800fb56:	4a18      	ldr	r2, [pc, #96]	; (800fbb8 <pvPortMalloc+0x178>)
 800fb58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb5a:	4b17      	ldr	r3, [pc, #92]	; (800fbb8 <pvPortMalloc+0x178>)
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	4b18      	ldr	r3, [pc, #96]	; (800fbc0 <pvPortMalloc+0x180>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d203      	bcs.n	800fb6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb66:	4b14      	ldr	r3, [pc, #80]	; (800fbb8 <pvPortMalloc+0x178>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a15      	ldr	r2, [pc, #84]	; (800fbc0 <pvPortMalloc+0x180>)
 800fb6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb70:	685a      	ldr	r2, [r3, #4]
 800fb72:	4b10      	ldr	r3, [pc, #64]	; (800fbb4 <pvPortMalloc+0x174>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	431a      	orrs	r2, r3
 800fb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	2200      	movs	r2, #0
 800fb80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb82:	f7fe f999 	bl	800deb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	f003 0307 	and.w	r3, r3, #7
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d009      	beq.n	800fba4 <pvPortMalloc+0x164>
 800fb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb94:	f383 8811 	msr	BASEPRI, r3
 800fb98:	f3bf 8f6f 	isb	sy
 800fb9c:	f3bf 8f4f 	dsb	sy
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	e7fe      	b.n	800fba2 <pvPortMalloc+0x162>
	return pvReturn;
 800fba4:	69fb      	ldr	r3, [r7, #28]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3728      	adds	r7, #40	; 0x28
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	2000492c 	.word	0x2000492c
 800fbb4:	20004938 	.word	0x20004938
 800fbb8:	20004930 	.word	0x20004930
 800fbbc:	20004924 	.word	0x20004924
 800fbc0:	20004934 	.word	0x20004934

0800fbc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b086      	sub	sp, #24
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d046      	beq.n	800fc64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fbd6:	2308      	movs	r3, #8
 800fbd8:	425b      	negs	r3, r3
 800fbda:	697a      	ldr	r2, [r7, #20]
 800fbdc:	4413      	add	r3, r2
 800fbde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	685a      	ldr	r2, [r3, #4]
 800fbe8:	4b20      	ldr	r3, [pc, #128]	; (800fc6c <vPortFree+0xa8>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4013      	ands	r3, r2
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d109      	bne.n	800fc06 <vPortFree+0x42>
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	e7fe      	b.n	800fc04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d009      	beq.n	800fc22 <vPortFree+0x5e>
 800fc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc12:	f383 8811 	msr	BASEPRI, r3
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	60bb      	str	r3, [r7, #8]
 800fc20:	e7fe      	b.n	800fc20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	685a      	ldr	r2, [r3, #4]
 800fc26:	4b11      	ldr	r3, [pc, #68]	; (800fc6c <vPortFree+0xa8>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4013      	ands	r3, r2
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d019      	beq.n	800fc64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d115      	bne.n	800fc64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	4b0b      	ldr	r3, [pc, #44]	; (800fc6c <vPortFree+0xa8>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	43db      	mvns	r3, r3
 800fc42:	401a      	ands	r2, r3
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc48:	f7fe f928 	bl	800de9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	4b07      	ldr	r3, [pc, #28]	; (800fc70 <vPortFree+0xac>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4413      	add	r3, r2
 800fc56:	4a06      	ldr	r2, [pc, #24]	; (800fc70 <vPortFree+0xac>)
 800fc58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc5a:	6938      	ldr	r0, [r7, #16]
 800fc5c:	f000 f86c 	bl	800fd38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fc60:	f7fe f92a 	bl	800deb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc64:	bf00      	nop
 800fc66:	3718      	adds	r7, #24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20004938 	.word	0x20004938
 800fc70:	20004930 	.word	0x20004930

0800fc74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fc7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc80:	4b27      	ldr	r3, [pc, #156]	; (800fd20 <prvHeapInit+0xac>)
 800fc82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f003 0307 	and.w	r3, r3, #7
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00c      	beq.n	800fca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	3307      	adds	r3, #7
 800fc92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f023 0307 	bic.w	r3, r3, #7
 800fc9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	4a1f      	ldr	r2, [pc, #124]	; (800fd20 <prvHeapInit+0xac>)
 800fca4:	4413      	add	r3, r2
 800fca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fcac:	4a1d      	ldr	r2, [pc, #116]	; (800fd24 <prvHeapInit+0xb0>)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fcb2:	4b1c      	ldr	r3, [pc, #112]	; (800fd24 <prvHeapInit+0xb0>)
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fcc0:	2208      	movs	r2, #8
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	1a9b      	subs	r3, r3, r2
 800fcc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f023 0307 	bic.w	r3, r3, #7
 800fcce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	4a15      	ldr	r2, [pc, #84]	; (800fd28 <prvHeapInit+0xb4>)
 800fcd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fcd6:	4b14      	ldr	r3, [pc, #80]	; (800fd28 <prvHeapInit+0xb4>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcde:	4b12      	ldr	r3, [pc, #72]	; (800fd28 <prvHeapInit+0xb4>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2200      	movs	r2, #0
 800fce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	1ad2      	subs	r2, r2, r3
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcf4:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <prvHeapInit+0xb4>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	4a0a      	ldr	r2, [pc, #40]	; (800fd2c <prvHeapInit+0xb8>)
 800fd02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	4a09      	ldr	r2, [pc, #36]	; (800fd30 <prvHeapInit+0xbc>)
 800fd0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd0c:	4b09      	ldr	r3, [pc, #36]	; (800fd34 <prvHeapInit+0xc0>)
 800fd0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fd12:	601a      	str	r2, [r3, #0]
}
 800fd14:	bf00      	nop
 800fd16:	3714      	adds	r7, #20
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	20000d24 	.word	0x20000d24
 800fd24:	20004924 	.word	0x20004924
 800fd28:	2000492c 	.word	0x2000492c
 800fd2c:	20004934 	.word	0x20004934
 800fd30:	20004930 	.word	0x20004930
 800fd34:	20004938 	.word	0x20004938

0800fd38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd40:	4b28      	ldr	r3, [pc, #160]	; (800fde4 <prvInsertBlockIntoFreeList+0xac>)
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e002      	b.n	800fd4c <prvInsertBlockIntoFreeList+0x14>
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d8f7      	bhi.n	800fd46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	4413      	add	r3, r2
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d108      	bne.n	800fd7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	441a      	add	r2, r3
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	441a      	add	r2, r3
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d118      	bne.n	800fdc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	4b15      	ldr	r3, [pc, #84]	; (800fde8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d00d      	beq.n	800fdb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	685a      	ldr	r2, [r3, #4]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	441a      	add	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	e008      	b.n	800fdc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fdb6:	4b0c      	ldr	r3, [pc, #48]	; (800fde8 <prvInsertBlockIntoFreeList+0xb0>)
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	601a      	str	r2, [r3, #0]
 800fdbe:	e003      	b.n	800fdc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d002      	beq.n	800fdd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdd6:	bf00      	nop
 800fdd8:	3714      	adds	r7, #20
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	20004924 	.word	0x20004924
 800fde8:	2000492c 	.word	0x2000492c

0800fdec <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af02      	add	r7, sp, #8
 800fdf2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800fdf4:	4b35      	ldr	r3, [pc, #212]	; (800fecc <ModbusInit+0xe0>)
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d862      	bhi.n	800fec2 <ModbusInit+0xd6>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 800fdfc:	4a34      	ldr	r2, [pc, #208]	; (800fed0 <ModbusInit+0xe4>)
 800fdfe:	2101      	movs	r1, #1
 800fe00:	2040      	movs	r0, #64	; 0x40
 800fe02:	f7fc fc9d 	bl	800c740 <osMessageQueueNew>
 800fe06:	4602      	mov	r2, r0
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	675a      	str	r2, [r3, #116]	; 0x74

	  if(modH->uiModbusType == SLAVE_RTU)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	d108      	bne.n	800fe26 <ModbusInit+0x3a>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800fe14:	4a2f      	ldr	r2, [pc, #188]	; (800fed4 <ModbusInit+0xe8>)
 800fe16:	6879      	ldr	r1, [r7, #4]
 800fe18:	482f      	ldr	r0, [pc, #188]	; (800fed8 <ModbusInit+0xec>)
 800fe1a:	f7fc f987 	bl	800c12c <osThreadNew>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	67da      	str	r2, [r3, #124]	; 0x7c
 800fe24:	e027      	b.n	800fe76 <ModbusInit+0x8a>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	2b04      	cmp	r3, #4
 800fe2c:	d122      	bne.n	800fe74 <ModbusInit+0x88>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800fe2e:	4a2b      	ldr	r2, [pc, #172]	; (800fedc <ModbusInit+0xf0>)
 800fe30:	6879      	ldr	r1, [r7, #4]
 800fe32:	482b      	ldr	r0, [pc, #172]	; (800fee0 <ModbusInit+0xf4>)
 800fe34:	f7fc f97a 	bl	800c12c <osThreadNew>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	67da      	str	r2, [r3, #124]	; 0x7c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800fe44:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800fe4c:	4b25      	ldr	r3, [pc, #148]	; (800fee4 <ModbusInit+0xf8>)
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	4613      	mov	r3, r2
 800fe52:	2200      	movs	r2, #0
 800fe54:	4824      	ldr	r0, [pc, #144]	; (800fee8 <ModbusInit+0xfc>)
 800fe56:	f7fe fffb 	bl	800ee50 <xTimerCreate>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800fe62:	4a22      	ldr	r2, [pc, #136]	; (800feec <ModbusInit+0x100>)
 800fe64:	210c      	movs	r1, #12
 800fe66:	2002      	movs	r0, #2
 800fe68:	f7fc fc6a 	bl	800c740 <osMessageQueueNew>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	679a      	str	r2, [r3, #120]	; 0x78
 800fe72:	e000      	b.n	800fe76 <ModbusInit+0x8a>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800fe74:	e7fe      	b.n	800fe74 <ModbusInit+0x88>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800fe7c:	4b1c      	ldr	r3, [pc, #112]	; (800fef0 <ModbusInit+0x104>)
 800fe7e:	9300      	str	r3, [sp, #0]
 800fe80:	4613      	mov	r3, r2
 800fe82:	2200      	movs	r2, #0
 800fe84:	2105      	movs	r1, #5
 800fe86:	481b      	ldr	r0, [pc, #108]	; (800fef4 <ModbusInit+0x108>)
 800fe88:	f7fe ffe2 	bl	800ee50 <xTimerCreate>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800fe94:	4a18      	ldr	r2, [pc, #96]	; (800fef8 <ModbusInit+0x10c>)
 800fe96:	2101      	movs	r1, #1
 800fe98:	2001      	movs	r0, #1
 800fe9a:	f7fc faf5 	bl	800c488 <osSemaphoreNew>
 800fe9e:	4602      	mov	r2, r0
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  mHandlers[numberHandlers] = modH;
 800fea6:	4b09      	ldr	r3, [pc, #36]	; (800fecc <ModbusInit+0xe0>)
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	4619      	mov	r1, r3
 800feac:	4a13      	ldr	r2, [pc, #76]	; (800fefc <ModbusInit+0x110>)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800feb4:	4b05      	ldr	r3, [pc, #20]	; (800fecc <ModbusInit+0xe0>)
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	3301      	adds	r3, #1
 800feba:	b2da      	uxtb	r2, r3
 800febc:	4b03      	ldr	r3, [pc, #12]	; (800fecc <ModbusInit+0xe0>)
 800febe:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800fec0:	e000      	b.n	800fec4 <ModbusInit+0xd8>
	  while(1); //error no more Modbus handlers supported
 800fec2:	e7fe      	b.n	800fec2 <ModbusInit+0xd6>
}
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	2000493c 	.word	0x2000493c
 800fed0:	080114b4 	.word	0x080114b4
 800fed4:	080114e4 	.word	0x080114e4
 800fed8:	08010071 	.word	0x08010071
 800fedc:	08011508 	.word	0x08011508
 800fee0:	080104c5 	.word	0x080104c5
 800fee4:	08010019 	.word	0x08010019
 800fee8:	08011418 	.word	0x08011418
 800feec:	080114cc 	.word	0x080114cc
 800fef0:	0800ff99 	.word	0x0800ff99
 800fef4:	08011428 	.word	0x08011428
 800fef8:	0801152c 	.word	0x0801152c
 800fefc:	20004a3c 	.word	0x20004a3c

0800ff00 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]


    if (modH->EN_Port != NULL )
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d007      	beq.n	800ff20 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	68d8      	ldr	r0, [r3, #12]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	8a1b      	ldrh	r3, [r3, #16]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	f7f9 fc52 	bl	80097c4 <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	2b03      	cmp	r3, #3
 800ff26:	d104      	bne.n	800ff32 <ModbusStart+0x32>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d100      	bne.n	800ff32 <ModbusStart+0x32>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 800ff30:	e7fe      	b.n	800ff30 <ModbusStart+0x30>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800ff32:	bf00      	nop
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fb fbc9 	bl	800b6d0 <HAL_UART_GetState>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b20      	cmp	r3, #32
 800ff42:	d1f7      	bne.n	800ff34 <ModbusStart+0x34>
    {
    }


    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6858      	ldr	r0, [r3, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	3371      	adds	r3, #113	; 0x71
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	4619      	mov	r1, r3
 800ff50:	f7fb fa5e 	bl	800b410 <HAL_UART_Receive_IT>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d000      	beq.n	800ff5c <ModbusStart+0x5c>
    {
        while(1)
 800ff5a:	e7fe      	b.n	800ff5a <ModbusStart+0x5a>
        }
    }



    modH->u8lastRec = modH->u8BufferSize = 0;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af02      	add	r7, sp, #8
 800ff9e:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	60fb      	str	r3, [r7, #12]
 800ffa4:	e029      	b.n	800fffa <vTimerCallbackT35+0x62>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800ffa6:	4a1a      	ldr	r2, [pc, #104]	; (8010010 <vTimerCallbackT35+0x78>)
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d11d      	bne.n	800fff4 <vTimerCallbackT35+0x5c>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 800ffb8:	4a15      	ldr	r2, [pc, #84]	; (8010010 <vTimerCallbackT35+0x78>)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b04      	cmp	r3, #4
 800ffc4:	d10c      	bne.n	800ffe0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800ffc6:	4a12      	ldr	r2, [pc, #72]	; (8010010 <vTimerCallbackT35+0x78>)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffce:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	9300      	str	r3, [sp, #0]
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	2200      	movs	r2, #0
 800ffda:	2103      	movs	r1, #3
 800ffdc:	f7fe ffd0 	bl	800ef80 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800ffe0:	4a0b      	ldr	r2, [pc, #44]	; (8010010 <vTimerCallbackT35+0x78>)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffe8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ffea:	2300      	movs	r3, #0
 800ffec:	2203      	movs	r2, #3
 800ffee:	2100      	movs	r1, #0
 800fff0:	f7fe fd06 	bl	800ea00 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	3301      	adds	r3, #1
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	4b06      	ldr	r3, [pc, #24]	; (8010014 <vTimerCallbackT35+0x7c>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	4293      	cmp	r3, r2
 8010004:	dbcf      	blt.n	800ffa6 <vTimerCallbackT35+0xe>
		}

	}
}
 8010006:	bf00      	nop
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	20004a3c 	.word	0x20004a3c
 8010014:	2000493c 	.word	0x2000493c

08010018 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8010020:	2300      	movs	r3, #0
 8010022:	60fb      	str	r3, [r7, #12]
 8010024:	e015      	b.n	8010052 <vTimerCallbackTimeout+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8010026:	4a10      	ldr	r2, [pc, #64]	; (8010068 <vTimerCallbackTimeout+0x50>)
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801002e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	429a      	cmp	r2, r3
 8010036:	d109      	bne.n	801004c <vTimerCallbackTimeout+0x34>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 8010038:	4a0b      	ldr	r2, [pc, #44]	; (8010068 <vTimerCallbackTimeout+0x50>)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010040:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010042:	2300      	movs	r3, #0
 8010044:	2203      	movs	r2, #3
 8010046:	21ff      	movs	r1, #255	; 0xff
 8010048:	f7fe fcda 	bl	800ea00 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	3301      	adds	r3, #1
 8010050:	60fb      	str	r3, [r7, #12]
 8010052:	4b06      	ldr	r3, [pc, #24]	; (801006c <vTimerCallbackTimeout+0x54>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	461a      	mov	r2, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	4293      	cmp	r3, r2
 801005c:	dbe3      	blt.n	8010026 <vTimerCallbackTimeout+0xe>
		}

	}

}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20004a3c 	.word	0x20004a3c
 801006c:	2000493c 	.word	0x2000493c

08010070 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 801007c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010080:	2001      	movs	r0, #1
 8010082:	f7fe fc75 	bl	800e970 <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2200      	movs	r2, #0
 801008a:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010090:	4618      	mov	r0, r3
 8010092:	f7fd fae0 	bl	800d656 <uxQueueMessagesWaiting>
 8010096:	4603      	mov	r3, r0
 8010098:	b2da      	uxtb	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	  if (modH->EN_Port != NULL )
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d007      	beq.n	80100b8 <StartTaskModbusSlave+0x48>
	  {
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	68d8      	ldr	r0, [r3, #12]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	8a1b      	ldrh	r3, [r3, #16]
 80100b0:	2200      	movs	r2, #0
 80100b2:	4619      	mov	r1, r3
 80100b4:	f7f9 fb86 	bl	80097c4 <HAL_GPIO_WritePin>
	  }

	  int8_t i8state = getRxBuffer(modH);
 80100b8:	68f8      	ldr	r0, [r7, #12]
 80100ba:	f000 fbad 	bl	8010818 <getRxBuffer>
 80100be:	4603      	mov	r3, r0
 80100c0:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 80100c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80100c6:	2b06      	cmp	r3, #6
 80100c8:	dc09      	bgt.n	80100de <StartTaskModbusSlave+0x6e>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	22fa      	movs	r2, #250	; 0xfa
 80100ce:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100d4:	2100      	movs	r1, #0
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fc fca0 	bl	800ca1c <xQueueGenericReset>
		  continue;
 80100dc:	e093      	b.n	8010206 <StartTaskModbusSlave+0x196>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	7cda      	ldrb	r2, [r3, #19]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	7a1b      	ldrb	r3, [r3, #8]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	f040 808c 	bne.w	8010204 <StartTaskModbusSlave+0x194>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f000 fc39 	bl	8010964 <validateRequest>
 80100f2:	4603      	mov	r3, r0
 80100f4:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 80100f6:	7abb      	ldrb	r3, [r7, #10]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00f      	beq.n	801011c <StartTaskModbusSlave+0xac>
	  {
		  if (u8exception != NO_REPLY)
 80100fc:	7abb      	ldrb	r3, [r7, #10]
 80100fe:	2bff      	cmp	r3, #255	; 0xff
 8010100:	d007      	beq.n	8010112 <StartTaskModbusSlave+0xa2>
		  {
			  buildException( u8exception, modH);
 8010102:	7abb      	ldrb	r3, [r7, #10]
 8010104:	68f9      	ldr	r1, [r7, #12]
 8010106:	4618      	mov	r0, r3
 8010108:	f000 fd86 	bl	8010c18 <buildException>
			  sendTxBuffer(modH);
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f000 fda3 	bl	8010c58 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8010112:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 801011a:	e074      	b.n	8010206 <StartTaskModbusSlave+0x196>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2200      	movs	r2, #0
 8010120:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801012c:	4618      	mov	r0, r3
 801012e:	f7fd f90d 	bl	800d34c <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	7d1b      	ldrb	r3, [r3, #20]
 8010136:	3b01      	subs	r3, #1
 8010138:	2b0f      	cmp	r3, #15
 801013a:	d859      	bhi.n	80101f0 <StartTaskModbusSlave+0x180>
 801013c:	a201      	add	r2, pc, #4	; (adr r2, 8010144 <StartTaskModbusSlave+0xd4>)
 801013e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010142:	bf00      	nop
 8010144:	08010185 	.word	0x08010185
 8010148:	08010185 	.word	0x08010185
 801014c:	08010197 	.word	0x08010197
 8010150:	08010197 	.word	0x08010197
 8010154:	080101a9 	.word	0x080101a9
 8010158:	080101bb 	.word	0x080101bb
 801015c:	080101f1 	.word	0x080101f1
 8010160:	080101f1 	.word	0x080101f1
 8010164:	080101f1 	.word	0x080101f1
 8010168:	080101f1 	.word	0x080101f1
 801016c:	080101f1 	.word	0x080101f1
 8010170:	080101f1 	.word	0x080101f1
 8010174:	080101f1 	.word	0x080101f1
 8010178:	080101f1 	.word	0x080101f1
 801017c:	080101cd 	.word	0x080101cd
 8010180:	080101df 	.word	0x080101df
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f000 fdff 	bl	8010d88 <process_FC1>
 801018a:	4603      	mov	r3, r0
 801018c:	461a      	mov	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8010194:	e02d      	b.n	80101f2 <StartTaskModbusSlave+0x182>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f000 feab 	bl	8010ef2 <process_FC3>
 801019c:	4603      	mov	r3, r0
 801019e:	461a      	mov	r2, r3
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80101a6:	e024      	b.n	80101f2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 ff0b 	bl	8010fc4 <process_FC5>
 80101ae:	4603      	mov	r3, r0
 80101b0:	461a      	mov	r2, r3
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80101b8:	e01b      	b.n	80101f2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f000 ff58 	bl	8011070 <process_FC6>
 80101c0:	4603      	mov	r3, r0
 80101c2:	461a      	mov	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80101ca:	e012      	b.n	80101f2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80101cc:	68f8      	ldr	r0, [r7, #12]
 80101ce:	f000 ff80 	bl	80110d2 <process_FC15>
 80101d2:	4603      	mov	r3, r0
 80101d4:	461a      	mov	r2, r3
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80101dc:	e009      	b.n	80101f2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f001 f802 	bl	80111e8 <process_FC16>
 80101e4:	4603      	mov	r3, r0
 80101e6:	461a      	mov	r2, r3
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80101ee:	e000      	b.n	80101f2 <StartTaskModbusSlave+0x182>
			default:
				break;
 80101f0:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80101f8:	2300      	movs	r3, #0
 80101fa:	2200      	movs	r2, #0
 80101fc:	2100      	movs	r1, #0
 80101fe:	f7fc fdb1 	bl	800cd64 <xQueueGenericSend>
	    //return i8state;
	    continue;
 8010202:	e000      	b.n	8010206 <StartTaskModbusSlave+0x196>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8010204:	bf00      	nop
  {
 8010206:	e739      	b.n	801007c <StartTaskModbusSlave+0xc>

08010208 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	4638      	mov	r0, r7
 8010212:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8010216:	2300      	movs	r3, #0
 8010218:	75bb      	strb	r3, [r7, #22]
	//xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	7a1b      	ldrb	r3, [r3, #8]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <SendQuery+0x1e>
 8010222:	23ff      	movs	r3, #255	; 0xff
 8010224:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <SendQuery+0x2c>
 8010230:	23fe      	movs	r3, #254	; 0xfe
 8010232:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8010234:	783b      	ldrb	r3, [r7, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d002      	beq.n	8010240 <SendQuery+0x38>
 801023a:	783b      	ldrb	r3, [r7, #0]
 801023c:	2bf7      	cmp	r3, #247	; 0xf7
 801023e:	d901      	bls.n	8010244 <SendQuery+0x3c>
 8010240:	23f7      	movs	r3, #247	; 0xf7
 8010242:	75bb      	strb	r3, [r7, #22]

	if(error)
 8010244:	7dbb      	ldrb	r3, [r7, #22]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00e      	beq.n	8010268 <SendQuery+0x60>
	{
		 modH->i8lastError = error;
 801024a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8010258:	2300      	movs	r3, #0
 801025a:	2200      	movs	r2, #0
 801025c:	2100      	movs	r1, #0
 801025e:	f7fc fd81 	bl	800cd64 <xQueueGenericSend>
		 return error;
 8010262:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8010266:	e128      	b.n	80104ba <SendQuery+0x2b2>
	}


	modH->au16regs = telegram.au16reg;
 8010268:	68ba      	ldr	r2, [r7, #8]
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	659a      	str	r2, [r3, #88]	; 0x58

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 801026e:	783a      	ldrb	r2, [r7, #0]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8010274:	787a      	ldrb	r2, [r7, #1]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 801027a:	887b      	ldrh	r3, [r7, #2]
 801027c:	0a1b      	lsrs	r3, r3, #8
 801027e:	b29b      	uxth	r3, r3
 8010280:	b2da      	uxtb	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8010286:	887b      	ldrh	r3, [r7, #2]
 8010288:	b2da      	uxtb	r2, r3
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 801028e:	787b      	ldrb	r3, [r7, #1]
 8010290:	3b01      	subs	r3, #1
 8010292:	2b0f      	cmp	r3, #15
 8010294:	f200 8106 	bhi.w	80104a4 <SendQuery+0x29c>
 8010298:	a201      	add	r2, pc, #4	; (adr r2, 80102a0 <SendQuery+0x98>)
 801029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029e:	bf00      	nop
 80102a0:	080102e1 	.word	0x080102e1
 80102a4:	080102e1 	.word	0x080102e1
 80102a8:	080102e1 	.word	0x080102e1
 80102ac:	080102e1 	.word	0x080102e1
 80102b0:	080102ff 	.word	0x080102ff
 80102b4:	08010323 	.word	0x08010323
 80102b8:	080104a5 	.word	0x080104a5
 80102bc:	080104a5 	.word	0x080104a5
 80102c0:	080104a5 	.word	0x080104a5
 80102c4:	080104a5 	.word	0x080104a5
 80102c8:	080104a5 	.word	0x080104a5
 80102cc:	080104a5 	.word	0x080104a5
 80102d0:	080104a5 	.word	0x080104a5
 80102d4:	080104a5 	.word	0x080104a5
 80102d8:	08010349 	.word	0x08010349
 80102dc:	0801040b 	.word	0x0801040b
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80102e0:	88bb      	ldrh	r3, [r7, #4]
 80102e2:	0a1b      	lsrs	r3, r3, #8
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80102ec:	88bb      	ldrh	r3, [r7, #4]
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2206      	movs	r2, #6
 80102f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 80102fc:	e0d2      	b.n	80104a4 <SendQuery+0x29c>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010302:	881b      	ldrh	r3, [r3, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d001      	beq.n	801030c <SendQuery+0x104>
 8010308:	22ff      	movs	r2, #255	; 0xff
 801030a:	e000      	b.n	801030e <SendQuery+0x106>
 801030c:	2200      	movs	r2, #0
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2200      	movs	r2, #0
 8010316:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2206      	movs	r2, #6
 801031c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8010320:	e0c0      	b.n	80104a4 <SendQuery+0x29c>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	0a1b      	lsrs	r3, r3, #8
 801032a:	b29b      	uxth	r3, r3
 801032c:	b2da      	uxtb	r2, r3
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	b2da      	uxtb	r2, r3
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2206      	movs	r2, #6
 8010342:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8010346:	e0ad      	b.n	80104a4 <SendQuery+0x29c>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8010348:	88bb      	ldrh	r3, [r7, #4]
 801034a:	091b      	lsrs	r3, r3, #4
 801034c:	b29b      	uxth	r3, r3
 801034e:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 8010350:	7c7b      	ldrb	r3, [r7, #17]
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8010356:	88bb      	ldrh	r3, [r7, #4]
 8010358:	f003 030f 	and.w	r3, r3, #15
 801035c:	b29b      	uxth	r3, r3
 801035e:	2b00      	cmp	r3, #0
 8010360:	d005      	beq.n	801036e <SendQuery+0x166>
	    {
	        u8bytesno++;
 8010362:	7dfb      	ldrb	r3, [r7, #23]
 8010364:	3301      	adds	r3, #1
 8010366:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 8010368:	7c7b      	ldrb	r3, [r7, #17]
 801036a:	3301      	adds	r3, #1
 801036c:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 801036e:	88bb      	ldrh	r3, [r7, #4]
 8010370:	0a1b      	lsrs	r3, r3, #8
 8010372:	b29b      	uxth	r3, r3
 8010374:	b2da      	uxtb	r2, r3
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 801037a:	88bb      	ldrh	r3, [r7, #4]
 801037c:	b2da      	uxtb	r2, r3
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	7dfa      	ldrb	r2, [r7, #23]
 8010386:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2207      	movs	r2, #7
 801038c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8010390:	2300      	movs	r3, #0
 8010392:	82bb      	strh	r3, [r7, #20]
 8010394:	e033      	b.n	80103fe <SendQuery+0x1f6>
	    {
	        if(i%2)
 8010396:	8abb      	ldrh	r3, [r7, #20]
 8010398:	f003 0301 	and.w	r3, r3, #1
 801039c:	b29b      	uxth	r3, r3
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d010      	beq.n	80103c4 <SendQuery+0x1bc>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80103a6:	8abb      	ldrh	r3, [r7, #20]
 80103a8:	085b      	lsrs	r3, r3, #1
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	005b      	lsls	r3, r3, #1
 80103ae:	4413      	add	r3, r2
 80103b0:	881a      	ldrh	r2, [r3, #0]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80103b8:	4619      	mov	r1, r3
 80103ba:	b2d2      	uxtb	r2, r2
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	440b      	add	r3, r1
 80103c0:	74da      	strb	r2, [r3, #19]
 80103c2:	e011      	b.n	80103e8 <SendQuery+0x1e0>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80103c8:	8abb      	ldrh	r3, [r7, #20]
 80103ca:	085b      	lsrs	r3, r3, #1
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	005b      	lsls	r3, r3, #1
 80103d0:	4413      	add	r3, r2
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	0a1b      	lsrs	r3, r3, #8
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80103de:	4619      	mov	r1, r3
 80103e0:	b2d2      	uxtb	r2, r2
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	440b      	add	r3, r1
 80103e6:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80103ee:	3301      	adds	r3, #1
 80103f0:	b2da      	uxtb	r2, r3
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80103f8:	8abb      	ldrh	r3, [r7, #20]
 80103fa:	3301      	adds	r3, #1
 80103fc:	82bb      	strh	r3, [r7, #20]
 80103fe:	7dfb      	ldrb	r3, [r7, #23]
 8010400:	b29b      	uxth	r3, r3
 8010402:	8aba      	ldrh	r2, [r7, #20]
 8010404:	429a      	cmp	r2, r3
 8010406:	d3c6      	bcc.n	8010396 <SendQuery+0x18e>
	    }
	    break;
 8010408:	e04c      	b.n	80104a4 <SendQuery+0x29c>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 801040a:	88bb      	ldrh	r3, [r7, #4]
 801040c:	0a1b      	lsrs	r3, r3, #8
 801040e:	b29b      	uxth	r3, r3
 8010410:	b2da      	uxtb	r2, r3
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8010416:	88bb      	ldrh	r3, [r7, #4]
 8010418:	b2da      	uxtb	r2, r3
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 801041e:	88bb      	ldrh	r3, [r7, #4]
 8010420:	b2db      	uxtb	r3, r3
 8010422:	005b      	lsls	r3, r3, #1
 8010424:	b2da      	uxtb	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2207      	movs	r2, #7
 801042e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8010432:	2300      	movs	r3, #0
 8010434:	827b      	strh	r3, [r7, #18]
 8010436:	e030      	b.n	801049a <SendQuery+0x292>
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801043c:	8a7b      	ldrh	r3, [r7, #18]
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	4413      	add	r3, r2
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	0a1b      	lsrs	r3, r3, #8
 8010446:	b29a      	uxth	r2, r3
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801044e:	4619      	mov	r1, r3
 8010450:	b2d2      	uxtb	r2, r2
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	440b      	add	r3, r1
 8010456:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801045e:	3301      	adds	r3, #1
 8010460:	b2da      	uxtb	r2, r3
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801046c:	8a7b      	ldrh	r3, [r7, #18]
 801046e:	005b      	lsls	r3, r3, #1
 8010470:	4413      	add	r3, r2
 8010472:	881a      	ldrh	r2, [r3, #0]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801047a:	4619      	mov	r1, r3
 801047c:	b2d2      	uxtb	r2, r2
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	440b      	add	r3, r1
 8010482:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801048a:	3301      	adds	r3, #1
 801048c:	b2da      	uxtb	r2, r3
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8010494:	8a7b      	ldrh	r3, [r7, #18]
 8010496:	3301      	adds	r3, #1
 8010498:	827b      	strh	r3, [r7, #18]
 801049a:	88bb      	ldrh	r3, [r7, #4]
 801049c:	8a7a      	ldrh	r2, [r7, #18]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d3ca      	bcc.n	8010438 <SendQuery+0x230>
	    }
	    break;
 80104a2:	bf00      	nop
	}

	sendTxBuffer(modH);
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f000 fbd7 	bl	8010c58 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2201      	movs	r2, #1
 80104ae:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	modH->i8lastError = 0;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2200      	movs	r2, #0
 80104b6:	749a      	strb	r2, [r3, #18]
	return 0;
 80104b8:	2300      	movs	r3, #0


}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3718      	adds	r7, #24
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop

080104c4 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b08a      	sub	sp, #40	; 0x28
 80104c8:	af02      	add	r7, sp, #8
 80104ca:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104d4:	f107 0108 	add.w	r1, r7, #8
 80104d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fc fe59 	bl	800d194 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 80104e2:	f107 0308 	add.w	r3, r7, #8
 80104e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80104e8:	69f8      	ldr	r0, [r7, #28]
 80104ea:	f7ff fe8d 	bl	8010208 <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80104ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80104f2:	2001      	movs	r0, #1
 80104f4:	f7fe fa3c 	bl	800e970 <ulTaskNotifyTake>
 80104f8:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	2200      	movs	r2, #0
 80104fe:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	2bff      	cmp	r3, #255	; 0xff
 8010504:	d10f      	bne.n	8010526 <StartTaskModbusMaster+0x62>
      {
    	  modH->i8state = COM_IDLE;
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	2200      	movs	r2, #0
 801050a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    	  modH->i8lastError = NO_REPLY;
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	22ff      	movs	r2, #255	; 0xff
 8010512:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801051a:	3301      	adds	r3, #1
 801051c:	b29a      	uxth	r2, r3
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    	  continue;
 8010524:	e08a      	b.n	801063c <StartTaskModbusMaster+0x178>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801052a:	4618      	mov	r0, r3
 801052c:	f7fd f893 	bl	800d656 <uxQueueMessagesWaiting>
 8010530:	4603      	mov	r3, r0
 8010532:	b2da      	uxtb	r2, r3
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	  int8_t i8state = getRxBuffer(modH);
 801053a:	69f8      	ldr	r0, [r7, #28]
 801053c:	f000 f96c 	bl	8010818 <getRxBuffer>
 8010540:	4603      	mov	r3, r0
 8010542:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8010544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010548:	2b05      	cmp	r3, #5
 801054a:	dc1d      	bgt.n	8010588 <StartTaskModbusMaster+0xc4>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010550:	2100      	movs	r1, #0
 8010552:	4618      	mov	r0, r3
 8010554:	f7fc fa62 	bl	800ca1c <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		  modH->i8lastError = ERR_BAD_SIZE;
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	22fa      	movs	r2, #250	; 0xfa
 8010564:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801056c:	3301      	adds	r3, #1
 801056e:	b29a      	uxth	r2, r3
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		  xSemaphoreGive(modH->ModBusSphrHandle);
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 801057c:	2300      	movs	r3, #0
 801057e:	2200      	movs	r2, #0
 8010580:	2100      	movs	r1, #0
 8010582:	f7fc fbef 	bl	800cd64 <xQueueGenericSend>
		  continue;
 8010586:	e059      	b.n	801063c <StartTaskModbusMaster+0x178>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 801058e:	2300      	movs	r3, #0
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	2300      	movs	r3, #0
 8010594:	2200      	movs	r2, #0
 8010596:	2103      	movs	r1, #3
 8010598:	f7fe fcf2 	bl	800ef80 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 801059c:	69f8      	ldr	r0, [r7, #28]
 801059e:	f000 f8cd 	bl	801073c <validateAnswer>
 80105a2:	4603      	mov	r3, r0
 80105a4:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 80105a6:	7dbb      	ldrb	r3, [r7, #22]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00c      	beq.n	80105c6 <StartTaskModbusMaster+0x102>
	  {
		 modH->i8state = COM_IDLE;
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	2200      	movs	r2, #0
 80105b0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80105ba:	2300      	movs	r3, #0
 80105bc:	2200      	movs	r2, #0
 80105be:	2100      	movs	r1, #0
 80105c0:	f7fc fbd0 	bl	800cd64 <xQueueGenericSend>
	     continue;
 80105c4:	e03a      	b.n	801063c <StartTaskModbusMaster+0x178>
	  }



	  modH->i8lastError = u8exception;
 80105c6:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	749a      	strb	r2, [r3, #18]
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	7d1b      	ldrb	r3, [r3, #20]
 80105d2:	3b01      	subs	r3, #1
 80105d4:	2b0f      	cmp	r3, #15
 80105d6:	d82b      	bhi.n	8010630 <StartTaskModbusMaster+0x16c>
 80105d8:	a201      	add	r2, pc, #4	; (adr r2, 80105e0 <StartTaskModbusMaster+0x11c>)
 80105da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105de:	bf00      	nop
 80105e0:	08010621 	.word	0x08010621
 80105e4:	08010621 	.word	0x08010621
 80105e8:	08010629 	.word	0x08010629
 80105ec:	08010629 	.word	0x08010629
 80105f0:	08010631 	.word	0x08010631
 80105f4:	08010631 	.word	0x08010631
 80105f8:	08010631 	.word	0x08010631
 80105fc:	08010631 	.word	0x08010631
 8010600:	08010631 	.word	0x08010631
 8010604:	08010631 	.word	0x08010631
 8010608:	08010631 	.word	0x08010631
 801060c:	08010631 	.word	0x08010631
 8010610:	08010631 	.word	0x08010631
 8010614:	08010631 	.word	0x08010631
 8010618:	08010631 	.word	0x08010631
 801061c:	08010631 	.word	0x08010631
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8010620:	69f8      	ldr	r0, [r7, #28]
 8010622:	f000 f80d 	bl	8010640 <get_FC1>
	      break;
 8010626:	e004      	b.n	8010632 <StartTaskModbusMaster+0x16e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8010628:	69f8      	ldr	r0, [r7, #28]
 801062a:	f000 f85b 	bl	80106e4 <get_FC3>
	      break;
 801062e:	e000      	b.n	8010632 <StartTaskModbusMaster+0x16e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8010630:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	2200      	movs	r2, #0
 8010636:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	  //xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
	  //return i8state;
	  continue;
 801063a:	bf00      	nop
  {
 801063c:	e748      	b.n	80104d0 <StartTaskModbusMaster+0xc>
 801063e:	bf00      	nop

08010640 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 8010640:	b590      	push	{r4, r7, lr}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8010648:	2303      	movs	r3, #3
 801064a:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]
 8010650:	e03f      	b.n	80106d2 <get_FC1+0x92>

        if(i%2)
 8010652:	7bfb      	ldrb	r3, [r7, #15]
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b00      	cmp	r3, #0
 801065c:	d01a      	beq.n	8010694 <get_FC1+0x54>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 801065e:	7bfa      	ldrb	r2, [r7, #15]
 8010660:	7bbb      	ldrb	r3, [r7, #14]
 8010662:	4413      	add	r3, r2
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	4413      	add	r3, r2
 8010668:	7cd8      	ldrb	r0, [r3, #19]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801066e:	7bfb      	ldrb	r3, [r7, #15]
 8010670:	085b      	lsrs	r3, r3, #1
 8010672:	b2db      	uxtb	r3, r3
 8010674:	005b      	lsls	r3, r3, #1
 8010676:	4413      	add	r3, r2
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	b2d9      	uxtb	r1, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010680:	7bfb      	ldrb	r3, [r7, #15]
 8010682:	085b      	lsrs	r3, r3, #1
 8010684:	b2db      	uxtb	r3, r3
 8010686:	005b      	lsls	r3, r3, #1
 8010688:	18d4      	adds	r4, r2, r3
 801068a:	f000 fa6b 	bl	8010b64 <word>
 801068e:	4603      	mov	r3, r0
 8010690:	8023      	strh	r3, [r4, #0]
 8010692:	e01b      	b.n	80106cc <get_FC1+0x8c>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010698:	7bfb      	ldrb	r3, [r7, #15]
 801069a:	085b      	lsrs	r3, r3, #1
 801069c:	b2db      	uxtb	r3, r3
 801069e:	005b      	lsls	r3, r3, #1
 80106a0:	4413      	add	r3, r2
 80106a2:	881b      	ldrh	r3, [r3, #0]
 80106a4:	0a1b      	lsrs	r3, r3, #8
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	b2d8      	uxtb	r0, r3
 80106aa:	7bfa      	ldrb	r2, [r7, #15]
 80106ac:	7bbb      	ldrb	r3, [r7, #14]
 80106ae:	4413      	add	r3, r2
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	4413      	add	r3, r2
 80106b4:	7cd9      	ldrb	r1, [r3, #19]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
 80106bc:	085b      	lsrs	r3, r3, #1
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	005b      	lsls	r3, r3, #1
 80106c2:	18d4      	adds	r4, r2, r3
 80106c4:	f000 fa4e 	bl	8010b64 <word>
 80106c8:	4603      	mov	r3, r0
 80106ca:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
 80106ce:	3301      	adds	r3, #1
 80106d0:	73fb      	strb	r3, [r7, #15]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	7d5b      	ldrb	r3, [r3, #21]
 80106d6:	7bfa      	ldrb	r2, [r7, #15]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d3ba      	bcc.n	8010652 <get_FC1+0x12>
        }

     }
}
 80106dc:	bf00      	nop
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd90      	pop	{r4, r7, pc}

080106e4 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80106e4:	b590      	push	{r4, r7, lr}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80106ec:	2303      	movs	r3, #3
 80106ee:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 80106f0:	2300      	movs	r3, #0
 80106f2:	73bb      	strb	r3, [r7, #14]
 80106f4:	e017      	b.n	8010726 <get_FC3+0x42>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 80106f6:	7bfb      	ldrb	r3, [r7, #15]
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	4413      	add	r3, r2
 80106fc:	7cd8      	ldrb	r0, [r3, #19]
 80106fe:	7bfb      	ldrb	r3, [r7, #15]
 8010700:	3301      	adds	r3, #1
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	4413      	add	r3, r2
 8010706:	7cd9      	ldrb	r1, [r3, #19]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801070c:	7bbb      	ldrb	r3, [r7, #14]
 801070e:	005b      	lsls	r3, r3, #1
 8010710:	18d4      	adds	r4, r2, r3
 8010712:	f000 fa27 	bl	8010b64 <word>
 8010716:	4603      	mov	r3, r0
 8010718:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 801071a:	7bfb      	ldrb	r3, [r7, #15]
 801071c:	3302      	adds	r3, #2
 801071e:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	3301      	adds	r3, #1
 8010724:	73bb      	strb	r3, [r7, #14]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	7d5b      	ldrb	r3, [r3, #21]
 801072a:	085b      	lsrs	r3, r3, #1
 801072c:	b2db      	uxtb	r3, r3
 801072e:	7bba      	ldrb	r2, [r7, #14]
 8010730:	429a      	cmp	r2, r3
 8010732:	d3e0      	bcc.n	80106f6 <get_FC3+0x12>
    }
}
 8010734:	bf00      	nop
 8010736:	3714      	adds	r7, #20
 8010738:	46bd      	mov	sp, r7
 801073a:	bd90      	pop	{r4, r7, pc}

0801073c <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801074a:	3b02      	subs	r3, #2
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	4413      	add	r3, r2
 8010750:	7cdb      	ldrb	r3, [r3, #19]
 8010752:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8010754:	b21a      	sxth	r2, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801075c:	3b01      	subs	r3, #1
 801075e:	6879      	ldr	r1, [r7, #4]
 8010760:	440b      	add	r3, r1
 8010762:	7cdb      	ldrb	r3, [r3, #19]
 8010764:	b21b      	sxth	r3, r3
 8010766:	4313      	orrs	r3, r2
 8010768:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 801076a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f103 0213 	add.w	r2, r3, #19
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010778:	3b02      	subs	r3, #2
 801077a:	b2db      	uxtb	r3, r3
 801077c:	4619      	mov	r1, r3
 801077e:	4610      	mov	r0, r2
 8010780:	f000 fa03 	bl	8010b8a <calcCRC>
 8010784:	4603      	mov	r3, r0
 8010786:	461a      	mov	r2, r3
 8010788:	89bb      	ldrh	r3, [r7, #12]
 801078a:	4293      	cmp	r3, r2
 801078c:	d009      	beq.n	80107a2 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010794:	3301      	adds	r3, #1
 8010796:	b29a      	uxth	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return NO_REPLY;
 801079e:	23ff      	movs	r3, #255	; 0xff
 80107a0:	e034      	b.n	801080c <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	7d1b      	ldrb	r3, [r3, #20]
 80107a6:	b25b      	sxtb	r3, r3
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	da09      	bge.n	80107c0 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107b2:	3301      	adds	r3, #1
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_EXCEPTION;
 80107bc:	23fb      	movs	r3, #251	; 0xfb
 80107be:	e025      	b.n	801080c <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80107c0:	2300      	movs	r3, #0
 80107c2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80107c4:	2300      	movs	r3, #0
 80107c6:	73bb      	strb	r3, [r7, #14]
 80107c8:	e00c      	b.n	80107e4 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 80107ca:	7bbb      	ldrb	r3, [r7, #14]
 80107cc:	4a11      	ldr	r2, [pc, #68]	; (8010814 <validateAnswer+0xd8>)
 80107ce:	5cd2      	ldrb	r2, [r2, r3]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	7d1b      	ldrb	r3, [r3, #20]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d102      	bne.n	80107de <validateAnswer+0xa2>
        {
            isSupported = 1;
 80107d8:	2301      	movs	r3, #1
 80107da:	73fb      	strb	r3, [r7, #15]
            break;
 80107dc:	e005      	b.n	80107ea <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80107de:	7bbb      	ldrb	r3, [r7, #14]
 80107e0:	3301      	adds	r3, #1
 80107e2:	73bb      	strb	r3, [r7, #14]
 80107e4:	7bbb      	ldrb	r3, [r7, #14]
 80107e6:	2b07      	cmp	r3, #7
 80107e8:	d9ef      	bls.n	80107ca <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
 80107ec:	f083 0301 	eor.w	r3, r3, #1
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d009      	beq.n	801080a <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107fc:	3301      	adds	r3, #1
 80107fe:	b29a      	uxth	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return EXC_FUNC_CODE;
 8010806:	2301      	movs	r3, #1
 8010808:	e000      	b.n	801080c <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	0801153c 	.word	0x0801153c

08010818 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8010820:	2300      	movs	r3, #0
 8010822:	72fb      	strb	r3, [r7, #11]
    int i;
    if (modH->EN_Port)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d007      	beq.n	801083c <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	68d8      	ldr	r0, [r3, #12]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	8a1b      	ldrh	r3, [r3, #16]
 8010834:	2200      	movs	r2, #0
 8010836:	4619      	mov	r1, r3
 8010838:	f7f8 ffc4 	bl	80097c4 <HAL_GPIO_WritePin>
    }


    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010840:	4618      	mov	r0, r3
 8010842:	f7fc ff08 	bl	800d656 <uxQueueMessagesWaiting>
 8010846:	4603      	mov	r3, r0
 8010848:	b2da      	uxtb	r2, r3
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for(i = 0; i<  modH->u8BufferSize; i++ )
 8010850:	2300      	movs	r3, #0
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e00d      	b.n	8010872 <getRxBuffer+0x5a>
   	{
   		  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	3310      	adds	r3, #16
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	4413      	add	r3, r2
 8010862:	3303      	adds	r3, #3
 8010864:	2200      	movs	r2, #0
 8010866:	4619      	mov	r1, r3
 8010868:	f7fc fc94 	bl	800d194 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	3301      	adds	r3, #1
 8010870:	60fb      	str	r3, [r7, #12]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010878:	461a      	mov	r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	4293      	cmp	r3, r2
 801087e:	dbea      	blt.n	8010856 <getRxBuffer+0x3e>
   	}

    modH->u16InCnt++;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010886:	3301      	adds	r3, #1
 8010888:	b29a      	uxth	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


    if (bBuffOverflow)
 8010890:	7afb      	ldrb	r3, [r7, #11]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00a      	beq.n	80108ac <getRxBuffer+0x94>
    {
    	modH->u16errCnt++;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801089c:	3301      	adds	r3, #1
 801089e:	b29a      	uxth	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 80108a6:	f06f 0302 	mvn.w	r3, #2
 80108aa:	e003      	b.n	80108b4 <getRxBuffer+0x9c>
    }
    return modH->u8BufferSize;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80108b2:	b25b      	sxtb	r3, r3
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3710      	adds	r7, #16
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80108bc:	b590      	push	{r4, r7, lr}
 80108be:	b087      	sub	sp, #28
 80108c0:	af02      	add	r7, sp, #8
 80108c2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80108c4:	2300      	movs	r3, #0
 80108c6:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 80108c8:	2300      	movs	r3, #0
 80108ca:	60fb      	str	r3, [r7, #12]
 80108cc:	e03b      	b.n	8010946 <HAL_UART_RxCpltCallback+0x8a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80108ce:	4a23      	ldr	r2, [pc, #140]	; (801095c <HAL_UART_RxCpltCallback+0xa0>)
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d130      	bne.n	8010940 <HAL_UART_RxCpltCallback+0x84>
    	{
    		//CRITICAL:  If you don't set the UART NVIC priority to something like 5 (lower than the RTOS scheduler)
    		//these RTOS functions will crash
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 80108de:	4a1f      	ldr	r2, [pc, #124]	; (801095c <HAL_UART_RxCpltCallback+0xa0>)
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108e6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80108e8:	4a1c      	ldr	r2, [pc, #112]	; (801095c <HAL_UART_RxCpltCallback+0xa0>)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108f0:	f103 0171 	add.w	r1, r3, #113	; 0x71
 80108f4:	2300      	movs	r3, #0
 80108f6:	2200      	movs	r2, #0
 80108f8:	f7fc fb2e 	bl	800cf58 <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80108fc:	4a17      	ldr	r2, [pc, #92]	; (801095c <HAL_UART_RxCpltCallback+0xa0>)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010904:	6858      	ldr	r0, [r3, #4]
 8010906:	4a15      	ldr	r2, [pc, #84]	; (801095c <HAL_UART_RxCpltCallback+0xa0>)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801090e:	3371      	adds	r3, #113	; 0x71
 8010910:	2201      	movs	r2, #1
 8010912:	4619      	mov	r1, r3
 8010914:	f7fa fd7c 	bl	800b410 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8010918:	4a10      	ldr	r2, [pc, #64]	; (801095c <HAL_UART_RxCpltCallback+0xa0>)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010920:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010924:	f7fd fb74 	bl	800e010 <xTaskGetTickCountFromISR>
 8010928:	4601      	mov	r1, r0
 801092a:	f107 0208 	add.w	r2, r7, #8
 801092e:	2300      	movs	r3, #0
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	4613      	mov	r3, r2
 8010934:	460a      	mov	r2, r1
 8010936:	2107      	movs	r1, #7
 8010938:	4620      	mov	r0, r4
 801093a:	f7fe fb21 	bl	800ef80 <xTimerGenericCommand>
    		break;
 801093e:	e008      	b.n	8010952 <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	3301      	adds	r3, #1
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	4b06      	ldr	r3, [pc, #24]	; (8010960 <HAL_UART_RxCpltCallback+0xa4>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	461a      	mov	r2, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	4293      	cmp	r3, r2
 8010950:	dbbd      	blt.n	80108ce <HAL_UART_RxCpltCallback+0x12>
    	}
    }


}
 8010952:	bf00      	nop
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	bd90      	pop	{r4, r7, pc}
 801095a:	bf00      	nop
 801095c:	20004a3c 	.word	0x20004a3c
 8010960:	2000493c 	.word	0x2000493c

08010964 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010972:	3b02      	subs	r3, #2
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	4413      	add	r3, r2
 8010978:	7cdb      	ldrb	r3, [r3, #19]
 801097a:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 801097c:	b21a      	sxth	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010984:	3b01      	subs	r3, #1
 8010986:	6879      	ldr	r1, [r7, #4]
 8010988:	440b      	add	r3, r1
 801098a:	7cdb      	ldrb	r3, [r3, #19]
 801098c:	b21b      	sxth	r3, r3
 801098e:	4313      	orrs	r3, r2
 8010990:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 8010992:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f103 0213 	add.w	r2, r3, #19
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80109a0:	3b02      	subs	r3, #2
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	4619      	mov	r1, r3
 80109a6:	4610      	mov	r0, r2
 80109a8:	f000 f8ef 	bl	8010b8a <calcCRC>
 80109ac:	4603      	mov	r3, r0
 80109ae:	461a      	mov	r2, r3
 80109b0:	89bb      	ldrh	r3, [r7, #12]
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d009      	beq.n	80109ca <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109bc:	3301      	adds	r3, #1
 80109be:	b29a      	uxth	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return NO_REPLY;
 80109c6:	23ff      	movs	r3, #255	; 0xff
 80109c8:	e0c6      	b.n	8010b58 <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 80109ca:	2300      	movs	r3, #0
 80109cc:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80109ce:	2300      	movs	r3, #0
 80109d0:	73bb      	strb	r3, [r7, #14]
 80109d2:	e00c      	b.n	80109ee <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 80109d4:	7bbb      	ldrb	r3, [r7, #14]
 80109d6:	4a62      	ldr	r2, [pc, #392]	; (8010b60 <validateRequest+0x1fc>)
 80109d8:	5cd2      	ldrb	r2, [r2, r3]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	7d1b      	ldrb	r3, [r3, #20]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d102      	bne.n	80109e8 <validateRequest+0x84>
	        {
	            isSupported = 1;
 80109e2:	2301      	movs	r3, #1
 80109e4:	73fb      	strb	r3, [r7, #15]
	            break;
 80109e6:	e005      	b.n	80109f4 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80109e8:	7bbb      	ldrb	r3, [r7, #14]
 80109ea:	3301      	adds	r3, #1
 80109ec:	73bb      	strb	r3, [r7, #14]
 80109ee:	7bbb      	ldrb	r3, [r7, #14]
 80109f0:	2b07      	cmp	r3, #7
 80109f2:	d9ef      	bls.n	80109d4 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 80109f4:	7bfb      	ldrb	r3, [r7, #15]
 80109f6:	f083 0301 	eor.w	r3, r3, #1
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d009      	beq.n	8010a14 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a06:	3301      	adds	r3, #1
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return EXC_FUNC_CODE;
 8010a10:	2301      	movs	r3, #1
 8010a12:	e0a1      	b.n	8010b58 <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
 8010a1c:	3b01      	subs	r3, #1
 8010a1e:	2b0f      	cmp	r3, #15
 8010a20:	f200 8099 	bhi.w	8010b56 <validateRequest+0x1f2>
 8010a24:	a201      	add	r2, pc, #4	; (adr r2, 8010a2c <validateRequest+0xc8>)
 8010a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a2a:	bf00      	nop
 8010a2c:	08010a6d 	.word	0x08010a6d
 8010a30:	08010a6d 	.word	0x08010a6d
 8010a34:	08010b07 	.word	0x08010b07
 8010a38:	08010b07 	.word	0x08010b07
 8010a3c:	08010ab5 	.word	0x08010ab5
 8010a40:	08010adf 	.word	0x08010adf
 8010a44:	08010b57 	.word	0x08010b57
 8010a48:	08010b57 	.word	0x08010b57
 8010a4c:	08010b57 	.word	0x08010b57
 8010a50:	08010b57 	.word	0x08010b57
 8010a54:	08010b57 	.word	0x08010b57
 8010a58:	08010b57 	.word	0x08010b57
 8010a5c:	08010b57 	.word	0x08010b57
 8010a60:	08010b57 	.word	0x08010b57
 8010a64:	08010a6d 	.word	0x08010a6d
 8010a68:	08010b07 	.word	0x08010b07
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	7d5a      	ldrb	r2, [r3, #21]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	7d9b      	ldrb	r3, [r3, #22]
 8010a74:	4619      	mov	r1, r3
 8010a76:	4610      	mov	r0, r2
 8010a78:	f000 f874 	bl	8010b64 <word>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	091b      	lsrs	r3, r3, #4
 8010a80:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	7dda      	ldrb	r2, [r3, #23]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	7e1b      	ldrb	r3, [r3, #24]
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	f000 f869 	bl	8010b64 <word>
 8010a92:	4603      	mov	r3, r0
 8010a94:	091b      	lsrs	r3, r3, #4
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	897b      	ldrh	r3, [r7, #10]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8010aa0:	897b      	ldrh	r3, [r7, #10]
 8010aa2:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010aaa:	7a7a      	ldrb	r2, [r7, #9]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d94b      	bls.n	8010b48 <validateRequest+0x1e4>
 8010ab0:	2302      	movs	r3, #2
 8010ab2:	e051      	b.n	8010b58 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	7d5a      	ldrb	r2, [r3, #21]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	7d9b      	ldrb	r3, [r3, #22]
 8010abc:	4619      	mov	r1, r3
 8010abe:	4610      	mov	r0, r2
 8010ac0:	f000 f850 	bl	8010b64 <word>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	091b      	lsrs	r3, r3, #4
 8010ac8:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8010aca:	897b      	ldrh	r3, [r7, #10]
 8010acc:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010ad4:	7a7a      	ldrb	r2, [r7, #9]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d938      	bls.n	8010b4c <validateRequest+0x1e8>
 8010ada:	2302      	movs	r3, #2
 8010adc:	e03c      	b.n	8010b58 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	7d5a      	ldrb	r2, [r3, #21]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	7d9b      	ldrb	r3, [r3, #22]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4610      	mov	r0, r2
 8010aea:	f000 f83b 	bl	8010b64 <word>
 8010aee:	4603      	mov	r3, r0
 8010af0:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8010af2:	897b      	ldrh	r3, [r7, #10]
 8010af4:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010afc:	7a7a      	ldrb	r2, [r7, #9]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d926      	bls.n	8010b50 <validateRequest+0x1ec>
 8010b02:	2302      	movs	r3, #2
 8010b04:	e028      	b.n	8010b58 <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	7d5a      	ldrb	r2, [r3, #21]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	7d9b      	ldrb	r3, [r3, #22]
 8010b0e:	4619      	mov	r1, r3
 8010b10:	4610      	mov	r0, r2
 8010b12:	f000 f827 	bl	8010b64 <word>
 8010b16:	4603      	mov	r3, r0
 8010b18:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	7dda      	ldrb	r2, [r3, #23]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	7e1b      	ldrb	r3, [r3, #24]
 8010b22:	4619      	mov	r1, r3
 8010b24:	4610      	mov	r0, r2
 8010b26:	f000 f81d 	bl	8010b64 <word>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	897b      	ldrh	r3, [r7, #10]
 8010b30:	4413      	add	r3, r2
 8010b32:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8010b34:	897b      	ldrh	r3, [r7, #10]
 8010b36:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010b3e:	7a7a      	ldrb	r2, [r7, #9]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d907      	bls.n	8010b54 <validateRequest+0x1f0>
 8010b44:	2302      	movs	r3, #2
 8010b46:	e007      	b.n	8010b58 <validateRequest+0x1f4>
	        break;
 8010b48:	bf00      	nop
 8010b4a:	e004      	b.n	8010b56 <validateRequest+0x1f2>
	        break;
 8010b4c:	bf00      	nop
 8010b4e:	e002      	b.n	8010b56 <validateRequest+0x1f2>
	        break;
 8010b50:	bf00      	nop
 8010b52:	e000      	b.n	8010b56 <validateRequest+0x1f2>
	        break;
 8010b54:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8010b56:	2300      	movs	r3, #0

}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3710      	adds	r7, #16
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	0801153c 	.word	0x0801153c

08010b64 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b085      	sub	sp, #20
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	460a      	mov	r2, r1
 8010b6e:	71fb      	strb	r3, [r7, #7]
 8010b70:	4613      	mov	r3, r2
 8010b72:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8010b74:	79bb      	ldrb	r3, [r7, #6]
 8010b76:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8010b78:	79fb      	ldrb	r3, [r7, #7]
 8010b7a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8010b7c:	89bb      	ldrh	r3, [r7, #12]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	b087      	sub	sp, #28
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	460b      	mov	r3, r1
 8010b94:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8010b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b9a:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	74fb      	strb	r3, [r7, #19]
 8010ba0:	e023      	b.n	8010bea <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8010ba2:	7cfb      	ldrb	r3, [r7, #19]
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	4413      	add	r3, r2
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	461a      	mov	r2, r3
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	4053      	eors	r3, r2
 8010bb0:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	74bb      	strb	r3, [r7, #18]
 8010bb6:	e012      	b.n	8010bde <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	f003 0301 	and.w	r3, r3, #1
 8010bbe:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	085b      	lsrs	r3, r3, #1
 8010bc4:	617b      	str	r3, [r7, #20]
            if (flag)
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d005      	beq.n	8010bd8 <calcCRC+0x4e>
                temp ^= 0xA001;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8010bd2:	f083 0301 	eor.w	r3, r3, #1
 8010bd6:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8010bd8:	7cbb      	ldrb	r3, [r7, #18]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	74bb      	strb	r3, [r7, #18]
 8010bde:	7cbb      	ldrb	r3, [r7, #18]
 8010be0:	2b08      	cmp	r3, #8
 8010be2:	d9e9      	bls.n	8010bb8 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8010be4:	7cfb      	ldrb	r3, [r7, #19]
 8010be6:	3301      	adds	r3, #1
 8010be8:	74fb      	strb	r3, [r7, #19]
 8010bea:	7cfa      	ldrb	r2, [r7, #19]
 8010bec:	78fb      	ldrb	r3, [r7, #3]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d3d7      	bcc.n	8010ba2 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	0a1b      	lsrs	r3, r3, #8
 8010bf6:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	021b      	lsls	r3, r3, #8
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	b29b      	uxth	r3, r3

}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	371c      	adds	r7, #28
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	6039      	str	r1, [r7, #0]
 8010c22:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	7d1b      	ldrb	r3, [r3, #20]
 8010c28:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	7a1a      	ldrb	r2, [r3, #8]
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8010c32:	7bfb      	ldrb	r3, [r7, #15]
 8010c34:	3b80      	subs	r3, #128	; 0x80
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	79fa      	ldrb	r2, [r7, #7]
 8010c40:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	2203      	movs	r2, #3
 8010c46:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8010c4a:	bf00      	nop
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
	...

08010c58 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8010c58:	b590      	push	{r4, r7, lr}
 8010c5a:	b087      	sub	sp, #28
 8010c5c:	af02      	add	r7, sp, #8
 8010c5e:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f103 0213 	add.w	r2, r3, #19
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4610      	mov	r0, r2
 8010c70:	f7ff ff8b 	bl	8010b8a <calcCRC>
 8010c74:	4603      	mov	r3, r0
 8010c76:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8010c78:	89fb      	ldrh	r3, [r7, #14]
 8010c7a:	0a1b      	lsrs	r3, r3, #8
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010c84:	4619      	mov	r1, r3
 8010c86:	b2d2      	uxtb	r2, r2
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	440b      	add	r3, r1
 8010c8c:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010c94:	3301      	adds	r3, #1
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	89fb      	ldrh	r3, [r7, #14]
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	440b      	add	r3, r1
 8010cae:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    if (modH->EN_Port != NULL)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d007      	beq.n	8010cd8 <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	68d8      	ldr	r0, [r3, #12]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	8a1b      	ldrh	r3, [r3, #16]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	f7f8 fd76 	bl	80097c4 <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6858      	ldr	r0, [r3, #4]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f103 0113 	add.w	r1, r3, #19
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	461a      	mov	r2, r3
 8010cec:	f7fa fb4b 	bl	800b386 <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8010cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010cf4:	2001      	movs	r0, #1
 8010cf6:	f7fd fe3b 	bl	800e970 <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d018      	beq.n	8010d34 <sendTxBuffer+0xdc>
     {
         // must wait transmission end before changing pin state
         //return RS485 transceiver to receive mode

    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8010d02:	e007      	b.n	8010d14 <sendTxBuffer+0xbc>
    	 {
    		taskYIELD();
 8010d04:	4b1f      	ldr	r3, [pc, #124]	; (8010d84 <sendTxBuffer+0x12c>)
 8010d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d0a:	601a      	str	r2, [r3, #0]
 8010d0c:	f3bf 8f4f 	dsb	sy
 8010d10:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d0ef      	beq.n	8010d04 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	68d8      	ldr	r0, [r3, #12]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	8a1b      	ldrh	r3, [r3, #16]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	4619      	mov	r1, r3
 8010d30:	f7f8 fd48 	bl	80097c4 <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fb fe6e 	bl	800ca1c <xQueueGenericReset>

     modH->u8BufferSize = 0;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	2b04      	cmp	r3, #4
 8010d4e:	d10c      	bne.n	8010d6a <sendTxBuffer+0x112>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010d56:	f7fd f94b 	bl	800dff0 <xTaskGetTickCount>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	9300      	str	r3, [sp, #0]
 8010d60:	2300      	movs	r3, #0
 8010d62:	2102      	movs	r1, #2
 8010d64:	4620      	mov	r0, r4
 8010d66:	f7fe f90b 	bl	800ef80 <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d70:	3301      	adds	r3, #1
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

}
 8010d7a:	bf00      	nop
 8010d7c:	3714      	adds	r7, #20
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd90      	pop	{r4, r7, pc}
 8010d82:	bf00      	nop
 8010d84:	e000ed04 	.word	0xe000ed04

08010d88 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	7d5a      	ldrb	r2, [r3, #21]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	7d9b      	ldrb	r3, [r3, #22]
 8010d98:	4619      	mov	r1, r3
 8010d9a:	4610      	mov	r0, r2
 8010d9c:	f7ff fee2 	bl	8010b64 <word>
 8010da0:	4603      	mov	r3, r0
 8010da2:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7dda      	ldrb	r2, [r3, #23]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	7e1b      	ldrb	r3, [r3, #24]
 8010dac:	4619      	mov	r1, r3
 8010dae:	4610      	mov	r0, r2
 8010db0:	f7ff fed8 	bl	8010b64 <word>
 8010db4:	4603      	mov	r3, r0
 8010db6:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8010db8:	8a3b      	ldrh	r3, [r7, #16]
 8010dba:	08db      	lsrs	r3, r3, #3
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8010dc0:	8a3b      	ldrh	r3, [r7, #16]
 8010dc2:	f003 0307 	and.w	r3, r3, #7
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <process_FC1+0x4a>
 8010dcc:	7dfb      	ldrb	r3, [r7, #23]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	7dfa      	ldrb	r2, [r7, #23]
 8010dd6:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2203      	movs	r2, #3
 8010ddc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010de6:	461a      	mov	r2, r3
 8010de8:	7dfb      	ldrb	r3, [r7, #23]
 8010dea:	4413      	add	r3, r2
 8010dec:	3b01      	subs	r3, #1
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	4413      	add	r3, r2
 8010df2:	2200      	movs	r2, #0
 8010df4:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8010df6:	2300      	movs	r3, #0
 8010df8:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	82bb      	strh	r3, [r7, #20]
 8010dfe:	e058      	b.n	8010eb2 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8010e00:	8a7a      	ldrh	r2, [r7, #18]
 8010e02:	8abb      	ldrh	r3, [r7, #20]
 8010e04:	4413      	add	r3, r2
 8010e06:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8010e08:	89bb      	ldrh	r3, [r7, #12]
 8010e0a:	091b      	lsrs	r3, r3, #4
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8010e10:	89bb      	ldrh	r3, [r7, #12]
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	f003 030f 	and.w	r3, r3, #15
 8010e18:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010e1e:	7afb      	ldrb	r3, [r7, #11]
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	4413      	add	r3, r2
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	461a      	mov	r2, r3
 8010e28:	7abb      	ldrb	r3, [r7, #10]
 8010e2a:	fa42 f303 	asr.w	r3, r2, r3
 8010e2e:	f003 0301 	and.w	r3, r3, #1
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d014      	beq.n	8010e60 <process_FC1+0xd8>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4413      	add	r3, r2
 8010e42:	7cda      	ldrb	r2, [r3, #19]
 8010e44:	7dbb      	ldrb	r3, [r7, #22]
 8010e46:	2101      	movs	r1, #1
 8010e48:	fa01 f303 	lsl.w	r3, r1, r3
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	6879      	ldr	r1, [r7, #4]
 8010e50:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8010e54:	4313      	orrs	r3, r2
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	440b      	add	r3, r1
 8010e5c:	74da      	strb	r2, [r3, #19]
 8010e5e:	e015      	b.n	8010e8c <process_FC1+0x104>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010e66:	461a      	mov	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	4413      	add	r3, r2
 8010e6c:	7cda      	ldrb	r2, [r3, #19]
 8010e6e:	7dbb      	ldrb	r3, [r7, #22]
 8010e70:	2101      	movs	r1, #1
 8010e72:	fa01 f303 	lsl.w	r3, r1, r3
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	43db      	mvns	r3, r3
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	6879      	ldr	r1, [r7, #4]
 8010e7e:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8010e82:	4013      	ands	r3, r2
 8010e84:	b2da      	uxtb	r2, r3
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	440b      	add	r3, r1
 8010e8a:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8010e8c:	7dbb      	ldrb	r3, [r7, #22]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8010e92:	7dbb      	ldrb	r3, [r7, #22]
 8010e94:	2b07      	cmp	r3, #7
 8010e96:	d909      	bls.n	8010eac <process_FC1+0x124>
        {
            u8bitsno = 0;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	b2da      	uxtb	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8010eac:	8abb      	ldrh	r3, [r7, #20]
 8010eae:	3301      	adds	r3, #1
 8010eb0:	82bb      	strh	r3, [r7, #20]
 8010eb2:	8aba      	ldrh	r2, [r7, #20]
 8010eb4:	8a3b      	ldrh	r3, [r7, #16]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d3a2      	bcc.n	8010e00 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8010eba:	8a3b      	ldrh	r3, [r7, #16]
 8010ebc:	f003 0307 	and.w	r3, r3, #7
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d007      	beq.n	8010ed6 <process_FC1+0x14e>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010ecc:	3301      	adds	r3, #1
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010edc:	3302      	adds	r3, #2
 8010ede:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7ff feb9 	bl	8010c58 <sendTxBuffer>
    return u8CopyBufferSize;
 8010ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b084      	sub	sp, #16
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	7d5a      	ldrb	r2, [r3, #21]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	7d9b      	ldrb	r3, [r3, #22]
 8010f02:	4619      	mov	r1, r3
 8010f04:	4610      	mov	r0, r2
 8010f06:	f7ff fe2d 	bl	8010b64 <word>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	7dda      	ldrb	r2, [r3, #23]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	7e1b      	ldrb	r3, [r3, #24]
 8010f16:	4619      	mov	r1, r3
 8010f18:	4610      	mov	r0, r2
 8010f1a:	f7ff fe23 	bl	8010b64 <word>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8010f22:	7b7b      	ldrb	r3, [r7, #13]
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	b2da      	uxtb	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2203      	movs	r2, #3
 8010f30:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8010f34:	7bbb      	ldrb	r3, [r7, #14]
 8010f36:	73fb      	strb	r3, [r7, #15]
 8010f38:	e030      	b.n	8010f9c <process_FC3+0xaa>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	4413      	add	r3, r2
 8010f44:	881b      	ldrh	r3, [r3, #0]
 8010f46:	0a1b      	lsrs	r3, r3, #8
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f50:	4619      	mov	r1, r3
 8010f52:	b2d2      	uxtb	r2, r2
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	440b      	add	r3, r1
 8010f58:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f60:	3301      	adds	r3, #1
 8010f62:	b2da      	uxtb	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f6e:	7bfb      	ldrb	r3, [r7, #15]
 8010f70:	005b      	lsls	r3, r3, #1
 8010f72:	4413      	add	r3, r2
 8010f74:	881a      	ldrh	r2, [r3, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	b2d2      	uxtb	r2, r2
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	440b      	add	r3, r1
 8010f84:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8010f96:	7bfb      	ldrb	r3, [r7, #15]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	73fb      	strb	r3, [r7, #15]
 8010f9c:	7bfa      	ldrb	r2, [r7, #15]
 8010f9e:	7bb9      	ldrb	r1, [r7, #14]
 8010fa0:	7b7b      	ldrb	r3, [r7, #13]
 8010fa2:	440b      	add	r3, r1
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	dbc8      	blt.n	8010f3a <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010fae:	3302      	adds	r3, #2
 8010fb0:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f7ff fe50 	bl	8010c58 <sendTxBuffer>

    return u8CopyBufferSize;
 8010fb8:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b084      	sub	sp, #16
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	7d5a      	ldrb	r2, [r3, #21]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	7d9b      	ldrb	r3, [r3, #22]
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	4610      	mov	r0, r2
 8010fd8:	f7ff fdc4 	bl	8010b64 <word>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 8010fe0:	89fb      	ldrh	r3, [r7, #14]
 8010fe2:	091b      	lsrs	r3, r3, #4
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 8010fe8:	89fb      	ldrh	r3, [r7, #14]
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	f003 030f 	and.w	r3, r3, #15
 8010ff0:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	7ddb      	ldrb	r3, [r3, #23]
 8010ff6:	2bff      	cmp	r3, #255	; 0xff
 8010ff8:	d113      	bne.n	8011022 <process_FC5+0x5e>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010ffe:	7b7b      	ldrb	r3, [r7, #13]
 8011000:	005b      	lsls	r3, r3, #1
 8011002:	4413      	add	r3, r2
 8011004:	8819      	ldrh	r1, [r3, #0]
 8011006:	7b3b      	ldrb	r3, [r7, #12]
 8011008:	2201      	movs	r2, #1
 801100a:	fa02 f303 	lsl.w	r3, r2, r3
 801100e:	b29a      	uxth	r2, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011014:	7b7b      	ldrb	r3, [r7, #13]
 8011016:	005b      	lsls	r3, r3, #1
 8011018:	4403      	add	r3, r0
 801101a:	430a      	orrs	r2, r1
 801101c:	b292      	uxth	r2, r2
 801101e:	801a      	strh	r2, [r3, #0]
 8011020:	e014      	b.n	801104c <process_FC5+0x88>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011026:	7b7b      	ldrb	r3, [r7, #13]
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	4413      	add	r3, r2
 801102c:	8819      	ldrh	r1, [r3, #0]
 801102e:	7b3b      	ldrb	r3, [r7, #12]
 8011030:	2201      	movs	r2, #1
 8011032:	fa02 f303 	lsl.w	r3, r2, r3
 8011036:	b29b      	uxth	r3, r3
 8011038:	43db      	mvns	r3, r3
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011040:	7b7b      	ldrb	r3, [r7, #13]
 8011042:	005b      	lsls	r3, r3, #1
 8011044:	4403      	add	r3, r0
 8011046:	400a      	ands	r2, r1
 8011048:	b292      	uxth	r2, r2
 801104a:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2206      	movs	r2, #6
 8011050:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801105a:	3302      	adds	r3, #2
 801105c:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f7ff fdfa 	bl	8010c58 <sendTxBuffer>

    return u8CopyBufferSize;
 8011064:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3710      	adds	r7, #16
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	7d5a      	ldrb	r2, [r3, #21]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	7d9b      	ldrb	r3, [r3, #22]
 8011080:	4619      	mov	r1, r3
 8011082:	4610      	mov	r0, r2
 8011084:	f7ff fd6e 	bl	8010b64 <word>
 8011088:	4603      	mov	r3, r0
 801108a:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	7dda      	ldrb	r2, [r3, #23]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	7e1b      	ldrb	r3, [r3, #24]
 8011094:	4619      	mov	r1, r3
 8011096:	4610      	mov	r0, r2
 8011098:	f7ff fd64 	bl	8010b64 <word>
 801109c:	4603      	mov	r3, r0
 801109e:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80110a4:	7bfb      	ldrb	r3, [r7, #15]
 80110a6:	005b      	lsls	r3, r3, #1
 80110a8:	4413      	add	r3, r2
 80110aa:	89ba      	ldrh	r2, [r7, #12]
 80110ac:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2206      	movs	r2, #6
 80110b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    u8CopyBufferSize = modH->u8BufferSize +2;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80110bc:	3302      	adds	r3, #2
 80110be:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff fdc9 	bl	8010c58 <sendTxBuffer>

    return u8CopyBufferSize;
 80110c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b086      	sub	sp, #24
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	7d5a      	ldrb	r2, [r3, #21]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7d9b      	ldrb	r3, [r3, #22]
 80110e2:	4619      	mov	r1, r3
 80110e4:	4610      	mov	r0, r2
 80110e6:	f7ff fd3d 	bl	8010b64 <word>
 80110ea:	4603      	mov	r3, r0
 80110ec:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	7dda      	ldrb	r2, [r3, #23]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7e1b      	ldrb	r3, [r3, #24]
 80110f6:	4619      	mov	r1, r3
 80110f8:	4610      	mov	r0, r2
 80110fa:	f7ff fd33 	bl	8010b64 <word>
 80110fe:	4603      	mov	r3, r0
 8011100:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8011102:	2300      	movs	r3, #0
 8011104:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8011106:	2307      	movs	r3, #7
 8011108:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 801110a:	2300      	movs	r3, #0
 801110c:	82bb      	strh	r3, [r7, #20]
 801110e:	e055      	b.n	80111bc <process_FC15+0xea>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8011110:	8a7a      	ldrh	r2, [r7, #18]
 8011112:	8abb      	ldrh	r3, [r7, #20]
 8011114:	4413      	add	r3, r2
 8011116:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8011118:	89bb      	ldrh	r3, [r7, #12]
 801111a:	091b      	lsrs	r3, r3, #4
 801111c:	b29b      	uxth	r3, r3
 801111e:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8011120:	89bb      	ldrh	r3, [r7, #12]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	f003 030f 	and.w	r3, r3, #15
 8011128:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	4413      	add	r3, r2
 8011130:	7cdb      	ldrb	r3, [r3, #19]
 8011132:	461a      	mov	r2, r3
 8011134:	7dbb      	ldrb	r3, [r7, #22]
 8011136:	fa42 f303 	asr.w	r3, r2, r3
 801113a:	f003 0301 	and.w	r3, r3, #1
 801113e:	2b00      	cmp	r3, #0
 8011140:	bf14      	ite	ne
 8011142:	2301      	movne	r3, #1
 8011144:	2300      	moveq	r3, #0
 8011146:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8011148:	7a7b      	ldrb	r3, [r7, #9]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d013      	beq.n	8011176 <process_FC15+0xa4>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011152:	7afb      	ldrb	r3, [r7, #11]
 8011154:	005b      	lsls	r3, r3, #1
 8011156:	4413      	add	r3, r2
 8011158:	8819      	ldrh	r1, [r3, #0]
 801115a:	7abb      	ldrb	r3, [r7, #10]
 801115c:	2201      	movs	r2, #1
 801115e:	fa02 f303 	lsl.w	r3, r2, r3
 8011162:	b29a      	uxth	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011168:	7afb      	ldrb	r3, [r7, #11]
 801116a:	005b      	lsls	r3, r3, #1
 801116c:	4403      	add	r3, r0
 801116e:	430a      	orrs	r2, r1
 8011170:	b292      	uxth	r2, r2
 8011172:	801a      	strh	r2, [r3, #0]
 8011174:	e014      	b.n	80111a0 <process_FC15+0xce>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801117a:	7afb      	ldrb	r3, [r7, #11]
 801117c:	005b      	lsls	r3, r3, #1
 801117e:	4413      	add	r3, r2
 8011180:	8819      	ldrh	r1, [r3, #0]
 8011182:	7abb      	ldrb	r3, [r7, #10]
 8011184:	2201      	movs	r2, #1
 8011186:	fa02 f303 	lsl.w	r3, r2, r3
 801118a:	b29b      	uxth	r3, r3
 801118c:	43db      	mvns	r3, r3
 801118e:	b29a      	uxth	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011194:	7afb      	ldrb	r3, [r7, #11]
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	4403      	add	r3, r0
 801119a:	400a      	ands	r2, r1
 801119c:	b292      	uxth	r2, r2
 801119e:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80111a0:	7dbb      	ldrb	r3, [r7, #22]
 80111a2:	3301      	adds	r3, #1
 80111a4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80111a6:	7dbb      	ldrb	r3, [r7, #22]
 80111a8:	2b07      	cmp	r3, #7
 80111aa:	d904      	bls.n	80111b6 <process_FC15+0xe4>
        {
            u8bitsno = 0;
 80111ac:	2300      	movs	r3, #0
 80111ae:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80111b0:	7dfb      	ldrb	r3, [r7, #23]
 80111b2:	3301      	adds	r3, #1
 80111b4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80111b6:	8abb      	ldrh	r3, [r7, #20]
 80111b8:	3301      	adds	r3, #1
 80111ba:	82bb      	strh	r3, [r7, #20]
 80111bc:	8aba      	ldrh	r2, [r7, #20]
 80111be:	8a3b      	ldrh	r3, [r7, #16]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d3a5      	bcc.n	8011110 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2206      	movs	r2, #6
 80111c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80111d2:	3302      	adds	r3, #2
 80111d4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff fd3e 	bl	8010c58 <sendTxBuffer>
    return u8CopyBufferSize;
 80111dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3718      	adds	r7, #24
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}

080111e8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	7d5b      	ldrb	r3, [r3, #21]
 80111f4:	021b      	lsls	r3, r3, #8
 80111f6:	b25a      	sxtb	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	7d9b      	ldrb	r3, [r3, #22]
 80111fc:	b25b      	sxtb	r3, r3
 80111fe:	4313      	orrs	r3, r2
 8011200:	b25b      	sxtb	r3, r3
 8011202:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	7ddb      	ldrb	r3, [r3, #23]
 8011208:	021b      	lsls	r3, r3, #8
 801120a:	b25a      	sxtb	r2, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	7e1b      	ldrb	r3, [r3, #24]
 8011210:	b25b      	sxtb	r3, r3
 8011212:	4313      	orrs	r3, r2
 8011214:	b25b      	sxtb	r3, r3
 8011216:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	7b7a      	ldrb	r2, [r7, #13]
 8011222:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2206      	movs	r2, #6
 8011228:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // write registers
    for (i = 0; i < u8regsno; i++)
 801122c:	2300      	movs	r3, #0
 801122e:	73fb      	strb	r3, [r7, #15]
 8011230:	e01c      	b.n	801126c <process_FC16+0x84>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8011232:	7bfb      	ldrb	r3, [r7, #15]
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	3307      	adds	r3, #7
        temp = word(
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	4413      	add	r3, r2
 801123c:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 801123e:	7bfb      	ldrb	r3, [r7, #15]
 8011240:	3304      	adds	r3, #4
 8011242:	005b      	lsls	r3, r3, #1
        temp = word(
 8011244:	687a      	ldr	r2, [r7, #4]
 8011246:	4413      	add	r3, r2
 8011248:	7cdb      	ldrb	r3, [r3, #19]
 801124a:	4619      	mov	r1, r3
 801124c:	f7ff fc8a 	bl	8010b64 <word>
 8011250:	4603      	mov	r3, r0
 8011252:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011258:	7bb9      	ldrb	r1, [r7, #14]
 801125a:	7bfb      	ldrb	r3, [r7, #15]
 801125c:	440b      	add	r3, r1
 801125e:	005b      	lsls	r3, r3, #1
 8011260:	4413      	add	r3, r2
 8011262:	897a      	ldrh	r2, [r7, #10]
 8011264:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8011266:	7bfb      	ldrb	r3, [r7, #15]
 8011268:	3301      	adds	r3, #1
 801126a:	73fb      	strb	r3, [r7, #15]
 801126c:	7bfa      	ldrb	r2, [r7, #15]
 801126e:	7b7b      	ldrb	r3, [r7, #13]
 8011270:	429a      	cmp	r2, r3
 8011272:	d3de      	bcc.n	8011232 <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801127a:	3302      	adds	r3, #2
 801127c:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7ff fcea 	bl	8010c58 <sendTxBuffer>

    return u8CopyBufferSize;
 8011284:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af02      	add	r7, sp, #8
 8011296:	6078      	str	r0, [r7, #4]
	/* Modbus RTU callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011298:	2300      	movs	r3, #0
 801129a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 801129c:	2300      	movs	r3, #0
 801129e:	60fb      	str	r3, [r7, #12]
 80112a0:	e018      	b.n	80112d4 <HAL_UART_TxCpltCallback+0x44>
	{
	   	if (mHandlers[i]->port == huart )
 80112a2:	4a14      	ldr	r2, [pc, #80]	; (80112f4 <HAL_UART_TxCpltCallback+0x64>)
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d10d      	bne.n	80112ce <HAL_UART_TxCpltCallback+0x3e>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80112b2:	4a10      	ldr	r2, [pc, #64]	; (80112f4 <HAL_UART_TxCpltCallback+0x64>)
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80112bc:	f107 0308 	add.w	r3, r7, #8
 80112c0:	9300      	str	r3, [sp, #0]
 80112c2:	2300      	movs	r3, #0
 80112c4:	2200      	movs	r2, #0
 80112c6:	2100      	movs	r1, #0
 80112c8:	f7fd fc4e 	bl	800eb68 <xTaskGenericNotifyFromISR>
	   		break;
 80112cc:	e008      	b.n	80112e0 <HAL_UART_TxCpltCallback+0x50>
	for (i = 0; i < numberHandlers; i++ )
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	3301      	adds	r3, #1
 80112d2:	60fb      	str	r3, [r7, #12]
 80112d4:	4b08      	ldr	r3, [pc, #32]	; (80112f8 <HAL_UART_TxCpltCallback+0x68>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	461a      	mov	r2, r3
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	4293      	cmp	r3, r2
 80112de:	dbe0      	blt.n	80112a2 <HAL_UART_TxCpltCallback+0x12>
	   	}
	}
	/* Modbus RTU callback END */
	//when we are streaming data, we need to release the bus after every packet
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80112e0:	2200      	movs	r2, #0
 80112e2:	2102      	movs	r1, #2
 80112e4:	4805      	ldr	r0, [pc, #20]	; (80112fc <HAL_UART_TxCpltCallback+0x6c>)
 80112e6:	f7f8 fa6d 	bl	80097c4 <HAL_GPIO_WritePin>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80112ea:	bf00      	nop
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	20004a3c 	.word	0x20004a3c
 80112f8:	2000493c 	.word	0x2000493c
 80112fc:	40020000 	.word	0x40020000

08011300 <__libc_init_array>:
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	4e0d      	ldr	r6, [pc, #52]	; (8011338 <__libc_init_array+0x38>)
 8011304:	4c0d      	ldr	r4, [pc, #52]	; (801133c <__libc_init_array+0x3c>)
 8011306:	1ba4      	subs	r4, r4, r6
 8011308:	10a4      	asrs	r4, r4, #2
 801130a:	2500      	movs	r5, #0
 801130c:	42a5      	cmp	r5, r4
 801130e:	d109      	bne.n	8011324 <__libc_init_array+0x24>
 8011310:	4e0b      	ldr	r6, [pc, #44]	; (8011340 <__libc_init_array+0x40>)
 8011312:	4c0c      	ldr	r4, [pc, #48]	; (8011344 <__libc_init_array+0x44>)
 8011314:	f000 f82c 	bl	8011370 <_init>
 8011318:	1ba4      	subs	r4, r4, r6
 801131a:	10a4      	asrs	r4, r4, #2
 801131c:	2500      	movs	r5, #0
 801131e:	42a5      	cmp	r5, r4
 8011320:	d105      	bne.n	801132e <__libc_init_array+0x2e>
 8011322:	bd70      	pop	{r4, r5, r6, pc}
 8011324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011328:	4798      	blx	r3
 801132a:	3501      	adds	r5, #1
 801132c:	e7ee      	b.n	801130c <__libc_init_array+0xc>
 801132e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011332:	4798      	blx	r3
 8011334:	3501      	adds	r5, #1
 8011336:	e7f2      	b.n	801131e <__libc_init_array+0x1e>
 8011338:	0801154c 	.word	0x0801154c
 801133c:	0801154c 	.word	0x0801154c
 8011340:	0801154c 	.word	0x0801154c
 8011344:	08011550 	.word	0x08011550

08011348 <memcpy>:
 8011348:	b510      	push	{r4, lr}
 801134a:	1e43      	subs	r3, r0, #1
 801134c:	440a      	add	r2, r1
 801134e:	4291      	cmp	r1, r2
 8011350:	d100      	bne.n	8011354 <memcpy+0xc>
 8011352:	bd10      	pop	{r4, pc}
 8011354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011358:	f803 4f01 	strb.w	r4, [r3, #1]!
 801135c:	e7f7      	b.n	801134e <memcpy+0x6>

0801135e <memset>:
 801135e:	4402      	add	r2, r0
 8011360:	4603      	mov	r3, r0
 8011362:	4293      	cmp	r3, r2
 8011364:	d100      	bne.n	8011368 <memset+0xa>
 8011366:	4770      	bx	lr
 8011368:	f803 1b01 	strb.w	r1, [r3], #1
 801136c:	e7f9      	b.n	8011362 <memset+0x4>
	...

08011370 <_init>:
 8011370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011372:	bf00      	nop
 8011374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011376:	bc08      	pop	{r3}
 8011378:	469e      	mov	lr, r3
 801137a:	4770      	bx	lr

0801137c <_fini>:
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	bf00      	nop
 8011380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011382:	bc08      	pop	{r3}
 8011384:	469e      	mov	lr, r3
 8011386:	4770      	bx	lr
